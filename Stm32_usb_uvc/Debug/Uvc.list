
Uvc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000071c  0800a754  0800a754  0001a754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae70  0800ae70  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae70  0800ae70  0001ae70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae78  0800ae78  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae78  0800ae78  0001ae78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae7c  0800ae7c  0001ae7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800ae80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
 10 .bss          0001e4a0  2000009c  2000009c  0002009c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001e53c  2001e53c  0002009c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014e5c  00000000  00000000  0002010f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003794  00000000  00000000  00034f6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e50  00000000  00000000  00038700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000adc  00000000  00000000  00039550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024eb5  00000000  00000000  0003a02c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000143d7  00000000  00000000  0005eee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d08db  00000000  00000000  000732b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000041f8  00000000  00000000  00143b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  00147d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a73c 	.word	0x0800a73c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	0800a73c 	.word	0x0800a73c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <_write>:
extern uint8_t* uvc_ready_framebuffer_ptr;
extern uint32_t uvc_ready_frame_length;
extern uint32_t uvc_frame_cnt;

int _write(int file, char *ptr, int len)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	b29a      	uxth	r2, r3
 800057c:	f04f 33ff 	mov.w	r3, #4294967295
 8000580:	68b9      	ldr	r1, [r7, #8]
 8000582:	4804      	ldr	r0, [pc, #16]	; (8000594 <_write+0x28>)
 8000584:	f003 fcac 	bl	8003ee0 <HAL_UART_Transmit>
    return len;
 8000588:	687b      	ldr	r3, [r7, #4]
}
 800058a:	4618      	mov	r0, r3
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	200000b8 	.word	0x200000b8

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059c:	f000 faae 	bl	8000afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f832 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a4:	f000 f8c4 	bl	8000730 <MX_GPIO_Init>
  MX_USB_HOST_Init();
 80005a8:	f008 fd70 	bl	800908c <MX_USB_HOST_Init>
  MX_USART1_UART_Init();
 80005ac:	f000 f896 	bl	80006dc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  video_stream_init_buffers((uint8_t*)uvc_framebuffer0, (uint8_t*)uvc_framebuffer0);
 80005b0:	490f      	ldr	r1, [pc, #60]	; (80005f0 <main+0x58>)
 80005b2:	480f      	ldr	r0, [pc, #60]	; (80005f0 <main+0x58>)
 80005b4:	f006 fdb8 	bl	8007128 <video_stream_init_buffers>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005b8:	f008 fd88 	bl	80090cc <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    USB_HOST_fast_class_call();
 80005bc:	f008 fd58 	bl	8009070 <USB_HOST_fast_class_call>

	if (uvc_parsing_new_frame_ready)
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <main+0x5c>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d0f7      	beq.n	80005b8 <main+0x20>
	{
	  uvc_parsing_new_frame_ready = 0;
 80005c8:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <main+0x5c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	701a      	strb	r2, [r3, #0]

//	  if (uvc_frame_cnt == 5)
//	  {
		  uvc_frame_cnt = 0;
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <main+0x60>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, (uint8_t *)(uvc_ready_framebuffer_ptr), uvc_ready_frame_length, HAL_MAX_DELAY);
 80005d4:	4b09      	ldr	r3, [pc, #36]	; (80005fc <main+0x64>)
 80005d6:	6819      	ldr	r1, [r3, #0]
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <main+0x68>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	b29a      	uxth	r2, r3
 80005de:	f04f 33ff 	mov.w	r3, #4294967295
 80005e2:	4808      	ldr	r0, [pc, #32]	; (8000604 <main+0x6c>)
 80005e4:	f003 fc7c 	bl	8003ee0 <HAL_UART_Transmit>
		//IAR's debugger functions

//	  }

	  video_stream_ready_update();
 80005e8:	f006 fdd6 	bl	8007198 <video_stream_ready_update>
    MX_USB_HOST_Process();
 80005ec:	e7e4      	b.n	80005b8 <main+0x20>
 80005ee:	bf00      	nop
 80005f0:	20000100 	.word	0x20000100
 80005f4:	2001c54d 	.word	0x2001c54d
 80005f8:	2001c538 	.word	0x2001c538
 80005fc:	2001c55c 	.word	0x2001c55c
 8000600:	2001c548 	.word	0x2001c548
 8000604:	200000b8 	.word	0x200000b8

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	; 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	2230      	movs	r2, #48	; 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f009 fad9 	bl	8009bce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	4a27      	ldr	r2, [pc, #156]	; (80006d4 <SystemClock_Config+0xcc>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	; 0x40
 800063c:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a21      	ldr	r2, [pc, #132]	; (80006d8 <SystemClock_Config+0xd0>)
 8000652:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000664:	2301      	movs	r3, #1
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000672:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000678:	2308      	movs	r3, #8
 800067a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800067c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000680:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000682:	2302      	movs	r3, #2
 8000684:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000686:	2307      	movs	r3, #7
 8000688:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068a:	f107 0320 	add.w	r3, r7, #32
 800068e:	4618      	mov	r0, r3
 8000690:	f002 ff3e 	bl	8003510 <HAL_RCC_OscConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800069a:	f000 f89b 	bl	80007d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069e:	230f      	movs	r3, #15
 80006a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a2:	2302      	movs	r3, #2
 80006a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b6:	f107 030c 	add.w	r3, r7, #12
 80006ba:	2105      	movs	r1, #5
 80006bc:	4618      	mov	r0, r3
 80006be:	f003 f99f 	bl	8003a00 <HAL_RCC_ClockConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006c8:	f000 f884 	bl	80007d4 <Error_Handler>
  }
}
 80006cc:	bf00      	nop
 80006ce:	3750      	adds	r7, #80	; 0x50
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_USART1_UART_Init+0x4c>)
 80006e2:	4a12      	ldr	r2, [pc, #72]	; (800072c <MX_USART1_UART_Init+0x50>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_USART1_UART_Init+0x4c>)
 80006e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_USART1_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_USART1_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_USART1_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_USART1_UART_Init+0x4c>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_USART1_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_USART1_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_USART1_UART_Init+0x4c>)
 8000714:	f003 fb94 	bl	8003e40 <HAL_UART_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800071e:	f000 f859 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200000b8 	.word	0x200000b8
 800072c:	40011000 	.word	0x40011000

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b480      	push	{r7}
 8000732:	b087      	sub	sp, #28
 8000734:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
 800073a:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <MX_GPIO_Init+0xa0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a24      	ldr	r2, [pc, #144]	; (80007d0 <MX_GPIO_Init+0xa0>)
 8000740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <MX_GPIO_Init+0xa0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800074e:	617b      	str	r3, [r7, #20]
 8000750:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <MX_GPIO_Init+0xa0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a1d      	ldr	r2, [pc, #116]	; (80007d0 <MX_GPIO_Init+0xa0>)
 800075c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <MX_GPIO_Init+0xa0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <MX_GPIO_Init+0xa0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a16      	ldr	r2, [pc, #88]	; (80007d0 <MX_GPIO_Init+0xa0>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_GPIO_Init+0xa0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <MX_GPIO_Init+0xa0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a0f      	ldr	r2, [pc, #60]	; (80007d0 <MX_GPIO_Init+0xa0>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <MX_GPIO_Init+0xa0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_GPIO_Init+0xa0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a08      	ldr	r2, [pc, #32]	; (80007d0 <MX_GPIO_Init+0xa0>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_GPIO_Init+0xa0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c2:	bf00      	nop
 80007c4:	371c      	adds	r7, #28
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800

080007d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d8:	b672      	cpsid	i
}
 80007da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007dc:	e7fe      	b.n	80007dc <Error_Handler+0x8>
	...

080007e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <HAL_MspInit+0x4c>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ee:	4a0f      	ldr	r2, [pc, #60]	; (800082c <HAL_MspInit+0x4c>)
 80007f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f4:	6453      	str	r3, [r2, #68]	; 0x44
 80007f6:	4b0d      	ldr	r3, [pc, #52]	; (800082c <HAL_MspInit+0x4c>)
 80007f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <HAL_MspInit+0x4c>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	4a08      	ldr	r2, [pc, #32]	; (800082c <HAL_MspInit+0x4c>)
 800080c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000810:	6413      	str	r3, [r2, #64]	; 0x40
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <HAL_MspInit+0x4c>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800

08000830 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a1d      	ldr	r2, [pc, #116]	; (80008c4 <HAL_UART_MspInit+0x94>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d134      	bne.n	80008bc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
 8000856:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <HAL_UART_MspInit+0x98>)
 8000858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085a:	4a1b      	ldr	r2, [pc, #108]	; (80008c8 <HAL_UART_MspInit+0x98>)
 800085c:	f043 0310 	orr.w	r3, r3, #16
 8000860:	6453      	str	r3, [r2, #68]	; 0x44
 8000862:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <HAL_UART_MspInit+0x98>)
 8000864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000866:	f003 0310 	and.w	r3, r3, #16
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <HAL_UART_MspInit+0x98>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a14      	ldr	r2, [pc, #80]	; (80008c8 <HAL_UART_MspInit+0x98>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <HAL_UART_MspInit+0x98>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800088a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800088e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000898:	2303      	movs	r3, #3
 800089a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800089c:	2307      	movs	r3, #7
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4619      	mov	r1, r3
 80008a6:	4809      	ldr	r0, [pc, #36]	; (80008cc <HAL_UART_MspInit+0x9c>)
 80008a8:	f000 fb62 	bl	8000f70 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2100      	movs	r1, #0
 80008b0:	2025      	movs	r0, #37	; 0x25
 80008b2:	f000 fa94 	bl	8000dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008b6:	2025      	movs	r0, #37	; 0x25
 80008b8:	f000 faad 	bl	8000e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008bc:	bf00      	nop
 80008be:	3728      	adds	r7, #40	; 0x28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40011000 	.word	0x40011000
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40020000 	.word	0x40020000

080008d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008d4:	e7fe      	b.n	80008d4 <NMI_Handler+0x4>

080008d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <HardFault_Handler+0x4>

080008dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <MemManage_Handler+0x4>

080008e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <BusFault_Handler+0x4>

080008e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <UsageFault_Handler+0x4>

080008ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800091c:	f000 f940 	bl	8000ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}

08000924 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000928:	4802      	ldr	r0, [pc, #8]	; (8000934 <USART1_IRQHandler+0x10>)
 800092a:	f003 fb65 	bl	8003ff8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200000b8 	.word	0x200000b8

08000938 <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 800093c:	4802      	ldr	r0, [pc, #8]	; (8000948 <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 800093e:	f000 ff93 	bl	8001868 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	2001e010 	.word	0x2001e010

0800094c <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8000950:	4802      	ldr	r0, [pc, #8]	; (800095c <OTG_HS_EP1_IN_IRQHandler+0x10>)
 8000952:	f000 ff89 	bl	8001868 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	2001e010 	.word	0x2001e010

08000960 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8000964:	4802      	ldr	r0, [pc, #8]	; (8000970 <OTG_HS_IRQHandler+0x10>)
 8000966:	f000 ff7f 	bl	8001868 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	2001e010 	.word	0x2001e010

08000974 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	e00a      	b.n	800099c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000986:	f3af 8000 	nop.w
 800098a:	4601      	mov	r1, r0
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	1c5a      	adds	r2, r3, #1
 8000990:	60ba      	str	r2, [r7, #8]
 8000992:	b2ca      	uxtb	r2, r1
 8000994:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	3301      	adds	r3, #1
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	697a      	ldr	r2, [r7, #20]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	dbf0      	blt.n	8000986 <_read+0x12>
  }

  return len;
 80009a4:	687b      	ldr	r3, [r7, #4]
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3718      	adds	r7, #24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <_close>:
  }
  return len;
}

int _close(int file)
{
 80009ae:	b480      	push	{r7}
 80009b0:	b083      	sub	sp, #12
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009c6:	b480      	push	{r7}
 80009c8:	b083      	sub	sp, #12
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
 80009ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009d6:	605a      	str	r2, [r3, #4]
  return 0;
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <_isatty>:

int _isatty(int file)
{
 80009e6:	b480      	push	{r7}
 80009e8:	b083      	sub	sp, #12
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009ee:	2301      	movs	r3, #1
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
	...

08000a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a20:	4a14      	ldr	r2, [pc, #80]	; (8000a74 <_sbrk+0x5c>)
 8000a22:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <_sbrk+0x60>)
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a2c:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <_sbrk+0x64>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d102      	bne.n	8000a3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a34:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <_sbrk+0x64>)
 8000a36:	4a12      	ldr	r2, [pc, #72]	; (8000a80 <_sbrk+0x68>)
 8000a38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <_sbrk+0x64>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4413      	add	r3, r2
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d207      	bcs.n	8000a58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a48:	f009 f920 	bl	8009c8c <__errno>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	220c      	movs	r2, #12
 8000a50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
 8000a56:	e009      	b.n	8000a6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <_sbrk+0x64>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a5e:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <_sbrk+0x64>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4413      	add	r3, r2
 8000a66:	4a05      	ldr	r2, [pc, #20]	; (8000a7c <_sbrk+0x64>)
 8000a68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3718      	adds	r7, #24
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20020000 	.word	0x20020000
 8000a78:	00000400 	.word	0x00000400
 8000a7c:	2001c300 	.word	0x2001c300
 8000a80:	2001e540 	.word	0x2001e540

08000a84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <SystemInit+0x20>)
 8000a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a8e:	4a05      	ldr	r2, [pc, #20]	; (8000aa4 <SystemInit+0x20>)
 8000a90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000aa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000aac:	f7ff ffea 	bl	8000a84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ab0:	480c      	ldr	r0, [pc, #48]	; (8000ae4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ab2:	490d      	ldr	r1, [pc, #52]	; (8000ae8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ab4:	4a0d      	ldr	r2, [pc, #52]	; (8000aec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab8:	e002      	b.n	8000ac0 <LoopCopyDataInit>

08000aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000abe:	3304      	adds	r3, #4

08000ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac4:	d3f9      	bcc.n	8000aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ac8:	4c0a      	ldr	r4, [pc, #40]	; (8000af4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000acc:	e001      	b.n	8000ad2 <LoopFillZerobss>

08000ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad0:	3204      	adds	r2, #4

08000ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad4:	d3fb      	bcc.n	8000ace <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ad6:	f009 f8df 	bl	8009c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ada:	f7ff fd5d 	bl	8000598 <main>
  bx  lr    
 8000ade:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ae0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae8:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8000aec:	0800ae80 	.word	0x0800ae80
  ldr r2, =_sbss
 8000af0:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8000af4:	2001e53c 	.word	0x2001e53c

08000af8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af8:	e7fe      	b.n	8000af8 <ADC_IRQHandler>
	...

08000afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b00:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <HAL_Init+0x40>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a0d      	ldr	r2, [pc, #52]	; (8000b3c <HAL_Init+0x40>)
 8000b06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <HAL_Init+0x40>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <HAL_Init+0x40>)
 8000b12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <HAL_Init+0x40>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a07      	ldr	r2, [pc, #28]	; (8000b3c <HAL_Init+0x40>)
 8000b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b24:	2003      	movs	r0, #3
 8000b26:	f000 f94f 	bl	8000dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2a:	200f      	movs	r0, #15
 8000b2c:	f000 f808 	bl	8000b40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b30:	f7ff fe56 	bl	80007e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023c00 	.word	0x40023c00

08000b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_InitTick+0x54>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_InitTick+0x58>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	4619      	mov	r1, r3
 8000b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 f967 	bl	8000e32 <HAL_SYSTICK_Config>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e00e      	b.n	8000b8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b0f      	cmp	r3, #15
 8000b72:	d80a      	bhi.n	8000b8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b74:	2200      	movs	r2, #0
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	f04f 30ff 	mov.w	r0, #4294967295
 8000b7c:	f000 f92f 	bl	8000dde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b80:	4a06      	ldr	r2, [pc, #24]	; (8000b9c <HAL_InitTick+0x5c>)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b86:	2300      	movs	r3, #0
 8000b88:	e000      	b.n	8000b8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000000 	.word	0x20000000
 8000b98:	20000008 	.word	0x20000008
 8000b9c:	20000004 	.word	0x20000004

08000ba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_IncTick+0x20>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_IncTick+0x24>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <HAL_IncTick+0x24>)
 8000bb2:	6013      	str	r3, [r2, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	2001c304 	.word	0x2001c304

08000bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return uwTick;
 8000bcc:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <HAL_GetTick+0x14>)
 8000bce:	681b      	ldr	r3, [r3, #0]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	2001c304 	.word	0x2001c304

08000be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be8:	f7ff ffee 	bl	8000bc8 <HAL_GetTick>
 8000bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf8:	d005      	beq.n	8000c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <HAL_Delay+0x44>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4413      	add	r3, r2
 8000c04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c06:	bf00      	nop
 8000c08:	f7ff ffde 	bl	8000bc8 <HAL_GetTick>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d8f7      	bhi.n	8000c08 <HAL_Delay+0x28>
  {
  }
}
 8000c18:	bf00      	nop
 8000c1a:	bf00      	nop
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000008 	.word	0x20000008

08000c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c44:	4013      	ands	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5a:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	60d3      	str	r3, [r2, #12]
}
 8000c60:	bf00      	nop
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <__NVIC_GetPriorityGrouping+0x18>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	f003 0307 	and.w	r3, r3, #7
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	db0b      	blt.n	8000cb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	f003 021f 	and.w	r2, r3, #31
 8000ca4:	4907      	ldr	r1, [pc, #28]	; (8000cc4 <__NVIC_EnableIRQ+0x38>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	095b      	lsrs	r3, r3, #5
 8000cac:	2001      	movs	r0, #1
 8000cae:	fa00 f202 	lsl.w	r2, r0, r2
 8000cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000e100 	.word	0xe000e100

08000cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	db0a      	blt.n	8000cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	490c      	ldr	r1, [pc, #48]	; (8000d14 <__NVIC_SetPriority+0x4c>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	0112      	lsls	r2, r2, #4
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	440b      	add	r3, r1
 8000cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf0:	e00a      	b.n	8000d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4908      	ldr	r1, [pc, #32]	; (8000d18 <__NVIC_SetPriority+0x50>)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	3b04      	subs	r3, #4
 8000d00:	0112      	lsls	r2, r2, #4
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	440b      	add	r3, r1
 8000d06:	761a      	strb	r2, [r3, #24]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000e100 	.word	0xe000e100
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f1c3 0307 	rsb	r3, r3, #7
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	bf28      	it	cs
 8000d3a:	2304      	movcs	r3, #4
 8000d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3304      	adds	r3, #4
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	d902      	bls.n	8000d4c <NVIC_EncodePriority+0x30>
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3b03      	subs	r3, #3
 8000d4a:	e000      	b.n	8000d4e <NVIC_EncodePriority+0x32>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	f04f 32ff 	mov.w	r2, #4294967295
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d64:	f04f 31ff 	mov.w	r1, #4294967295
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	43d9      	mvns	r1, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	4313      	orrs	r3, r2
         );
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3724      	adds	r7, #36	; 0x24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
	...

08000d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d94:	d301      	bcc.n	8000d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d96:	2301      	movs	r3, #1
 8000d98:	e00f      	b.n	8000dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <SysTick_Config+0x40>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da2:	210f      	movs	r1, #15
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295
 8000da8:	f7ff ff8e 	bl	8000cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <SysTick_Config+0x40>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db2:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <SysTick_Config+0x40>)
 8000db4:	2207      	movs	r2, #7
 8000db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	e000e010 	.word	0xe000e010

08000dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff ff29 	bl	8000c28 <__NVIC_SetPriorityGrouping>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b086      	sub	sp, #24
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
 8000dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df0:	f7ff ff3e 	bl	8000c70 <__NVIC_GetPriorityGrouping>
 8000df4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	68b9      	ldr	r1, [r7, #8]
 8000dfa:	6978      	ldr	r0, [r7, #20]
 8000dfc:	f7ff ff8e 	bl	8000d1c <NVIC_EncodePriority>
 8000e00:	4602      	mov	r2, r0
 8000e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e06:	4611      	mov	r1, r2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff5d 	bl	8000cc8 <__NVIC_SetPriority>
}
 8000e0e:	bf00      	nop
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff31 	bl	8000c8c <__NVIC_EnableIRQ>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ffa2 	bl	8000d84 <SysTick_Config>
 8000e40:	4603      	mov	r3, r0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b084      	sub	sp, #16
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e56:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e58:	f7ff feb6 	bl	8000bc8 <HAL_GetTick>
 8000e5c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d008      	beq.n	8000e7c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2280      	movs	r2, #128	; 0x80
 8000e6e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2200      	movs	r2, #0
 8000e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e052      	b.n	8000f22 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f022 0216 	bic.w	r2, r2, #22
 8000e8a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	695a      	ldr	r2, [r3, #20]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e9a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d103      	bne.n	8000eac <HAL_DMA_Abort+0x62>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d007      	beq.n	8000ebc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f022 0208 	bic.w	r2, r2, #8
 8000eba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f022 0201 	bic.w	r2, r2, #1
 8000eca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ecc:	e013      	b.n	8000ef6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ece:	f7ff fe7b 	bl	8000bc8 <HAL_GetTick>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	2b05      	cmp	r3, #5
 8000eda:	d90c      	bls.n	8000ef6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2220      	movs	r2, #32
 8000ee0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e015      	b.n	8000f22 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d1e4      	bne.n	8000ece <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f08:	223f      	movs	r2, #63	; 0x3f
 8000f0a:	409a      	lsls	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2201      	movs	r2, #1
 8000f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d004      	beq.n	8000f48 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2280      	movs	r2, #128	; 0x80
 8000f42:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e00c      	b.n	8000f62 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2205      	movs	r2, #5
 8000f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f022 0201 	bic.w	r2, r2, #1
 8000f5e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
	...

08000f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b089      	sub	sp, #36	; 0x24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]
 8000f8a:	e16b      	b.n	8001264 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	f040 815a 	bne.w	800125e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 0303 	and.w	r3, r3, #3
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d005      	beq.n	8000fc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d130      	bne.n	8001024 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	2203      	movs	r2, #3
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	68da      	ldr	r2, [r3, #12]
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	091b      	lsrs	r3, r3, #4
 800100e:	f003 0201 	and.w	r2, r3, #1
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 0303 	and.w	r3, r3, #3
 800102c:	2b03      	cmp	r3, #3
 800102e:	d017      	beq.n	8001060 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	2203      	movs	r2, #3
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	689a      	ldr	r2, [r3, #8]
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0303 	and.w	r3, r3, #3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d123      	bne.n	80010b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	08da      	lsrs	r2, r3, #3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3208      	adds	r2, #8
 8001074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001078:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	220f      	movs	r2, #15
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	691a      	ldr	r2, [r3, #16]
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	08da      	lsrs	r2, r3, #3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3208      	adds	r2, #8
 80010ae:	69b9      	ldr	r1, [r7, #24]
 80010b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	2203      	movs	r2, #3
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0203 	and.w	r2, r3, #3
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f000 80b4 	beq.w	800125e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	4b60      	ldr	r3, [pc, #384]	; (800127c <HAL_GPIO_Init+0x30c>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	4a5f      	ldr	r2, [pc, #380]	; (800127c <HAL_GPIO_Init+0x30c>)
 8001100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001104:	6453      	str	r3, [r2, #68]	; 0x44
 8001106:	4b5d      	ldr	r3, [pc, #372]	; (800127c <HAL_GPIO_Init+0x30c>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001112:	4a5b      	ldr	r2, [pc, #364]	; (8001280 <HAL_GPIO_Init+0x310>)
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	089b      	lsrs	r3, r3, #2
 8001118:	3302      	adds	r3, #2
 800111a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f003 0303 	and.w	r3, r3, #3
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	220f      	movs	r2, #15
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a52      	ldr	r2, [pc, #328]	; (8001284 <HAL_GPIO_Init+0x314>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d02b      	beq.n	8001196 <HAL_GPIO_Init+0x226>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a51      	ldr	r2, [pc, #324]	; (8001288 <HAL_GPIO_Init+0x318>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d025      	beq.n	8001192 <HAL_GPIO_Init+0x222>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a50      	ldr	r2, [pc, #320]	; (800128c <HAL_GPIO_Init+0x31c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d01f      	beq.n	800118e <HAL_GPIO_Init+0x21e>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4f      	ldr	r2, [pc, #316]	; (8001290 <HAL_GPIO_Init+0x320>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d019      	beq.n	800118a <HAL_GPIO_Init+0x21a>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a4e      	ldr	r2, [pc, #312]	; (8001294 <HAL_GPIO_Init+0x324>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d013      	beq.n	8001186 <HAL_GPIO_Init+0x216>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a4d      	ldr	r2, [pc, #308]	; (8001298 <HAL_GPIO_Init+0x328>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d00d      	beq.n	8001182 <HAL_GPIO_Init+0x212>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a4c      	ldr	r2, [pc, #304]	; (800129c <HAL_GPIO_Init+0x32c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d007      	beq.n	800117e <HAL_GPIO_Init+0x20e>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a4b      	ldr	r2, [pc, #300]	; (80012a0 <HAL_GPIO_Init+0x330>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d101      	bne.n	800117a <HAL_GPIO_Init+0x20a>
 8001176:	2307      	movs	r3, #7
 8001178:	e00e      	b.n	8001198 <HAL_GPIO_Init+0x228>
 800117a:	2308      	movs	r3, #8
 800117c:	e00c      	b.n	8001198 <HAL_GPIO_Init+0x228>
 800117e:	2306      	movs	r3, #6
 8001180:	e00a      	b.n	8001198 <HAL_GPIO_Init+0x228>
 8001182:	2305      	movs	r3, #5
 8001184:	e008      	b.n	8001198 <HAL_GPIO_Init+0x228>
 8001186:	2304      	movs	r3, #4
 8001188:	e006      	b.n	8001198 <HAL_GPIO_Init+0x228>
 800118a:	2303      	movs	r3, #3
 800118c:	e004      	b.n	8001198 <HAL_GPIO_Init+0x228>
 800118e:	2302      	movs	r3, #2
 8001190:	e002      	b.n	8001198 <HAL_GPIO_Init+0x228>
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <HAL_GPIO_Init+0x228>
 8001196:	2300      	movs	r3, #0
 8001198:	69fa      	ldr	r2, [r7, #28]
 800119a:	f002 0203 	and.w	r2, r2, #3
 800119e:	0092      	lsls	r2, r2, #2
 80011a0:	4093      	lsls	r3, r2
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011a8:	4935      	ldr	r1, [pc, #212]	; (8001280 <HAL_GPIO_Init+0x310>)
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	089b      	lsrs	r3, r3, #2
 80011ae:	3302      	adds	r3, #2
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011b6:	4b3b      	ldr	r3, [pc, #236]	; (80012a4 <HAL_GPIO_Init+0x334>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	43db      	mvns	r3, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4013      	ands	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011da:	4a32      	ldr	r2, [pc, #200]	; (80012a4 <HAL_GPIO_Init+0x334>)
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011e0:	4b30      	ldr	r3, [pc, #192]	; (80012a4 <HAL_GPIO_Init+0x334>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001204:	4a27      	ldr	r2, [pc, #156]	; (80012a4 <HAL_GPIO_Init+0x334>)
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800120a:	4b26      	ldr	r3, [pc, #152]	; (80012a4 <HAL_GPIO_Init+0x334>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800122e:	4a1d      	ldr	r2, [pc, #116]	; (80012a4 <HAL_GPIO_Init+0x334>)
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001234:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <HAL_GPIO_Init+0x334>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001258:	4a12      	ldr	r2, [pc, #72]	; (80012a4 <HAL_GPIO_Init+0x334>)
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3301      	adds	r3, #1
 8001262:	61fb      	str	r3, [r7, #28]
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	2b0f      	cmp	r3, #15
 8001268:	f67f ae90 	bls.w	8000f8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800126c:	bf00      	nop
 800126e:	bf00      	nop
 8001270:	3724      	adds	r7, #36	; 0x24
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800
 8001280:	40013800 	.word	0x40013800
 8001284:	40020000 	.word	0x40020000
 8001288:	40020400 	.word	0x40020400
 800128c:	40020800 	.word	0x40020800
 8001290:	40020c00 	.word	0x40020c00
 8001294:	40021000 	.word	0x40021000
 8001298:	40021400 	.word	0x40021400
 800129c:	40021800 	.word	0x40021800
 80012a0:	40021c00 	.word	0x40021c00
 80012a4:	40013c00 	.word	0x40013c00

080012a8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af02      	add	r7, sp, #8
 80012ae:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e059      	b.n	800136e <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d106      	bne.n	80012da <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f007 ff47 	bl	8009168 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2203      	movs	r2, #3
 80012de:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012e8:	d102      	bne.n	80012f0 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f003 fe30 	bl	8004f5a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6818      	ldr	r0, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	7c1a      	ldrb	r2, [r3, #16]
 8001302:	f88d 2000 	strb.w	r2, [sp]
 8001306:	3304      	adds	r3, #4
 8001308:	cb0e      	ldmia	r3, {r1, r2, r3}
 800130a:	f003 fdb1 	bl	8004e70 <USB_CoreInit>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d005      	beq.n	8001320 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2202      	movs	r2, #2
 8001318:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e026      	b.n	800136e <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2101      	movs	r1, #1
 8001326:	4618      	mov	r0, r3
 8001328:	f003 fe28 	bl	8004f7c <USB_SetCurrentMode>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d005      	beq.n	800133e <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2202      	movs	r2, #2
 8001336:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e017      	b.n	800136e <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6818      	ldr	r0, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	7c1a      	ldrb	r2, [r3, #16]
 8001346:	f88d 2000 	strb.w	r2, [sp]
 800134a:	3304      	adds	r3, #4
 800134c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800134e:	f003 ffd1 	bl	80052f4 <USB_HostInit>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d005      	beq.n	8001364 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2202      	movs	r2, #2
 800135c:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e004      	b.n	800136e <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001376:	b590      	push	{r4, r7, lr}
 8001378:	b08b      	sub	sp, #44	; 0x2c
 800137a:	af04      	add	r7, sp, #16
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	4608      	mov	r0, r1
 8001380:	4611      	mov	r1, r2
 8001382:	461a      	mov	r2, r3
 8001384:	4603      	mov	r3, r0
 8001386:	70fb      	strb	r3, [r7, #3]
 8001388:	460b      	mov	r3, r1
 800138a:	70bb      	strb	r3, [r7, #2]
 800138c:	4613      	mov	r3, r2
 800138e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001390:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001392:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 800139a:	2b01      	cmp	r3, #1
 800139c:	d101      	bne.n	80013a2 <HAL_HCD_HC_Init+0x2c>
 800139e:	2302      	movs	r3, #2
 80013a0:	e09d      	b.n	80014de <HAL_HCD_HC_Init+0x168>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80013aa:	78fa      	ldrb	r2, [r7, #3]
 80013ac:	6879      	ldr	r1, [r7, #4]
 80013ae:	4613      	mov	r3, r2
 80013b0:	011b      	lsls	r3, r3, #4
 80013b2:	1a9b      	subs	r3, r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	440b      	add	r3, r1
 80013b8:	3319      	adds	r3, #25
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80013be:	78fa      	ldrb	r2, [r7, #3]
 80013c0:	6879      	ldr	r1, [r7, #4]
 80013c2:	4613      	mov	r3, r2
 80013c4:	011b      	lsls	r3, r3, #4
 80013c6:	1a9b      	subs	r3, r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	440b      	add	r3, r1
 80013cc:	3314      	adds	r3, #20
 80013ce:	787a      	ldrb	r2, [r7, #1]
 80013d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80013d2:	78fa      	ldrb	r2, [r7, #3]
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	4613      	mov	r3, r2
 80013d8:	011b      	lsls	r3, r3, #4
 80013da:	1a9b      	subs	r3, r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	440b      	add	r3, r1
 80013e0:	3315      	adds	r3, #21
 80013e2:	78fa      	ldrb	r2, [r7, #3]
 80013e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80013e6:	78fa      	ldrb	r2, [r7, #3]
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	4613      	mov	r3, r2
 80013ec:	011b      	lsls	r3, r3, #4
 80013ee:	1a9b      	subs	r3, r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	440b      	add	r3, r1
 80013f4:	3326      	adds	r3, #38	; 0x26
 80013f6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80013fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80013fc:	78fa      	ldrb	r2, [r7, #3]
 80013fe:	78bb      	ldrb	r3, [r7, #2]
 8001400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001404:	b2d8      	uxtb	r0, r3
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	4613      	mov	r3, r2
 800140a:	011b      	lsls	r3, r3, #4
 800140c:	1a9b      	subs	r3, r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	440b      	add	r3, r1
 8001412:	3316      	adds	r3, #22
 8001414:	4602      	mov	r2, r0
 8001416:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001418:	78fb      	ldrb	r3, [r7, #3]
 800141a:	4619      	mov	r1, r3
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 fbc7 	bl	8001bb0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001422:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001426:	2b00      	cmp	r3, #0
 8001428:	da0a      	bge.n	8001440 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800142a:	78fa      	ldrb	r2, [r7, #3]
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	011b      	lsls	r3, r3, #4
 8001432:	1a9b      	subs	r3, r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	440b      	add	r3, r1
 8001438:	3317      	adds	r3, #23
 800143a:	2201      	movs	r2, #1
 800143c:	701a      	strb	r2, [r3, #0]
 800143e:	e009      	b.n	8001454 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001440:	78fa      	ldrb	r2, [r7, #3]
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	011b      	lsls	r3, r3, #4
 8001448:	1a9b      	subs	r3, r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	440b      	add	r3, r1
 800144e:	3317      	adds	r3, #23
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f004 f8af 	bl	80055bc <USB_GetHostSpeed>
 800145e:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001460:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001464:	2b01      	cmp	r3, #1
 8001466:	d10b      	bne.n	8001480 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001468:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800146c:	2b01      	cmp	r3, #1
 800146e:	d107      	bne.n	8001480 <HAL_HCD_HC_Init+0x10a>
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d104      	bne.n	8001480 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	2bbc      	cmp	r3, #188	; 0xbc
 800147a:	d901      	bls.n	8001480 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800147c:	23bc      	movs	r3, #188	; 0xbc
 800147e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001480:	78fa      	ldrb	r2, [r7, #3]
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	011b      	lsls	r3, r3, #4
 8001488:	1a9b      	subs	r3, r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	3318      	adds	r3, #24
 8001490:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001494:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001496:	78fa      	ldrb	r2, [r7, #3]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	b298      	uxth	r0, r3
 800149c:	6879      	ldr	r1, [r7, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	011b      	lsls	r3, r3, #4
 80014a2:	1a9b      	subs	r3, r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	440b      	add	r3, r1
 80014a8:	3328      	adds	r3, #40	; 0x28
 80014aa:	4602      	mov	r2, r0
 80014ac:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6818      	ldr	r0, [r3, #0]
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	787c      	ldrb	r4, [r7, #1]
 80014b8:	78ba      	ldrb	r2, [r7, #2]
 80014ba:	78f9      	ldrb	r1, [r7, #3]
 80014bc:	9302      	str	r3, [sp, #8]
 80014be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80014c2:	9301      	str	r3, [sp, #4]
 80014c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	4623      	mov	r3, r4
 80014cc:	f004 f89e 	bl	800560c <USB_HC_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	371c      	adds	r7, #28
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd90      	pop	{r4, r7, pc}

080014e6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b084      	sub	sp, #16
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	460b      	mov	r3, r1
 80014f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d101      	bne.n	8001504 <HAL_HCD_HC_Halt+0x1e>
 8001500:	2302      	movs	r3, #2
 8001502:	e00f      	b.n	8001524 <HAL_HCD_HC_Halt+0x3e>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	78fa      	ldrb	r2, [r7, #3]
 8001512:	4611      	mov	r1, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f004 fc30 	bl	8005d7a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8001522:	7bfb      	ldrb	r3, [r7, #15]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	4608      	mov	r0, r1
 8001536:	4611      	mov	r1, r2
 8001538:	461a      	mov	r2, r3
 800153a:	4603      	mov	r3, r0
 800153c:	70fb      	strb	r3, [r7, #3]
 800153e:	460b      	mov	r3, r1
 8001540:	70bb      	strb	r3, [r7, #2]
 8001542:	4613      	mov	r3, r2
 8001544:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001546:	78fa      	ldrb	r2, [r7, #3]
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	4613      	mov	r3, r2
 800154c:	011b      	lsls	r3, r3, #4
 800154e:	1a9b      	subs	r3, r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	440b      	add	r3, r1
 8001554:	3317      	adds	r3, #23
 8001556:	78ba      	ldrb	r2, [r7, #2]
 8001558:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800155a:	78fa      	ldrb	r2, [r7, #3]
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	4613      	mov	r3, r2
 8001560:	011b      	lsls	r3, r3, #4
 8001562:	1a9b      	subs	r3, r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	440b      	add	r3, r1
 8001568:	3326      	adds	r3, #38	; 0x26
 800156a:	787a      	ldrb	r2, [r7, #1]
 800156c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800156e:	7c3b      	ldrb	r3, [r7, #16]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d114      	bne.n	800159e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001574:	78fa      	ldrb	r2, [r7, #3]
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	4613      	mov	r3, r2
 800157a:	011b      	lsls	r3, r3, #4
 800157c:	1a9b      	subs	r3, r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	440b      	add	r3, r1
 8001582:	332a      	adds	r3, #42	; 0x2a
 8001584:	2203      	movs	r2, #3
 8001586:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001588:	78fa      	ldrb	r2, [r7, #3]
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	4613      	mov	r3, r2
 800158e:	011b      	lsls	r3, r3, #4
 8001590:	1a9b      	subs	r3, r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	440b      	add	r3, r1
 8001596:	3319      	adds	r3, #25
 8001598:	7f3a      	ldrb	r2, [r7, #28]
 800159a:	701a      	strb	r2, [r3, #0]
 800159c:	e009      	b.n	80015b2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800159e:	78fa      	ldrb	r2, [r7, #3]
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	011b      	lsls	r3, r3, #4
 80015a6:	1a9b      	subs	r3, r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	440b      	add	r3, r1
 80015ac:	332a      	adds	r3, #42	; 0x2a
 80015ae:	2202      	movs	r2, #2
 80015b0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80015b2:	787b      	ldrb	r3, [r7, #1]
 80015b4:	2b03      	cmp	r3, #3
 80015b6:	f200 8102 	bhi.w	80017be <HAL_HCD_HC_SubmitRequest+0x292>
 80015ba:	a201      	add	r2, pc, #4	; (adr r2, 80015c0 <HAL_HCD_HC_SubmitRequest+0x94>)
 80015bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c0:	080015d1 	.word	0x080015d1
 80015c4:	080017a9 	.word	0x080017a9
 80015c8:	08001695 	.word	0x08001695
 80015cc:	0800171f 	.word	0x0800171f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80015d0:	7c3b      	ldrb	r3, [r7, #16]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	f040 80f5 	bne.w	80017c2 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80015d8:	78bb      	ldrb	r3, [r7, #2]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d12d      	bne.n	800163a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80015de:	8b3b      	ldrh	r3, [r7, #24]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d109      	bne.n	80015f8 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80015e4:	78fa      	ldrb	r2, [r7, #3]
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	011b      	lsls	r3, r3, #4
 80015ec:	1a9b      	subs	r3, r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	333d      	adds	r3, #61	; 0x3d
 80015f4:	2201      	movs	r2, #1
 80015f6:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80015f8:	78fa      	ldrb	r2, [r7, #3]
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	011b      	lsls	r3, r3, #4
 8001600:	1a9b      	subs	r3, r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	333d      	adds	r3, #61	; 0x3d
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10a      	bne.n	8001624 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800160e:	78fa      	ldrb	r2, [r7, #3]
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	4613      	mov	r3, r2
 8001614:	011b      	lsls	r3, r3, #4
 8001616:	1a9b      	subs	r3, r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	440b      	add	r3, r1
 800161c:	332a      	adds	r3, #42	; 0x2a
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001622:	e0ce      	b.n	80017c2 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001624:	78fa      	ldrb	r2, [r7, #3]
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	4613      	mov	r3, r2
 800162a:	011b      	lsls	r3, r3, #4
 800162c:	1a9b      	subs	r3, r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	440b      	add	r3, r1
 8001632:	332a      	adds	r3, #42	; 0x2a
 8001634:	2202      	movs	r2, #2
 8001636:	701a      	strb	r2, [r3, #0]
      break;
 8001638:	e0c3      	b.n	80017c2 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800163a:	78fa      	ldrb	r2, [r7, #3]
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	4613      	mov	r3, r2
 8001640:	011b      	lsls	r3, r3, #4
 8001642:	1a9b      	subs	r3, r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	440b      	add	r3, r1
 8001648:	331a      	adds	r3, #26
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b01      	cmp	r3, #1
 800164e:	f040 80b8 	bne.w	80017c2 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001652:	78fa      	ldrb	r2, [r7, #3]
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	4613      	mov	r3, r2
 8001658:	011b      	lsls	r3, r3, #4
 800165a:	1a9b      	subs	r3, r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	440b      	add	r3, r1
 8001660:	333c      	adds	r3, #60	; 0x3c
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d10a      	bne.n	800167e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001668:	78fa      	ldrb	r2, [r7, #3]
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	4613      	mov	r3, r2
 800166e:	011b      	lsls	r3, r3, #4
 8001670:	1a9b      	subs	r3, r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	440b      	add	r3, r1
 8001676:	332a      	adds	r3, #42	; 0x2a
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
      break;
 800167c:	e0a1      	b.n	80017c2 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800167e:	78fa      	ldrb	r2, [r7, #3]
 8001680:	6879      	ldr	r1, [r7, #4]
 8001682:	4613      	mov	r3, r2
 8001684:	011b      	lsls	r3, r3, #4
 8001686:	1a9b      	subs	r3, r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	440b      	add	r3, r1
 800168c:	332a      	adds	r3, #42	; 0x2a
 800168e:	2202      	movs	r2, #2
 8001690:	701a      	strb	r2, [r3, #0]
      break;
 8001692:	e096      	b.n	80017c2 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001694:	78bb      	ldrb	r3, [r7, #2]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d120      	bne.n	80016dc <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800169a:	78fa      	ldrb	r2, [r7, #3]
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	1a9b      	subs	r3, r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	440b      	add	r3, r1
 80016a8:	333d      	adds	r3, #61	; 0x3d
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d10a      	bne.n	80016c6 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016b0:	78fa      	ldrb	r2, [r7, #3]
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	4613      	mov	r3, r2
 80016b6:	011b      	lsls	r3, r3, #4
 80016b8:	1a9b      	subs	r3, r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	332a      	adds	r3, #42	; 0x2a
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80016c4:	e07e      	b.n	80017c4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016c6:	78fa      	ldrb	r2, [r7, #3]
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	4613      	mov	r3, r2
 80016cc:	011b      	lsls	r3, r3, #4
 80016ce:	1a9b      	subs	r3, r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	440b      	add	r3, r1
 80016d4:	332a      	adds	r3, #42	; 0x2a
 80016d6:	2202      	movs	r2, #2
 80016d8:	701a      	strb	r2, [r3, #0]
      break;
 80016da:	e073      	b.n	80017c4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80016dc:	78fa      	ldrb	r2, [r7, #3]
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	4613      	mov	r3, r2
 80016e2:	011b      	lsls	r3, r3, #4
 80016e4:	1a9b      	subs	r3, r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	440b      	add	r3, r1
 80016ea:	333c      	adds	r3, #60	; 0x3c
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10a      	bne.n	8001708 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016f2:	78fa      	ldrb	r2, [r7, #3]
 80016f4:	6879      	ldr	r1, [r7, #4]
 80016f6:	4613      	mov	r3, r2
 80016f8:	011b      	lsls	r3, r3, #4
 80016fa:	1a9b      	subs	r3, r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	440b      	add	r3, r1
 8001700:	332a      	adds	r3, #42	; 0x2a
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]
      break;
 8001706:	e05d      	b.n	80017c4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001708:	78fa      	ldrb	r2, [r7, #3]
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	4613      	mov	r3, r2
 800170e:	011b      	lsls	r3, r3, #4
 8001710:	1a9b      	subs	r3, r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	440b      	add	r3, r1
 8001716:	332a      	adds	r3, #42	; 0x2a
 8001718:	2202      	movs	r2, #2
 800171a:	701a      	strb	r2, [r3, #0]
      break;
 800171c:	e052      	b.n	80017c4 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800171e:	78bb      	ldrb	r3, [r7, #2]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d120      	bne.n	8001766 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001724:	78fa      	ldrb	r2, [r7, #3]
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	4613      	mov	r3, r2
 800172a:	011b      	lsls	r3, r3, #4
 800172c:	1a9b      	subs	r3, r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	440b      	add	r3, r1
 8001732:	333d      	adds	r3, #61	; 0x3d
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10a      	bne.n	8001750 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800173a:	78fa      	ldrb	r2, [r7, #3]
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	011b      	lsls	r3, r3, #4
 8001742:	1a9b      	subs	r3, r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	440b      	add	r3, r1
 8001748:	332a      	adds	r3, #42	; 0x2a
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800174e:	e039      	b.n	80017c4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001750:	78fa      	ldrb	r2, [r7, #3]
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	4613      	mov	r3, r2
 8001756:	011b      	lsls	r3, r3, #4
 8001758:	1a9b      	subs	r3, r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	440b      	add	r3, r1
 800175e:	332a      	adds	r3, #42	; 0x2a
 8001760:	2202      	movs	r2, #2
 8001762:	701a      	strb	r2, [r3, #0]
      break;
 8001764:	e02e      	b.n	80017c4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001766:	78fa      	ldrb	r2, [r7, #3]
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	4613      	mov	r3, r2
 800176c:	011b      	lsls	r3, r3, #4
 800176e:	1a9b      	subs	r3, r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	440b      	add	r3, r1
 8001774:	333c      	adds	r3, #60	; 0x3c
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d10a      	bne.n	8001792 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800177c:	78fa      	ldrb	r2, [r7, #3]
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	011b      	lsls	r3, r3, #4
 8001784:	1a9b      	subs	r3, r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	440b      	add	r3, r1
 800178a:	332a      	adds	r3, #42	; 0x2a
 800178c:	2200      	movs	r2, #0
 800178e:	701a      	strb	r2, [r3, #0]
      break;
 8001790:	e018      	b.n	80017c4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001792:	78fa      	ldrb	r2, [r7, #3]
 8001794:	6879      	ldr	r1, [r7, #4]
 8001796:	4613      	mov	r3, r2
 8001798:	011b      	lsls	r3, r3, #4
 800179a:	1a9b      	subs	r3, r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	440b      	add	r3, r1
 80017a0:	332a      	adds	r3, #42	; 0x2a
 80017a2:	2202      	movs	r2, #2
 80017a4:	701a      	strb	r2, [r3, #0]
      break;
 80017a6:	e00d      	b.n	80017c4 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017a8:	78fa      	ldrb	r2, [r7, #3]
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	4613      	mov	r3, r2
 80017ae:	011b      	lsls	r3, r3, #4
 80017b0:	1a9b      	subs	r3, r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	440b      	add	r3, r1
 80017b6:	332a      	adds	r3, #42	; 0x2a
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
      break;
 80017bc:	e002      	b.n	80017c4 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80017be:	bf00      	nop
 80017c0:	e000      	b.n	80017c4 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80017c2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80017c4:	78fa      	ldrb	r2, [r7, #3]
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	4613      	mov	r3, r2
 80017ca:	011b      	lsls	r3, r3, #4
 80017cc:	1a9b      	subs	r3, r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	440b      	add	r3, r1
 80017d2:	332c      	adds	r3, #44	; 0x2c
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80017d8:	78fa      	ldrb	r2, [r7, #3]
 80017da:	8b39      	ldrh	r1, [r7, #24]
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	4613      	mov	r3, r2
 80017e0:	011b      	lsls	r3, r3, #4
 80017e2:	1a9b      	subs	r3, r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4403      	add	r3, r0
 80017e8:	3334      	adds	r3, #52	; 0x34
 80017ea:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80017ec:	78fa      	ldrb	r2, [r7, #3]
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	4613      	mov	r3, r2
 80017f2:	011b      	lsls	r3, r3, #4
 80017f4:	1a9b      	subs	r3, r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	440b      	add	r3, r1
 80017fa:	334c      	adds	r3, #76	; 0x4c
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001800:	78fa      	ldrb	r2, [r7, #3]
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	4613      	mov	r3, r2
 8001806:	011b      	lsls	r3, r3, #4
 8001808:	1a9b      	subs	r3, r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	440b      	add	r3, r1
 800180e:	3338      	adds	r3, #56	; 0x38
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001814:	78fa      	ldrb	r2, [r7, #3]
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	011b      	lsls	r3, r3, #4
 800181c:	1a9b      	subs	r3, r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	440b      	add	r3, r1
 8001822:	3315      	adds	r3, #21
 8001824:	78fa      	ldrb	r2, [r7, #3]
 8001826:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001828:	78fa      	ldrb	r2, [r7, #3]
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	011b      	lsls	r3, r3, #4
 8001830:	1a9b      	subs	r3, r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	334d      	adds	r3, #77	; 0x4d
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6818      	ldr	r0, [r3, #0]
 8001840:	78fa      	ldrb	r2, [r7, #3]
 8001842:	4613      	mov	r3, r2
 8001844:	011b      	lsls	r3, r3, #4
 8001846:	1a9b      	subs	r3, r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	3310      	adds	r3, #16
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	4413      	add	r3, r2
 8001850:	1d19      	adds	r1, r3, #4
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	799b      	ldrb	r3, [r3, #6]
 8001856:	461a      	mov	r2, r3
 8001858:	f004 f804 	bl	8005864 <USB_HC_StartXfer>
 800185c:	4603      	mov	r3, r0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop

08001868 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f003 fcf2 	bl	8005268 <USB_GetMode>
 8001884:	4603      	mov	r3, r0
 8001886:	2b01      	cmp	r3, #1
 8001888:	f040 80fb 	bne.w	8001a82 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f003 fcb5 	bl	8005200 <USB_ReadInterrupts>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 80f1 	beq.w	8001a80 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f003 fcac 	bl	8005200 <USB_ReadInterrupts>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018b2:	d104      	bne.n	80018be <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80018bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f003 fc9c 	bl	8005200 <USB_ReadInterrupts>
 80018c8:	4603      	mov	r3, r0
 80018ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018d2:	d104      	bne.n	80018de <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f003 fc8c 	bl	8005200 <USB_ReadInterrupts>
 80018e8:	4603      	mov	r3, r0
 80018ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80018f2:	d104      	bne.n	80018fe <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80018fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f003 fc7c 	bl	8005200 <USB_ReadInterrupts>
 8001908:	4603      	mov	r3, r0
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b02      	cmp	r3, #2
 8001910:	d103      	bne.n	800191a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2202      	movs	r2, #2
 8001918:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f003 fc6e 	bl	8005200 <USB_ReadInterrupts>
 8001924:	4603      	mov	r3, r0
 8001926:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800192a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800192e:	d120      	bne.n	8001972 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001938:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b00      	cmp	r3, #0
 8001948:	d113      	bne.n	8001972 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800194a:	2110      	movs	r1, #16
 800194c:	6938      	ldr	r0, [r7, #16]
 800194e:	f003 fb61 	bl	8005014 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001952:	6938      	ldr	r0, [r7, #16]
 8001954:	f003 fb90 	bl	8005078 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	7a5b      	ldrb	r3, [r3, #9]
 800195c:	2b02      	cmp	r3, #2
 800195e:	d105      	bne.n	800196c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2101      	movs	r1, #1
 8001966:	4618      	mov	r0, r3
 8001968:	f003 fd88 	bl	800547c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f007 fd17 	bl	80093a0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f003 fc42 	bl	8005200 <USB_ReadInterrupts>
 800197c:	4603      	mov	r3, r0
 800197e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001982:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001986:	d102      	bne.n	800198e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f001 fd4d 	bl	8003428 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f003 fc34 	bl	8005200 <USB_ReadInterrupts>
 8001998:	4603      	mov	r3, r0
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d106      	bne.n	80019b0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f007 fce0 	bl	8009368 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2208      	movs	r2, #8
 80019ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f003 fc23 	bl	8005200 <USB_ReadInterrupts>
 80019ba:	4603      	mov	r3, r0
 80019bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019c4:	d139      	bne.n	8001a3a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f004 f9c4 	bl	8005d58 <USB_HC_ReadInterrupt>
 80019d0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
 80019d6:	e025      	b.n	8001a24 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	fa22 f303 	lsr.w	r3, r2, r3
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d018      	beq.n	8001a1e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	015a      	lsls	r2, r3, #5
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4413      	add	r3, r2
 80019f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a02:	d106      	bne.n	8001a12 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	4619      	mov	r1, r3
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 f905 	bl	8001c1a <HCD_HC_IN_IRQHandler>
 8001a10:	e005      	b.n	8001a1e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	4619      	mov	r1, r3
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 ff67 	bl	80028ec <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	3301      	adds	r3, #1
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	795b      	ldrb	r3, [r3, #5]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d3d3      	bcc.n	80019d8 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f003 fbde 	bl	8005200 <USB_ReadInterrupts>
 8001a44:	4603      	mov	r3, r0
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	2b10      	cmp	r3, #16
 8001a4c:	d101      	bne.n	8001a52 <HAL_HCD_IRQHandler+0x1ea>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <HAL_HCD_IRQHandler+0x1ec>
 8001a52:	2300      	movs	r3, #0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d014      	beq.n	8001a82 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	699a      	ldr	r2, [r3, #24]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f022 0210 	bic.w	r2, r2, #16
 8001a66:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f001 fbfe 	bl	800326a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	699a      	ldr	r2, [r3, #24]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f042 0210 	orr.w	r2, r2, #16
 8001a7c:	619a      	str	r2, [r3, #24]
 8001a7e:	e000      	b.n	8001a82 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001a80:	bf00      	nop
    }
  }
}
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d101      	bne.n	8001a9e <HAL_HCD_Start+0x16>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e013      	b.n	8001ac6 <HAL_HCD_Start+0x3e>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2101      	movs	r1, #1
 8001aac:	4618      	mov	r0, r3
 8001aae:	f003 fd4c 	bl	800554a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f003 fa3e 	bl	8004f38 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d101      	bne.n	8001ae4 <HAL_HCD_Stop+0x16>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	e00d      	b.n	8001b00 <HAL_HCD_Stop+0x32>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f004 fa9f 	bl	8006034 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f003 fcee 	bl	80054f6 <USB_ResetPort>
 8001b1a:	4603      	mov	r3, r0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001b30:	78fa      	ldrb	r2, [r7, #3]
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	4613      	mov	r3, r2
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	1a9b      	subs	r3, r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	334c      	adds	r3, #76	; 0x4c
 8001b40:	781b      	ldrb	r3, [r3, #0]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	460b      	mov	r3, r1
 8001b58:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001b5a:	78fa      	ldrb	r2, [r7, #3]
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	011b      	lsls	r3, r3, #4
 8001b62:	1a9b      	subs	r3, r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	440b      	add	r3, r1
 8001b68:	3338      	adds	r3, #56	; 0x38
 8001b6a:	681b      	ldr	r3, [r3, #0]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f003 fd30 	bl	80055ea <USB_GetCurrentFrame>
 8001b8a:	4603      	mov	r3, r0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f003 fd0b 	bl	80055bc <USB_GetHostSpeed>
 8001ba6:	4603      	mov	r3, r0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001bbc:	78fa      	ldrb	r2, [r7, #3]
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	011b      	lsls	r3, r3, #4
 8001bc4:	1a9b      	subs	r3, r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	440b      	add	r3, r1
 8001bca:	331a      	adds	r3, #26
 8001bcc:	2200      	movs	r2, #0
 8001bce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001bd0:	78fa      	ldrb	r2, [r7, #3]
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	011b      	lsls	r3, r3, #4
 8001bd8:	1a9b      	subs	r3, r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	440b      	add	r3, r1
 8001bde:	331b      	adds	r3, #27
 8001be0:	2200      	movs	r2, #0
 8001be2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001be4:	78fa      	ldrb	r2, [r7, #3]
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	4613      	mov	r3, r2
 8001bea:	011b      	lsls	r3, r3, #4
 8001bec:	1a9b      	subs	r3, r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	3325      	adds	r3, #37	; 0x25
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001bf8:	78fa      	ldrb	r2, [r7, #3]
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	011b      	lsls	r3, r3, #4
 8001c00:	1a9b      	subs	r3, r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	440b      	add	r3, r1
 8001c06:	3324      	adds	r3, #36	; 0x24
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b086      	sub	sp, #24
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
 8001c22:	460b      	mov	r3, r1
 8001c24:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	78fa      	ldrb	r2, [r7, #3]
 8001c36:	4611      	mov	r1, r2
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f003 faf4 	bl	8005226 <USB_ReadChInterrupts>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d11a      	bne.n	8001c7e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001c48:	78fb      	ldrb	r3, [r7, #3]
 8001c4a:	015a      	lsls	r2, r3, #5
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	4413      	add	r3, r2
 8001c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c54:	461a      	mov	r2, r3
 8001c56:	2304      	movs	r3, #4
 8001c58:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001c5a:	78fa      	ldrb	r2, [r7, #3]
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	011b      	lsls	r3, r3, #4
 8001c62:	1a9b      	subs	r3, r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	440b      	add	r3, r1
 8001c68:	334d      	adds	r3, #77	; 0x4d
 8001c6a:	2207      	movs	r2, #7
 8001c6c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	78fa      	ldrb	r2, [r7, #3]
 8001c74:	4611      	mov	r1, r2
 8001c76:	4618      	mov	r0, r3
 8001c78:	f004 f87f 	bl	8005d7a <USB_HC_Halt>
 8001c7c:	e09e      	b.n	8001dbc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	78fa      	ldrb	r2, [r7, #3]
 8001c84:	4611      	mov	r1, r2
 8001c86:	4618      	mov	r0, r3
 8001c88:	f003 facd 	bl	8005226 <USB_ReadChInterrupts>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c96:	d11b      	bne.n	8001cd0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001c98:	78fb      	ldrb	r3, [r7, #3]
 8001c9a:	015a      	lsls	r2, r3, #5
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001caa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001cac:	78fa      	ldrb	r2, [r7, #3]
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	011b      	lsls	r3, r3, #4
 8001cb4:	1a9b      	subs	r3, r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	334d      	adds	r3, #77	; 0x4d
 8001cbc:	2208      	movs	r2, #8
 8001cbe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	78fa      	ldrb	r2, [r7, #3]
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f004 f856 	bl	8005d7a <USB_HC_Halt>
 8001cce:	e075      	b.n	8001dbc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	78fa      	ldrb	r2, [r7, #3]
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f003 faa4 	bl	8005226 <USB_ReadChInterrupts>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	f003 0308 	and.w	r3, r3, #8
 8001ce4:	2b08      	cmp	r3, #8
 8001ce6:	d11a      	bne.n	8001d1e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001ce8:	78fb      	ldrb	r3, [r7, #3]
 8001cea:	015a      	lsls	r2, r3, #5
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4413      	add	r3, r2
 8001cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	2308      	movs	r3, #8
 8001cf8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001cfa:	78fa      	ldrb	r2, [r7, #3]
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	011b      	lsls	r3, r3, #4
 8001d02:	1a9b      	subs	r3, r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	440b      	add	r3, r1
 8001d08:	334d      	adds	r3, #77	; 0x4d
 8001d0a:	2206      	movs	r2, #6
 8001d0c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	78fa      	ldrb	r2, [r7, #3]
 8001d14:	4611      	mov	r1, r2
 8001d16:	4618      	mov	r0, r3
 8001d18:	f004 f82f 	bl	8005d7a <USB_HC_Halt>
 8001d1c:	e04e      	b.n	8001dbc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	78fa      	ldrb	r2, [r7, #3]
 8001d24:	4611      	mov	r1, r2
 8001d26:	4618      	mov	r0, r3
 8001d28:	f003 fa7d 	bl	8005226 <USB_ReadChInterrupts>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d36:	d11b      	bne.n	8001d70 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001d38:	78fb      	ldrb	r3, [r7, #3]
 8001d3a:	015a      	lsls	r2, r3, #5
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4413      	add	r3, r2
 8001d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d44:	461a      	mov	r2, r3
 8001d46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001d4c:	78fa      	ldrb	r2, [r7, #3]
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	4613      	mov	r3, r2
 8001d52:	011b      	lsls	r3, r3, #4
 8001d54:	1a9b      	subs	r3, r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	440b      	add	r3, r1
 8001d5a:	334d      	adds	r3, #77	; 0x4d
 8001d5c:	2209      	movs	r2, #9
 8001d5e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	78fa      	ldrb	r2, [r7, #3]
 8001d66:	4611      	mov	r1, r2
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f004 f806 	bl	8005d7a <USB_HC_Halt>
 8001d6e:	e025      	b.n	8001dbc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	78fa      	ldrb	r2, [r7, #3]
 8001d76:	4611      	mov	r1, r2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f003 fa54 	bl	8005226 <USB_ReadChInterrupts>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d84:	2b80      	cmp	r3, #128	; 0x80
 8001d86:	d119      	bne.n	8001dbc <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001d88:	78fb      	ldrb	r3, [r7, #3]
 8001d8a:	015a      	lsls	r2, r3, #5
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4413      	add	r3, r2
 8001d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d94:	461a      	mov	r2, r3
 8001d96:	2380      	movs	r3, #128	; 0x80
 8001d98:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001d9a:	78fa      	ldrb	r2, [r7, #3]
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	011b      	lsls	r3, r3, #4
 8001da2:	1a9b      	subs	r3, r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	440b      	add	r3, r1
 8001da8:	334d      	adds	r3, #77	; 0x4d
 8001daa:	2207      	movs	r2, #7
 8001dac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	78fa      	ldrb	r2, [r7, #3]
 8001db4:	4611      	mov	r1, r2
 8001db6:	4618      	mov	r0, r3
 8001db8:	f003 ffdf 	bl	8005d7a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	78fa      	ldrb	r2, [r7, #3]
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f003 fa2e 	bl	8005226 <USB_ReadChInterrupts>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dd4:	d112      	bne.n	8001dfc <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	78fa      	ldrb	r2, [r7, #3]
 8001ddc:	4611      	mov	r1, r2
 8001dde:	4618      	mov	r0, r3
 8001de0:	f003 ffcb 	bl	8005d7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001de4:	78fb      	ldrb	r3, [r7, #3]
 8001de6:	015a      	lsls	r2, r3, #5
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	4413      	add	r3, r2
 8001dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df0:	461a      	mov	r2, r3
 8001df2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001df6:	6093      	str	r3, [r2, #8]
 8001df8:	f000 bd75 	b.w	80028e6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	78fa      	ldrb	r2, [r7, #3]
 8001e02:	4611      	mov	r1, r2
 8001e04:	4618      	mov	r0, r3
 8001e06:	f003 fa0e 	bl	8005226 <USB_ReadChInterrupts>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	f040 8128 	bne.w	8002066 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001e16:	78fb      	ldrb	r3, [r7, #3]
 8001e18:	015a      	lsls	r2, r3, #5
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e22:	461a      	mov	r2, r3
 8001e24:	2320      	movs	r3, #32
 8001e26:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001e28:	78fa      	ldrb	r2, [r7, #3]
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	011b      	lsls	r3, r3, #4
 8001e30:	1a9b      	subs	r3, r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	331b      	adds	r3, #27
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d119      	bne.n	8001e72 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001e3e:	78fa      	ldrb	r2, [r7, #3]
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	4613      	mov	r3, r2
 8001e44:	011b      	lsls	r3, r3, #4
 8001e46:	1a9b      	subs	r3, r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	440b      	add	r3, r1
 8001e4c:	331b      	adds	r3, #27
 8001e4e:	2200      	movs	r2, #0
 8001e50:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001e52:	78fb      	ldrb	r3, [r7, #3]
 8001e54:	015a      	lsls	r2, r3, #5
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4413      	add	r3, r2
 8001e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	78fa      	ldrb	r2, [r7, #3]
 8001e62:	0151      	lsls	r1, r2, #5
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	440a      	add	r2, r1
 8001e68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e70:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	799b      	ldrb	r3, [r3, #6]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d01b      	beq.n	8001eb2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001e7a:	78fa      	ldrb	r2, [r7, #3]
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	1a9b      	subs	r3, r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	440b      	add	r3, r1
 8001e88:	3330      	adds	r3, #48	; 0x30
 8001e8a:	6819      	ldr	r1, [r3, #0]
 8001e8c:	78fb      	ldrb	r3, [r7, #3]
 8001e8e:	015a      	lsls	r2, r3, #5
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4413      	add	r3, r2
 8001e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e9e:	78fa      	ldrb	r2, [r7, #3]
 8001ea0:	1ac9      	subs	r1, r1, r3
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	011b      	lsls	r3, r3, #4
 8001ea8:	1a9b      	subs	r3, r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4403      	add	r3, r0
 8001eae:	3338      	adds	r3, #56	; 0x38
 8001eb0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001eb2:	78fa      	ldrb	r2, [r7, #3]
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	011b      	lsls	r3, r3, #4
 8001eba:	1a9b      	subs	r3, r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	440b      	add	r3, r1
 8001ec0:	334d      	adds	r3, #77	; 0x4d
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001ec6:	78fa      	ldrb	r2, [r7, #3]
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	011b      	lsls	r3, r3, #4
 8001ece:	1a9b      	subs	r3, r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	440b      	add	r3, r1
 8001ed4:	3344      	adds	r3, #68	; 0x44
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001eda:	78fb      	ldrb	r3, [r7, #3]
 8001edc:	015a      	lsls	r2, r3, #5
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	2301      	movs	r3, #1
 8001eea:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001eec:	78fa      	ldrb	r2, [r7, #3]
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	011b      	lsls	r3, r3, #4
 8001ef4:	1a9b      	subs	r3, r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	3326      	adds	r3, #38	; 0x26
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00a      	beq.n	8001f18 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001f02:	78fa      	ldrb	r2, [r7, #3]
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	011b      	lsls	r3, r3, #4
 8001f0a:	1a9b      	subs	r3, r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	440b      	add	r3, r1
 8001f10:	3326      	adds	r3, #38	; 0x26
 8001f12:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d110      	bne.n	8001f3a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	78fa      	ldrb	r2, [r7, #3]
 8001f1e:	4611      	mov	r1, r2
 8001f20:	4618      	mov	r0, r3
 8001f22:	f003 ff2a 	bl	8005d7a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001f26:	78fb      	ldrb	r3, [r7, #3]
 8001f28:	015a      	lsls	r2, r3, #5
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f32:	461a      	mov	r2, r3
 8001f34:	2310      	movs	r3, #16
 8001f36:	6093      	str	r3, [r2, #8]
 8001f38:	e03d      	b.n	8001fb6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001f3a:	78fa      	ldrb	r2, [r7, #3]
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	011b      	lsls	r3, r3, #4
 8001f42:	1a9b      	subs	r3, r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	440b      	add	r3, r1
 8001f48:	3326      	adds	r3, #38	; 0x26
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b03      	cmp	r3, #3
 8001f4e:	d00a      	beq.n	8001f66 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8001f50:	78fa      	ldrb	r2, [r7, #3]
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	011b      	lsls	r3, r3, #4
 8001f58:	1a9b      	subs	r3, r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	3326      	adds	r3, #38	; 0x26
 8001f60:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d127      	bne.n	8001fb6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f66:	78fb      	ldrb	r3, [r7, #3]
 8001f68:	015a      	lsls	r2, r3, #5
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	78fa      	ldrb	r2, [r7, #3]
 8001f76:	0151      	lsls	r1, r2, #5
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	440a      	add	r2, r1
 8001f7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f84:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001f86:	78fa      	ldrb	r2, [r7, #3]
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	011b      	lsls	r3, r3, #4
 8001f8e:	1a9b      	subs	r3, r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	440b      	add	r3, r1
 8001f94:	334c      	adds	r3, #76	; 0x4c
 8001f96:	2201      	movs	r2, #1
 8001f98:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001f9a:	78fa      	ldrb	r2, [r7, #3]
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	1a9b      	subs	r3, r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	334c      	adds	r3, #76	; 0x4c
 8001faa:	781a      	ldrb	r2, [r3, #0]
 8001fac:	78fb      	ldrb	r3, [r7, #3]
 8001fae:	4619      	mov	r1, r3
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f007 fa03 	bl	80093bc <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	799b      	ldrb	r3, [r3, #6]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d13b      	bne.n	8002036 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8001fbe:	78fa      	ldrb	r2, [r7, #3]
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	011b      	lsls	r3, r3, #4
 8001fc6:	1a9b      	subs	r3, r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	440b      	add	r3, r1
 8001fcc:	3338      	adds	r3, #56	; 0x38
 8001fce:	6819      	ldr	r1, [r3, #0]
 8001fd0:	78fa      	ldrb	r2, [r7, #3]
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	011b      	lsls	r3, r3, #4
 8001fd8:	1a9b      	subs	r3, r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4403      	add	r3, r0
 8001fde:	3328      	adds	r3, #40	; 0x28
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	440b      	add	r3, r1
 8001fe4:	1e59      	subs	r1, r3, #1
 8001fe6:	78fa      	ldrb	r2, [r7, #3]
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	011b      	lsls	r3, r3, #4
 8001fee:	1a9b      	subs	r3, r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4403      	add	r3, r0
 8001ff4:	3328      	adds	r3, #40	; 0x28
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 8470 	beq.w	80028e6 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002006:	78fa      	ldrb	r2, [r7, #3]
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	1a9b      	subs	r3, r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	440b      	add	r3, r1
 8002014:	333c      	adds	r3, #60	; 0x3c
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	78fa      	ldrb	r2, [r7, #3]
 800201a:	f083 0301 	eor.w	r3, r3, #1
 800201e:	b2d8      	uxtb	r0, r3
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	011b      	lsls	r3, r3, #4
 8002026:	1a9b      	subs	r3, r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	440b      	add	r3, r1
 800202c:	333c      	adds	r3, #60	; 0x3c
 800202e:	4602      	mov	r2, r0
 8002030:	701a      	strb	r2, [r3, #0]
 8002032:	f000 bc58 	b.w	80028e6 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002036:	78fa      	ldrb	r2, [r7, #3]
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	011b      	lsls	r3, r3, #4
 800203e:	1a9b      	subs	r3, r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	440b      	add	r3, r1
 8002044:	333c      	adds	r3, #60	; 0x3c
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	78fa      	ldrb	r2, [r7, #3]
 800204a:	f083 0301 	eor.w	r3, r3, #1
 800204e:	b2d8      	uxtb	r0, r3
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	011b      	lsls	r3, r3, #4
 8002056:	1a9b      	subs	r3, r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	333c      	adds	r3, #60	; 0x3c
 800205e:	4602      	mov	r2, r0
 8002060:	701a      	strb	r2, [r3, #0]
 8002062:	f000 bc40 	b.w	80028e6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	78fa      	ldrb	r2, [r7, #3]
 800206c:	4611      	mov	r1, r2
 800206e:	4618      	mov	r0, r3
 8002070:	f003 f8d9 	bl	8005226 <USB_ReadChInterrupts>
 8002074:	4603      	mov	r3, r0
 8002076:	f003 0320 	and.w	r3, r3, #32
 800207a:	2b20      	cmp	r3, #32
 800207c:	d131      	bne.n	80020e2 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800207e:	78fb      	ldrb	r3, [r7, #3]
 8002080:	015a      	lsls	r2, r3, #5
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4413      	add	r3, r2
 8002086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800208a:	461a      	mov	r2, r3
 800208c:	2320      	movs	r3, #32
 800208e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002090:	78fa      	ldrb	r2, [r7, #3]
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	011b      	lsls	r3, r3, #4
 8002098:	1a9b      	subs	r3, r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	440b      	add	r3, r1
 800209e:	331a      	adds	r3, #26
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	f040 841f 	bne.w	80028e6 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80020a8:	78fa      	ldrb	r2, [r7, #3]
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	4613      	mov	r3, r2
 80020ae:	011b      	lsls	r3, r3, #4
 80020b0:	1a9b      	subs	r3, r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	331b      	adds	r3, #27
 80020b8:	2201      	movs	r2, #1
 80020ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80020bc:	78fa      	ldrb	r2, [r7, #3]
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	011b      	lsls	r3, r3, #4
 80020c4:	1a9b      	subs	r3, r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	334d      	adds	r3, #77	; 0x4d
 80020cc:	2203      	movs	r2, #3
 80020ce:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	78fa      	ldrb	r2, [r7, #3]
 80020d6:	4611      	mov	r1, r2
 80020d8:	4618      	mov	r0, r3
 80020da:	f003 fe4e 	bl	8005d7a <USB_HC_Halt>
 80020de:	f000 bc02 	b.w	80028e6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	78fa      	ldrb	r2, [r7, #3]
 80020e8:	4611      	mov	r1, r2
 80020ea:	4618      	mov	r0, r3
 80020ec:	f003 f89b 	bl	8005226 <USB_ReadChInterrupts>
 80020f0:	4603      	mov	r3, r0
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	f040 8305 	bne.w	8002706 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	015a      	lsls	r2, r3, #5
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4413      	add	r3, r2
 8002104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002108:	461a      	mov	r2, r3
 800210a:	2302      	movs	r3, #2
 800210c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800210e:	78fa      	ldrb	r2, [r7, #3]
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	1a9b      	subs	r3, r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	334d      	adds	r3, #77	; 0x4d
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d114      	bne.n	800214e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002124:	78fa      	ldrb	r2, [r7, #3]
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	4613      	mov	r3, r2
 800212a:	011b      	lsls	r3, r3, #4
 800212c:	1a9b      	subs	r3, r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	334d      	adds	r3, #77	; 0x4d
 8002134:	2202      	movs	r2, #2
 8002136:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002138:	78fa      	ldrb	r2, [r7, #3]
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	1a9b      	subs	r3, r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	334c      	adds	r3, #76	; 0x4c
 8002148:	2201      	movs	r2, #1
 800214a:	701a      	strb	r2, [r3, #0]
 800214c:	e2cc      	b.n	80026e8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800214e:	78fa      	ldrb	r2, [r7, #3]
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	4613      	mov	r3, r2
 8002154:	011b      	lsls	r3, r3, #4
 8002156:	1a9b      	subs	r3, r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	440b      	add	r3, r1
 800215c:	334d      	adds	r3, #77	; 0x4d
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b06      	cmp	r3, #6
 8002162:	d114      	bne.n	800218e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002164:	78fa      	ldrb	r2, [r7, #3]
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	011b      	lsls	r3, r3, #4
 800216c:	1a9b      	subs	r3, r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	334d      	adds	r3, #77	; 0x4d
 8002174:	2202      	movs	r2, #2
 8002176:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002178:	78fa      	ldrb	r2, [r7, #3]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	1a9b      	subs	r3, r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	334c      	adds	r3, #76	; 0x4c
 8002188:	2205      	movs	r2, #5
 800218a:	701a      	strb	r2, [r3, #0]
 800218c:	e2ac      	b.n	80026e8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800218e:	78fa      	ldrb	r2, [r7, #3]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	011b      	lsls	r3, r3, #4
 8002196:	1a9b      	subs	r3, r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	440b      	add	r3, r1
 800219c:	334d      	adds	r3, #77	; 0x4d
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b07      	cmp	r3, #7
 80021a2:	d00b      	beq.n	80021bc <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80021a4:	78fa      	ldrb	r2, [r7, #3]
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	011b      	lsls	r3, r3, #4
 80021ac:	1a9b      	subs	r3, r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	334d      	adds	r3, #77	; 0x4d
 80021b4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80021b6:	2b09      	cmp	r3, #9
 80021b8:	f040 80a6 	bne.w	8002308 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80021bc:	78fa      	ldrb	r2, [r7, #3]
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	011b      	lsls	r3, r3, #4
 80021c4:	1a9b      	subs	r3, r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	440b      	add	r3, r1
 80021ca:	334d      	adds	r3, #77	; 0x4d
 80021cc:	2202      	movs	r2, #2
 80021ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80021d0:	78fa      	ldrb	r2, [r7, #3]
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	4613      	mov	r3, r2
 80021d6:	011b      	lsls	r3, r3, #4
 80021d8:	1a9b      	subs	r3, r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	3344      	adds	r3, #68	; 0x44
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	1c59      	adds	r1, r3, #1
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4403      	add	r3, r0
 80021f0:	3344      	adds	r3, #68	; 0x44
 80021f2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80021f4:	78fa      	ldrb	r2, [r7, #3]
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	011b      	lsls	r3, r3, #4
 80021fc:	1a9b      	subs	r3, r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	3344      	adds	r3, #68	; 0x44
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2b02      	cmp	r3, #2
 8002208:	d943      	bls.n	8002292 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800220a:	78fa      	ldrb	r2, [r7, #3]
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	4613      	mov	r3, r2
 8002210:	011b      	lsls	r3, r3, #4
 8002212:	1a9b      	subs	r3, r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	440b      	add	r3, r1
 8002218:	3344      	adds	r3, #68	; 0x44
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800221e:	78fa      	ldrb	r2, [r7, #3]
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	1a9b      	subs	r3, r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	440b      	add	r3, r1
 800222c:	331a      	adds	r3, #26
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d123      	bne.n	800227c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002234:	78fa      	ldrb	r2, [r7, #3]
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	011b      	lsls	r3, r3, #4
 800223c:	1a9b      	subs	r3, r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	440b      	add	r3, r1
 8002242:	331b      	adds	r3, #27
 8002244:	2200      	movs	r2, #0
 8002246:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002248:	78fa      	ldrb	r2, [r7, #3]
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	011b      	lsls	r3, r3, #4
 8002250:	1a9b      	subs	r3, r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	331c      	adds	r3, #28
 8002258:	2200      	movs	r2, #0
 800225a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	015a      	lsls	r2, r3, #5
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4413      	add	r3, r2
 8002264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	78fa      	ldrb	r2, [r7, #3]
 800226c:	0151      	lsls	r1, r2, #5
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	440a      	add	r2, r1
 8002272:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800227a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800227c:	78fa      	ldrb	r2, [r7, #3]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	1a9b      	subs	r3, r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	334c      	adds	r3, #76	; 0x4c
 800228c:	2204      	movs	r2, #4
 800228e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002290:	e229      	b.n	80026e6 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002292:	78fa      	ldrb	r2, [r7, #3]
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	4613      	mov	r3, r2
 8002298:	011b      	lsls	r3, r3, #4
 800229a:	1a9b      	subs	r3, r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	440b      	add	r3, r1
 80022a0:	334c      	adds	r3, #76	; 0x4c
 80022a2:	2202      	movs	r2, #2
 80022a4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80022a6:	78fa      	ldrb	r2, [r7, #3]
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	4613      	mov	r3, r2
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	1a9b      	subs	r3, r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	440b      	add	r3, r1
 80022b4:	3326      	adds	r3, #38	; 0x26
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00b      	beq.n	80022d4 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80022bc:	78fa      	ldrb	r2, [r7, #3]
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	1a9b      	subs	r3, r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	3326      	adds	r3, #38	; 0x26
 80022cc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	f040 8209 	bne.w	80026e6 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80022d4:	78fb      	ldrb	r3, [r7, #3]
 80022d6:	015a      	lsls	r2, r3, #5
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4413      	add	r3, r2
 80022dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022ea:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022f2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80022f4:	78fb      	ldrb	r3, [r7, #3]
 80022f6:	015a      	lsls	r2, r3, #5
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	4413      	add	r3, r2
 80022fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002300:	461a      	mov	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002306:	e1ee      	b.n	80026e6 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002308:	78fa      	ldrb	r2, [r7, #3]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	1a9b      	subs	r3, r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	334d      	adds	r3, #77	; 0x4d
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b05      	cmp	r3, #5
 800231c:	f040 80c8 	bne.w	80024b0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002320:	78fa      	ldrb	r2, [r7, #3]
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	1a9b      	subs	r3, r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	334d      	adds	r3, #77	; 0x4d
 8002330:	2202      	movs	r2, #2
 8002332:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002334:	78fa      	ldrb	r2, [r7, #3]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	1a9b      	subs	r3, r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	331b      	adds	r3, #27
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	2b01      	cmp	r3, #1
 8002348:	f040 81ce 	bne.w	80026e8 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800234c:	78fa      	ldrb	r2, [r7, #3]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	1a9b      	subs	r3, r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	3326      	adds	r3, #38	; 0x26
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b03      	cmp	r3, #3
 8002360:	d16b      	bne.n	800243a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002362:	78fa      	ldrb	r2, [r7, #3]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	1a9b      	subs	r3, r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	3348      	adds	r3, #72	; 0x48
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	1c59      	adds	r1, r3, #1
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	1a9b      	subs	r3, r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4403      	add	r3, r0
 8002382:	3348      	adds	r3, #72	; 0x48
 8002384:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002386:	78fa      	ldrb	r2, [r7, #3]
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	011b      	lsls	r3, r3, #4
 800238e:	1a9b      	subs	r3, r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	440b      	add	r3, r1
 8002394:	3348      	adds	r3, #72	; 0x48
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b02      	cmp	r3, #2
 800239a:	d943      	bls.n	8002424 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800239c:	78fa      	ldrb	r2, [r7, #3]
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	1a9b      	subs	r3, r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	3348      	adds	r3, #72	; 0x48
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80023b0:	78fa      	ldrb	r2, [r7, #3]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	1a9b      	subs	r3, r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	331b      	adds	r3, #27
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80023c4:	78fa      	ldrb	r2, [r7, #3]
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	1a9b      	subs	r3, r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	3344      	adds	r3, #68	; 0x44
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d809      	bhi.n	80023ee <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80023da:	78fa      	ldrb	r2, [r7, #3]
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	4613      	mov	r3, r2
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	1a9b      	subs	r3, r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	440b      	add	r3, r1
 80023e8:	331c      	adds	r3, #28
 80023ea:	2201      	movs	r2, #1
 80023ec:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80023ee:	78fb      	ldrb	r3, [r7, #3]
 80023f0:	015a      	lsls	r2, r3, #5
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4413      	add	r3, r2
 80023f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	78fa      	ldrb	r2, [r7, #3]
 80023fe:	0151      	lsls	r1, r2, #5
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	440a      	add	r2, r1
 8002404:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800240c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800240e:	78fa      	ldrb	r2, [r7, #3]
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	4613      	mov	r3, r2
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	1a9b      	subs	r3, r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	440b      	add	r3, r1
 800241c:	334c      	adds	r3, #76	; 0x4c
 800241e:	2204      	movs	r2, #4
 8002420:	701a      	strb	r2, [r3, #0]
 8002422:	e014      	b.n	800244e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002424:	78fa      	ldrb	r2, [r7, #3]
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	011b      	lsls	r3, r3, #4
 800242c:	1a9b      	subs	r3, r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	334c      	adds	r3, #76	; 0x4c
 8002434:	2202      	movs	r2, #2
 8002436:	701a      	strb	r2, [r3, #0]
 8002438:	e009      	b.n	800244e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800243a:	78fa      	ldrb	r2, [r7, #3]
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	1a9b      	subs	r3, r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	440b      	add	r3, r1
 8002448:	334c      	adds	r3, #76	; 0x4c
 800244a:	2202      	movs	r2, #2
 800244c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800244e:	78fa      	ldrb	r2, [r7, #3]
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	4613      	mov	r3, r2
 8002454:	011b      	lsls	r3, r3, #4
 8002456:	1a9b      	subs	r3, r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	440b      	add	r3, r1
 800245c:	3326      	adds	r3, #38	; 0x26
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00b      	beq.n	800247c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002464:	78fa      	ldrb	r2, [r7, #3]
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	1a9b      	subs	r3, r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	3326      	adds	r3, #38	; 0x26
 8002474:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002476:	2b02      	cmp	r3, #2
 8002478:	f040 8136 	bne.w	80026e8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800247c:	78fb      	ldrb	r3, [r7, #3]
 800247e:	015a      	lsls	r2, r3, #5
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	4413      	add	r3, r2
 8002484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002492:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800249a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800249c:	78fb      	ldrb	r3, [r7, #3]
 800249e:	015a      	lsls	r2, r3, #5
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	4413      	add	r3, r2
 80024a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a8:	461a      	mov	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	e11b      	b.n	80026e8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80024b0:	78fa      	ldrb	r2, [r7, #3]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	1a9b      	subs	r3, r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	334d      	adds	r3, #77	; 0x4d
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	f040 8081 	bne.w	80025ca <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80024c8:	78fa      	ldrb	r2, [r7, #3]
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	011b      	lsls	r3, r3, #4
 80024d0:	1a9b      	subs	r3, r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	334d      	adds	r3, #77	; 0x4d
 80024d8:	2202      	movs	r2, #2
 80024da:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80024dc:	78fa      	ldrb	r2, [r7, #3]
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	011b      	lsls	r3, r3, #4
 80024e4:	1a9b      	subs	r3, r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	331b      	adds	r3, #27
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	f040 80fa 	bne.w	80026e8 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024f4:	78fa      	ldrb	r2, [r7, #3]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	334c      	adds	r3, #76	; 0x4c
 8002504:	2202      	movs	r2, #2
 8002506:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002508:	78fb      	ldrb	r3, [r7, #3]
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4413      	add	r3, r2
 8002510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	78fa      	ldrb	r2, [r7, #3]
 8002518:	0151      	lsls	r1, r2, #5
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	440a      	add	r2, r1
 800251e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002526:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002528:	78fb      	ldrb	r3, [r7, #3]
 800252a:	015a      	lsls	r2, r3, #5
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4413      	add	r3, r2
 8002530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	78fa      	ldrb	r2, [r7, #3]
 8002538:	0151      	lsls	r1, r2, #5
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	440a      	add	r2, r1
 800253e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002546:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002548:	78fb      	ldrb	r3, [r7, #3]
 800254a:	015a      	lsls	r2, r3, #5
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	4413      	add	r3, r2
 8002550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	78fa      	ldrb	r2, [r7, #3]
 8002558:	0151      	lsls	r1, r2, #5
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	440a      	add	r2, r1
 800255e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002562:	f023 0320 	bic.w	r3, r3, #32
 8002566:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	3326      	adds	r3, #38	; 0x26
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00b      	beq.n	8002596 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800257e:	78fa      	ldrb	r2, [r7, #3]
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	011b      	lsls	r3, r3, #4
 8002586:	1a9b      	subs	r3, r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	3326      	adds	r3, #38	; 0x26
 800258e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002590:	2b02      	cmp	r3, #2
 8002592:	f040 80a9 	bne.w	80026e8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002596:	78fb      	ldrb	r3, [r7, #3]
 8002598:	015a      	lsls	r2, r3, #5
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4413      	add	r3, r2
 800259e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025ac:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025b4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80025b6:	78fb      	ldrb	r3, [r7, #3]
 80025b8:	015a      	lsls	r2, r3, #5
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	4413      	add	r3, r2
 80025be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c2:	461a      	mov	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6013      	str	r3, [r2, #0]
 80025c8:	e08e      	b.n	80026e8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80025ca:	78fa      	ldrb	r2, [r7, #3]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	1a9b      	subs	r3, r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	334d      	adds	r3, #77	; 0x4d
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b04      	cmp	r3, #4
 80025de:	d143      	bne.n	8002668 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	011b      	lsls	r3, r3, #4
 80025e8:	1a9b      	subs	r3, r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	334d      	adds	r3, #77	; 0x4d
 80025f0:	2202      	movs	r2, #2
 80025f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025f4:	78fa      	ldrb	r2, [r7, #3]
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	4613      	mov	r3, r2
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	1a9b      	subs	r3, r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	334c      	adds	r3, #76	; 0x4c
 8002604:	2202      	movs	r2, #2
 8002606:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002608:	78fa      	ldrb	r2, [r7, #3]
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	1a9b      	subs	r3, r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	3326      	adds	r3, #38	; 0x26
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800261e:	78fa      	ldrb	r2, [r7, #3]
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	4613      	mov	r3, r2
 8002624:	011b      	lsls	r3, r3, #4
 8002626:	1a9b      	subs	r3, r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	440b      	add	r3, r1
 800262c:	3326      	adds	r3, #38	; 0x26
 800262e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002630:	2b02      	cmp	r3, #2
 8002632:	d159      	bne.n	80026e8 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002634:	78fb      	ldrb	r3, [r7, #3]
 8002636:	015a      	lsls	r2, r3, #5
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4413      	add	r3, r2
 800263c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800264a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002652:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002654:	78fb      	ldrb	r3, [r7, #3]
 8002656:	015a      	lsls	r2, r3, #5
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	4413      	add	r3, r2
 800265c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002660:	461a      	mov	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	e03f      	b.n	80026e8 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002668:	78fa      	ldrb	r2, [r7, #3]
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	4613      	mov	r3, r2
 800266e:	011b      	lsls	r3, r3, #4
 8002670:	1a9b      	subs	r3, r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	334d      	adds	r3, #77	; 0x4d
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b08      	cmp	r3, #8
 800267c:	d126      	bne.n	80026cc <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800267e:	78fa      	ldrb	r2, [r7, #3]
 8002680:	6879      	ldr	r1, [r7, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	011b      	lsls	r3, r3, #4
 8002686:	1a9b      	subs	r3, r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	440b      	add	r3, r1
 800268c:	334d      	adds	r3, #77	; 0x4d
 800268e:	2202      	movs	r2, #2
 8002690:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002692:	78fa      	ldrb	r2, [r7, #3]
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	4613      	mov	r3, r2
 8002698:	011b      	lsls	r3, r3, #4
 800269a:	1a9b      	subs	r3, r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	440b      	add	r3, r1
 80026a0:	3344      	adds	r3, #68	; 0x44
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	1c59      	adds	r1, r3, #1
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	4613      	mov	r3, r2
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	1a9b      	subs	r3, r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4403      	add	r3, r0
 80026b2:	3344      	adds	r3, #68	; 0x44
 80026b4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80026b6:	78fa      	ldrb	r2, [r7, #3]
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	4613      	mov	r3, r2
 80026bc:	011b      	lsls	r3, r3, #4
 80026be:	1a9b      	subs	r3, r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	440b      	add	r3, r1
 80026c4:	334c      	adds	r3, #76	; 0x4c
 80026c6:	2204      	movs	r2, #4
 80026c8:	701a      	strb	r2, [r3, #0]
 80026ca:	e00d      	b.n	80026e8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80026cc:	78fa      	ldrb	r2, [r7, #3]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	1a9b      	subs	r3, r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	334d      	adds	r3, #77	; 0x4d
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b02      	cmp	r3, #2
 80026e0:	f000 8100 	beq.w	80028e4 <HCD_HC_IN_IRQHandler+0xcca>
 80026e4:	e000      	b.n	80026e8 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80026e6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80026e8:	78fa      	ldrb	r2, [r7, #3]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	4613      	mov	r3, r2
 80026ee:	011b      	lsls	r3, r3, #4
 80026f0:	1a9b      	subs	r3, r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	334c      	adds	r3, #76	; 0x4c
 80026f8:	781a      	ldrb	r2, [r3, #0]
 80026fa:	78fb      	ldrb	r3, [r7, #3]
 80026fc:	4619      	mov	r1, r3
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f006 fe5c 	bl	80093bc <HAL_HCD_HC_NotifyURBChange_Callback>
 8002704:	e0ef      	b.n	80028e6 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	78fa      	ldrb	r2, [r7, #3]
 800270c:	4611      	mov	r1, r2
 800270e:	4618      	mov	r0, r3
 8002710:	f002 fd89 	bl	8005226 <USB_ReadChInterrupts>
 8002714:	4603      	mov	r3, r0
 8002716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271a:	2b40      	cmp	r3, #64	; 0x40
 800271c:	d12f      	bne.n	800277e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800271e:	78fb      	ldrb	r3, [r7, #3]
 8002720:	015a      	lsls	r2, r3, #5
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4413      	add	r3, r2
 8002726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272a:	461a      	mov	r2, r3
 800272c:	2340      	movs	r3, #64	; 0x40
 800272e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002730:	78fa      	ldrb	r2, [r7, #3]
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	4613      	mov	r3, r2
 8002736:	011b      	lsls	r3, r3, #4
 8002738:	1a9b      	subs	r3, r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	334d      	adds	r3, #77	; 0x4d
 8002740:	2205      	movs	r2, #5
 8002742:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002744:	78fa      	ldrb	r2, [r7, #3]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	331a      	adds	r3, #26
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d109      	bne.n	800276e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800275a:	78fa      	ldrb	r2, [r7, #3]
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	011b      	lsls	r3, r3, #4
 8002762:	1a9b      	subs	r3, r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	440b      	add	r3, r1
 8002768:	3344      	adds	r3, #68	; 0x44
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	78fa      	ldrb	r2, [r7, #3]
 8002774:	4611      	mov	r1, r2
 8002776:	4618      	mov	r0, r3
 8002778:	f003 faff 	bl	8005d7a <USB_HC_Halt>
 800277c:	e0b3      	b.n	80028e6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	78fa      	ldrb	r2, [r7, #3]
 8002784:	4611      	mov	r1, r2
 8002786:	4618      	mov	r0, r3
 8002788:	f002 fd4d 	bl	8005226 <USB_ReadChInterrupts>
 800278c:	4603      	mov	r3, r0
 800278e:	f003 0310 	and.w	r3, r3, #16
 8002792:	2b10      	cmp	r3, #16
 8002794:	f040 80a7 	bne.w	80028e6 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002798:	78fa      	ldrb	r2, [r7, #3]
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	1a9b      	subs	r3, r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	3326      	adds	r3, #38	; 0x26
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	2b03      	cmp	r3, #3
 80027ac:	d11b      	bne.n	80027e6 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80027ae:	78fa      	ldrb	r2, [r7, #3]
 80027b0:	6879      	ldr	r1, [r7, #4]
 80027b2:	4613      	mov	r3, r2
 80027b4:	011b      	lsls	r3, r3, #4
 80027b6:	1a9b      	subs	r3, r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	440b      	add	r3, r1
 80027bc:	3344      	adds	r3, #68	; 0x44
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80027c2:	78fa      	ldrb	r2, [r7, #3]
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	1a9b      	subs	r3, r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	334d      	adds	r3, #77	; 0x4d
 80027d2:	2204      	movs	r2, #4
 80027d4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	78fa      	ldrb	r2, [r7, #3]
 80027dc:	4611      	mov	r1, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f003 facb 	bl	8005d7a <USB_HC_Halt>
 80027e4:	e03f      	b.n	8002866 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027e6:	78fa      	ldrb	r2, [r7, #3]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	1a9b      	subs	r3, r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	3326      	adds	r3, #38	; 0x26
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00a      	beq.n	8002812 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80027fc:	78fa      	ldrb	r2, [r7, #3]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	3326      	adds	r3, #38	; 0x26
 800280c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800280e:	2b02      	cmp	r3, #2
 8002810:	d129      	bne.n	8002866 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002812:	78fa      	ldrb	r2, [r7, #3]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	1a9b      	subs	r3, r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	3344      	adds	r3, #68	; 0x44
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	799b      	ldrb	r3, [r3, #6]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00a      	beq.n	8002844 <HCD_HC_IN_IRQHandler+0xc2a>
 800282e:	78fa      	ldrb	r2, [r7, #3]
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	4613      	mov	r3, r2
 8002834:	011b      	lsls	r3, r3, #4
 8002836:	1a9b      	subs	r3, r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	440b      	add	r3, r1
 800283c:	331b      	adds	r3, #27
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d110      	bne.n	8002866 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002844:	78fa      	ldrb	r2, [r7, #3]
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	1a9b      	subs	r3, r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	334d      	adds	r3, #77	; 0x4d
 8002854:	2204      	movs	r2, #4
 8002856:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	78fa      	ldrb	r2, [r7, #3]
 800285e:	4611      	mov	r1, r2
 8002860:	4618      	mov	r0, r3
 8002862:	f003 fa8a 	bl	8005d7a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002866:	78fa      	ldrb	r2, [r7, #3]
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	4613      	mov	r3, r2
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	1a9b      	subs	r3, r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	440b      	add	r3, r1
 8002874:	331b      	adds	r3, #27
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d129      	bne.n	80028d0 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800287c:	78fa      	ldrb	r2, [r7, #3]
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	4613      	mov	r3, r2
 8002882:	011b      	lsls	r3, r3, #4
 8002884:	1a9b      	subs	r3, r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	440b      	add	r3, r1
 800288a:	331b      	adds	r3, #27
 800288c:	2200      	movs	r2, #0
 800288e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002890:	78fb      	ldrb	r3, [r7, #3]
 8002892:	015a      	lsls	r2, r3, #5
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	4413      	add	r3, r2
 8002898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	78fa      	ldrb	r2, [r7, #3]
 80028a0:	0151      	lsls	r1, r2, #5
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	440a      	add	r2, r1
 80028a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ae:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80028b0:	78fb      	ldrb	r3, [r7, #3]
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	78fa      	ldrb	r2, [r7, #3]
 80028c0:	0151      	lsls	r1, r2, #5
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	440a      	add	r2, r1
 80028c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028ca:	f043 0320 	orr.w	r3, r3, #32
 80028ce:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80028d0:	78fb      	ldrb	r3, [r7, #3]
 80028d2:	015a      	lsls	r2, r3, #5
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	4413      	add	r3, r2
 80028d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028dc:	461a      	mov	r2, r3
 80028de:	2310      	movs	r3, #16
 80028e0:	6093      	str	r3, [r2, #8]
 80028e2:	e000      	b.n	80028e6 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80028e4:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	460b      	mov	r3, r1
 80028f6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	78fa      	ldrb	r2, [r7, #3]
 8002908:	4611      	mov	r1, r2
 800290a:	4618      	mov	r0, r3
 800290c:	f002 fc8b 	bl	8005226 <USB_ReadChInterrupts>
 8002910:	4603      	mov	r3, r0
 8002912:	f003 0304 	and.w	r3, r3, #4
 8002916:	2b04      	cmp	r3, #4
 8002918:	d11b      	bne.n	8002952 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800291a:	78fb      	ldrb	r3, [r7, #3]
 800291c:	015a      	lsls	r2, r3, #5
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	4413      	add	r3, r2
 8002922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002926:	461a      	mov	r2, r3
 8002928:	2304      	movs	r3, #4
 800292a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800292c:	78fa      	ldrb	r2, [r7, #3]
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	1a9b      	subs	r3, r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	334d      	adds	r3, #77	; 0x4d
 800293c:	2207      	movs	r2, #7
 800293e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	78fa      	ldrb	r2, [r7, #3]
 8002946:	4611      	mov	r1, r2
 8002948:	4618      	mov	r0, r3
 800294a:	f003 fa16 	bl	8005d7a <USB_HC_Halt>
 800294e:	f000 bc89 	b.w	8003264 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	78fa      	ldrb	r2, [r7, #3]
 8002958:	4611      	mov	r1, r2
 800295a:	4618      	mov	r0, r3
 800295c:	f002 fc63 	bl	8005226 <USB_ReadChInterrupts>
 8002960:	4603      	mov	r3, r0
 8002962:	f003 0320 	and.w	r3, r3, #32
 8002966:	2b20      	cmp	r3, #32
 8002968:	f040 8082 	bne.w	8002a70 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800296c:	78fb      	ldrb	r3, [r7, #3]
 800296e:	015a      	lsls	r2, r3, #5
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	4413      	add	r3, r2
 8002974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002978:	461a      	mov	r2, r3
 800297a:	2320      	movs	r3, #32
 800297c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800297e:	78fa      	ldrb	r2, [r7, #3]
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	4613      	mov	r3, r2
 8002984:	011b      	lsls	r3, r3, #4
 8002986:	1a9b      	subs	r3, r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	440b      	add	r3, r1
 800298c:	3319      	adds	r3, #25
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d124      	bne.n	80029de <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002994:	78fa      	ldrb	r2, [r7, #3]
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	4613      	mov	r3, r2
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	1a9b      	subs	r3, r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	3319      	adds	r3, #25
 80029a4:	2200      	movs	r2, #0
 80029a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	334c      	adds	r3, #76	; 0x4c
 80029b8:	2202      	movs	r2, #2
 80029ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80029bc:	78fa      	ldrb	r2, [r7, #3]
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	1a9b      	subs	r3, r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	334d      	adds	r3, #77	; 0x4d
 80029cc:	2203      	movs	r2, #3
 80029ce:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	78fa      	ldrb	r2, [r7, #3]
 80029d6:	4611      	mov	r1, r2
 80029d8:	4618      	mov	r0, r3
 80029da:	f003 f9ce 	bl	8005d7a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80029de:	78fa      	ldrb	r2, [r7, #3]
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	4613      	mov	r3, r2
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	1a9b      	subs	r3, r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	440b      	add	r3, r1
 80029ec:	331a      	adds	r3, #26
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	f040 8437 	bne.w	8003264 <HCD_HC_OUT_IRQHandler+0x978>
 80029f6:	78fa      	ldrb	r2, [r7, #3]
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	1a9b      	subs	r3, r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	331b      	adds	r3, #27
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f040 842b 	bne.w	8003264 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002a0e:	78fa      	ldrb	r2, [r7, #3]
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	4613      	mov	r3, r2
 8002a14:	011b      	lsls	r3, r3, #4
 8002a16:	1a9b      	subs	r3, r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	440b      	add	r3, r1
 8002a1c:	3326      	adds	r3, #38	; 0x26
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d009      	beq.n	8002a38 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002a24:	78fa      	ldrb	r2, [r7, #3]
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	011b      	lsls	r3, r3, #4
 8002a2c:	1a9b      	subs	r3, r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	331b      	adds	r3, #27
 8002a34:	2201      	movs	r2, #1
 8002a36:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002a38:	78fa      	ldrb	r2, [r7, #3]
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	1a9b      	subs	r3, r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	334d      	adds	r3, #77	; 0x4d
 8002a48:	2203      	movs	r2, #3
 8002a4a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	78fa      	ldrb	r2, [r7, #3]
 8002a52:	4611      	mov	r1, r2
 8002a54:	4618      	mov	r0, r3
 8002a56:	f003 f990 	bl	8005d7a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a5a:	78fa      	ldrb	r2, [r7, #3]
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	1a9b      	subs	r3, r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	440b      	add	r3, r1
 8002a68:	3344      	adds	r3, #68	; 0x44
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	e3f9      	b.n	8003264 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	78fa      	ldrb	r2, [r7, #3]
 8002a76:	4611      	mov	r1, r2
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f002 fbd4 	bl	8005226 <USB_ReadChInterrupts>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a88:	d111      	bne.n	8002aae <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002a8a:	78fb      	ldrb	r3, [r7, #3]
 8002a8c:	015a      	lsls	r2, r3, #5
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a96:	461a      	mov	r2, r3
 8002a98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a9c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	78fa      	ldrb	r2, [r7, #3]
 8002aa4:	4611      	mov	r1, r2
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f003 f967 	bl	8005d7a <USB_HC_Halt>
 8002aac:	e3da      	b.n	8003264 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	78fa      	ldrb	r2, [r7, #3]
 8002ab4:	4611      	mov	r1, r2
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f002 fbb5 	bl	8005226 <USB_ReadChInterrupts>
 8002abc:	4603      	mov	r3, r0
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d168      	bne.n	8002b98 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002ac6:	78fa      	ldrb	r2, [r7, #3]
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	011b      	lsls	r3, r3, #4
 8002ace:	1a9b      	subs	r3, r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	3344      	adds	r3, #68	; 0x44
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	78fa      	ldrb	r2, [r7, #3]
 8002ae0:	4611      	mov	r1, r2
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f002 fb9f 	bl	8005226 <USB_ReadChInterrupts>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aee:	2b40      	cmp	r3, #64	; 0x40
 8002af0:	d112      	bne.n	8002b18 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002af2:	78fa      	ldrb	r2, [r7, #3]
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	4613      	mov	r3, r2
 8002af8:	011b      	lsls	r3, r3, #4
 8002afa:	1a9b      	subs	r3, r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	440b      	add	r3, r1
 8002b00:	3319      	adds	r3, #25
 8002b02:	2201      	movs	r2, #1
 8002b04:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002b06:	78fb      	ldrb	r3, [r7, #3]
 8002b08:	015a      	lsls	r2, r3, #5
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b12:	461a      	mov	r2, r3
 8002b14:	2340      	movs	r3, #64	; 0x40
 8002b16:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002b18:	78fa      	ldrb	r2, [r7, #3]
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	1a9b      	subs	r3, r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	331b      	adds	r3, #27
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d019      	beq.n	8002b62 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002b2e:	78fa      	ldrb	r2, [r7, #3]
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	4613      	mov	r3, r2
 8002b34:	011b      	lsls	r3, r3, #4
 8002b36:	1a9b      	subs	r3, r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	331b      	adds	r3, #27
 8002b3e:	2200      	movs	r2, #0
 8002b40:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002b42:	78fb      	ldrb	r3, [r7, #3]
 8002b44:	015a      	lsls	r2, r3, #5
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	4413      	add	r3, r2
 8002b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	78fa      	ldrb	r2, [r7, #3]
 8002b52:	0151      	lsls	r1, r2, #5
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	440a      	add	r2, r1
 8002b58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b60:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002b62:	78fb      	ldrb	r3, [r7, #3]
 8002b64:	015a      	lsls	r2, r3, #5
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6e:	461a      	mov	r2, r3
 8002b70:	2301      	movs	r3, #1
 8002b72:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002b74:	78fa      	ldrb	r2, [r7, #3]
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	334d      	adds	r3, #77	; 0x4d
 8002b84:	2201      	movs	r2, #1
 8002b86:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	78fa      	ldrb	r2, [r7, #3]
 8002b8e:	4611      	mov	r1, r2
 8002b90:	4618      	mov	r0, r3
 8002b92:	f003 f8f2 	bl	8005d7a <USB_HC_Halt>
 8002b96:	e365      	b.n	8003264 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	78fa      	ldrb	r2, [r7, #3]
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f002 fb40 	bl	8005226 <USB_ReadChInterrupts>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bac:	2b40      	cmp	r3, #64	; 0x40
 8002bae:	d139      	bne.n	8002c24 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002bb0:	78fa      	ldrb	r2, [r7, #3]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	1a9b      	subs	r3, r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	334d      	adds	r3, #77	; 0x4d
 8002bc0:	2205      	movs	r2, #5
 8002bc2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002bc4:	78fa      	ldrb	r2, [r7, #3]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	331a      	adds	r3, #26
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d109      	bne.n	8002bee <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002bda:	78fa      	ldrb	r2, [r7, #3]
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	4613      	mov	r3, r2
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	1a9b      	subs	r3, r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	440b      	add	r3, r1
 8002be8:	3319      	adds	r3, #25
 8002bea:	2201      	movs	r2, #1
 8002bec:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002bee:	78fa      	ldrb	r2, [r7, #3]
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	1a9b      	subs	r3, r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	3344      	adds	r3, #68	; 0x44
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	78fa      	ldrb	r2, [r7, #3]
 8002c08:	4611      	mov	r1, r2
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f003 f8b5 	bl	8005d7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002c10:	78fb      	ldrb	r3, [r7, #3]
 8002c12:	015a      	lsls	r2, r3, #5
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	2340      	movs	r3, #64	; 0x40
 8002c20:	6093      	str	r3, [r2, #8]
 8002c22:	e31f      	b.n	8003264 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	78fa      	ldrb	r2, [r7, #3]
 8002c2a:	4611      	mov	r1, r2
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f002 fafa 	bl	8005226 <USB_ReadChInterrupts>
 8002c32:	4603      	mov	r3, r0
 8002c34:	f003 0308 	and.w	r3, r3, #8
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d11a      	bne.n	8002c72 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002c3c:	78fb      	ldrb	r3, [r7, #3]
 8002c3e:	015a      	lsls	r2, r3, #5
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	4413      	add	r3, r2
 8002c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c48:	461a      	mov	r2, r3
 8002c4a:	2308      	movs	r3, #8
 8002c4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002c4e:	78fa      	ldrb	r2, [r7, #3]
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	1a9b      	subs	r3, r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	334d      	adds	r3, #77	; 0x4d
 8002c5e:	2206      	movs	r2, #6
 8002c60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	78fa      	ldrb	r2, [r7, #3]
 8002c68:	4611      	mov	r1, r2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f003 f885 	bl	8005d7a <USB_HC_Halt>
 8002c70:	e2f8      	b.n	8003264 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	78fa      	ldrb	r2, [r7, #3]
 8002c78:	4611      	mov	r1, r2
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f002 fad3 	bl	8005226 <USB_ReadChInterrupts>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f003 0310 	and.w	r3, r3, #16
 8002c86:	2b10      	cmp	r3, #16
 8002c88:	d144      	bne.n	8002d14 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002c8a:	78fa      	ldrb	r2, [r7, #3]
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	1a9b      	subs	r3, r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	3344      	adds	r3, #68	; 0x44
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002c9e:	78fa      	ldrb	r2, [r7, #3]
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	011b      	lsls	r3, r3, #4
 8002ca6:	1a9b      	subs	r3, r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	440b      	add	r3, r1
 8002cac:	334d      	adds	r3, #77	; 0x4d
 8002cae:	2204      	movs	r2, #4
 8002cb0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002cb2:	78fa      	ldrb	r2, [r7, #3]
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	011b      	lsls	r3, r3, #4
 8002cba:	1a9b      	subs	r3, r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	3319      	adds	r3, #25
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d114      	bne.n	8002cf2 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002cc8:	78fa      	ldrb	r2, [r7, #3]
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	011b      	lsls	r3, r3, #4
 8002cd0:	1a9b      	subs	r3, r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	3318      	adds	r3, #24
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d109      	bne.n	8002cf2 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002cde:	78fa      	ldrb	r2, [r7, #3]
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	1a9b      	subs	r3, r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	440b      	add	r3, r1
 8002cec:	3319      	adds	r3, #25
 8002cee:	2201      	movs	r2, #1
 8002cf0:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	78fa      	ldrb	r2, [r7, #3]
 8002cf8:	4611      	mov	r1, r2
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f003 f83d 	bl	8005d7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002d00:	78fb      	ldrb	r3, [r7, #3]
 8002d02:	015a      	lsls	r2, r3, #5
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4413      	add	r3, r2
 8002d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	2310      	movs	r3, #16
 8002d10:	6093      	str	r3, [r2, #8]
 8002d12:	e2a7      	b.n	8003264 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	78fa      	ldrb	r2, [r7, #3]
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f002 fa82 	bl	8005226 <USB_ReadChInterrupts>
 8002d22:	4603      	mov	r3, r0
 8002d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d28:	2b80      	cmp	r3, #128	; 0x80
 8002d2a:	f040 8083 	bne.w	8002e34 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	799b      	ldrb	r3, [r3, #6]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d111      	bne.n	8002d5a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002d36:	78fa      	ldrb	r2, [r7, #3]
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	1a9b      	subs	r3, r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	334d      	adds	r3, #77	; 0x4d
 8002d46:	2207      	movs	r2, #7
 8002d48:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	78fa      	ldrb	r2, [r7, #3]
 8002d50:	4611      	mov	r1, r2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f003 f811 	bl	8005d7a <USB_HC_Halt>
 8002d58:	e062      	b.n	8002e20 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002d5a:	78fa      	ldrb	r2, [r7, #3]
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	011b      	lsls	r3, r3, #4
 8002d62:	1a9b      	subs	r3, r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	440b      	add	r3, r1
 8002d68:	3344      	adds	r3, #68	; 0x44
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	1c59      	adds	r1, r3, #1
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	4613      	mov	r3, r2
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	1a9b      	subs	r3, r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4403      	add	r3, r0
 8002d7a:	3344      	adds	r3, #68	; 0x44
 8002d7c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002d7e:	78fa      	ldrb	r2, [r7, #3]
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	3344      	adds	r3, #68	; 0x44
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d922      	bls.n	8002dda <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002d94:	78fa      	ldrb	r2, [r7, #3]
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	1a9b      	subs	r3, r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	3344      	adds	r3, #68	; 0x44
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002da8:	78fa      	ldrb	r2, [r7, #3]
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	4613      	mov	r3, r2
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	1a9b      	subs	r3, r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	334c      	adds	r3, #76	; 0x4c
 8002db8:	2204      	movs	r2, #4
 8002dba:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002dbc:	78fa      	ldrb	r2, [r7, #3]
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	1a9b      	subs	r3, r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	334c      	adds	r3, #76	; 0x4c
 8002dcc:	781a      	ldrb	r2, [r3, #0]
 8002dce:	78fb      	ldrb	r3, [r7, #3]
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f006 faf2 	bl	80093bc <HAL_HCD_HC_NotifyURBChange_Callback>
 8002dd8:	e022      	b.n	8002e20 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002dda:	78fa      	ldrb	r2, [r7, #3]
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	1a9b      	subs	r3, r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	440b      	add	r3, r1
 8002de8:	334c      	adds	r3, #76	; 0x4c
 8002dea:	2202      	movs	r2, #2
 8002dec:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002dee:	78fb      	ldrb	r3, [r7, #3]
 8002df0:	015a      	lsls	r2, r3, #5
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4413      	add	r3, r2
 8002df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e04:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e0c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002e0e:	78fb      	ldrb	r3, [r7, #3]
 8002e10:	015a      	lsls	r2, r3, #5
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	4413      	add	r3, r2
 8002e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002e20:	78fb      	ldrb	r3, [r7, #3]
 8002e22:	015a      	lsls	r2, r3, #5
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	4413      	add	r3, r2
 8002e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	2380      	movs	r3, #128	; 0x80
 8002e30:	6093      	str	r3, [r2, #8]
 8002e32:	e217      	b.n	8003264 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	78fa      	ldrb	r2, [r7, #3]
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f002 f9f2 	bl	8005226 <USB_ReadChInterrupts>
 8002e42:	4603      	mov	r3, r0
 8002e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e4c:	d11b      	bne.n	8002e86 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002e4e:	78fa      	ldrb	r2, [r7, #3]
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	4613      	mov	r3, r2
 8002e54:	011b      	lsls	r3, r3, #4
 8002e56:	1a9b      	subs	r3, r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	440b      	add	r3, r1
 8002e5c:	334d      	adds	r3, #77	; 0x4d
 8002e5e:	2209      	movs	r2, #9
 8002e60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	78fa      	ldrb	r2, [r7, #3]
 8002e68:	4611      	mov	r1, r2
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f002 ff85 	bl	8005d7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002e70:	78fb      	ldrb	r3, [r7, #3]
 8002e72:	015a      	lsls	r2, r3, #5
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	4413      	add	r3, r2
 8002e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e82:	6093      	str	r3, [r2, #8]
 8002e84:	e1ee      	b.n	8003264 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	78fa      	ldrb	r2, [r7, #3]
 8002e8c:	4611      	mov	r1, r2
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f002 f9c9 	bl	8005226 <USB_ReadChInterrupts>
 8002e94:	4603      	mov	r3, r0
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	f040 81df 	bne.w	800325e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	015a      	lsls	r2, r3, #5
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eac:	461a      	mov	r2, r3
 8002eae:	2302      	movs	r3, #2
 8002eb0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002eb2:	78fa      	ldrb	r2, [r7, #3]
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	1a9b      	subs	r3, r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	334d      	adds	r3, #77	; 0x4d
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	f040 8093 	bne.w	8002ff0 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002eca:	78fa      	ldrb	r2, [r7, #3]
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	011b      	lsls	r3, r3, #4
 8002ed2:	1a9b      	subs	r3, r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	334d      	adds	r3, #77	; 0x4d
 8002eda:	2202      	movs	r2, #2
 8002edc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002ede:	78fa      	ldrb	r2, [r7, #3]
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	1a9b      	subs	r3, r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	440b      	add	r3, r1
 8002eec:	334c      	adds	r3, #76	; 0x4c
 8002eee:	2201      	movs	r2, #1
 8002ef0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002ef2:	78fa      	ldrb	r2, [r7, #3]
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	1a9b      	subs	r3, r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	440b      	add	r3, r1
 8002f00:	3326      	adds	r3, #38	; 0x26
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d00b      	beq.n	8002f20 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8002f08:	78fa      	ldrb	r2, [r7, #3]
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	1a9b      	subs	r3, r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	3326      	adds	r3, #38	; 0x26
 8002f18:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002f1a:	2b03      	cmp	r3, #3
 8002f1c:	f040 8190 	bne.w	8003240 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	799b      	ldrb	r3, [r3, #6]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d115      	bne.n	8002f54 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8002f28:	78fa      	ldrb	r2, [r7, #3]
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	1a9b      	subs	r3, r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	333d      	adds	r3, #61	; 0x3d
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	78fa      	ldrb	r2, [r7, #3]
 8002f3c:	f083 0301 	eor.w	r3, r3, #1
 8002f40:	b2d8      	uxtb	r0, r3
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	1a9b      	subs	r3, r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	333d      	adds	r3, #61	; 0x3d
 8002f50:	4602      	mov	r2, r0
 8002f52:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	799b      	ldrb	r3, [r3, #6]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	f040 8171 	bne.w	8003240 <HCD_HC_OUT_IRQHandler+0x954>
 8002f5e:	78fa      	ldrb	r2, [r7, #3]
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	4613      	mov	r3, r2
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	1a9b      	subs	r3, r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	3334      	adds	r3, #52	; 0x34
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 8165 	beq.w	8003240 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8002f76:	78fa      	ldrb	r2, [r7, #3]
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	1a9b      	subs	r3, r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	440b      	add	r3, r1
 8002f84:	3334      	adds	r3, #52	; 0x34
 8002f86:	6819      	ldr	r1, [r3, #0]
 8002f88:	78fa      	ldrb	r2, [r7, #3]
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	1a9b      	subs	r3, r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4403      	add	r3, r0
 8002f96:	3328      	adds	r3, #40	; 0x28
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	440b      	add	r3, r1
 8002f9c:	1e59      	subs	r1, r3, #1
 8002f9e:	78fa      	ldrb	r2, [r7, #3]
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	011b      	lsls	r3, r3, #4
 8002fa6:	1a9b      	subs	r3, r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4403      	add	r3, r0
 8002fac:	3328      	adds	r3, #40	; 0x28
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fb4:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 813f 	beq.w	8003240 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8002fc2:	78fa      	ldrb	r2, [r7, #3]
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	1a9b      	subs	r3, r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	333d      	adds	r3, #61	; 0x3d
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	78fa      	ldrb	r2, [r7, #3]
 8002fd6:	f083 0301 	eor.w	r3, r3, #1
 8002fda:	b2d8      	uxtb	r0, r3
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	1a9b      	subs	r3, r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	333d      	adds	r3, #61	; 0x3d
 8002fea:	4602      	mov	r2, r0
 8002fec:	701a      	strb	r2, [r3, #0]
 8002fee:	e127      	b.n	8003240 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002ff0:	78fa      	ldrb	r2, [r7, #3]
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	1a9b      	subs	r3, r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	334d      	adds	r3, #77	; 0x4d
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b03      	cmp	r3, #3
 8003004:	d120      	bne.n	8003048 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003006:	78fa      	ldrb	r2, [r7, #3]
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	1a9b      	subs	r3, r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	440b      	add	r3, r1
 8003014:	334d      	adds	r3, #77	; 0x4d
 8003016:	2202      	movs	r2, #2
 8003018:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800301a:	78fa      	ldrb	r2, [r7, #3]
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	4613      	mov	r3, r2
 8003020:	011b      	lsls	r3, r3, #4
 8003022:	1a9b      	subs	r3, r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	440b      	add	r3, r1
 8003028:	331b      	adds	r3, #27
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b01      	cmp	r3, #1
 800302e:	f040 8107 	bne.w	8003240 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003032:	78fa      	ldrb	r2, [r7, #3]
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	1a9b      	subs	r3, r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	334c      	adds	r3, #76	; 0x4c
 8003042:	2202      	movs	r2, #2
 8003044:	701a      	strb	r2, [r3, #0]
 8003046:	e0fb      	b.n	8003240 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003048:	78fa      	ldrb	r2, [r7, #3]
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	4613      	mov	r3, r2
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	1a9b      	subs	r3, r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	334d      	adds	r3, #77	; 0x4d
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	2b04      	cmp	r3, #4
 800305c:	d13a      	bne.n	80030d4 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800305e:	78fa      	ldrb	r2, [r7, #3]
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	1a9b      	subs	r3, r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	440b      	add	r3, r1
 800306c:	334d      	adds	r3, #77	; 0x4d
 800306e:	2202      	movs	r2, #2
 8003070:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	1a9b      	subs	r3, r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	440b      	add	r3, r1
 8003080:	334c      	adds	r3, #76	; 0x4c
 8003082:	2202      	movs	r2, #2
 8003084:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003086:	78fa      	ldrb	r2, [r7, #3]
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	1a9b      	subs	r3, r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	440b      	add	r3, r1
 8003094:	331b      	adds	r3, #27
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b01      	cmp	r3, #1
 800309a:	f040 80d1 	bne.w	8003240 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800309e:	78fa      	ldrb	r2, [r7, #3]
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	1a9b      	subs	r3, r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	331b      	adds	r3, #27
 80030ae:	2200      	movs	r2, #0
 80030b0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80030b2:	78fb      	ldrb	r3, [r7, #3]
 80030b4:	015a      	lsls	r2, r3, #5
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	4413      	add	r3, r2
 80030ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	78fa      	ldrb	r2, [r7, #3]
 80030c2:	0151      	lsls	r1, r2, #5
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	440a      	add	r2, r1
 80030c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030d0:	6053      	str	r3, [r2, #4]
 80030d2:	e0b5      	b.n	8003240 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80030d4:	78fa      	ldrb	r2, [r7, #3]
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	011b      	lsls	r3, r3, #4
 80030dc:	1a9b      	subs	r3, r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	334d      	adds	r3, #77	; 0x4d
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	2b05      	cmp	r3, #5
 80030e8:	d114      	bne.n	8003114 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030ea:	78fa      	ldrb	r2, [r7, #3]
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	4613      	mov	r3, r2
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	1a9b      	subs	r3, r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	334d      	adds	r3, #77	; 0x4d
 80030fa:	2202      	movs	r2, #2
 80030fc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80030fe:	78fa      	ldrb	r2, [r7, #3]
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	1a9b      	subs	r3, r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	334c      	adds	r3, #76	; 0x4c
 800310e:	2202      	movs	r2, #2
 8003110:	701a      	strb	r2, [r3, #0]
 8003112:	e095      	b.n	8003240 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003114:	78fa      	ldrb	r2, [r7, #3]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	1a9b      	subs	r3, r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	334d      	adds	r3, #77	; 0x4d
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b06      	cmp	r3, #6
 8003128:	d114      	bne.n	8003154 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800312a:	78fa      	ldrb	r2, [r7, #3]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	1a9b      	subs	r3, r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	334d      	adds	r3, #77	; 0x4d
 800313a:	2202      	movs	r2, #2
 800313c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800313e:	78fa      	ldrb	r2, [r7, #3]
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	011b      	lsls	r3, r3, #4
 8003146:	1a9b      	subs	r3, r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	440b      	add	r3, r1
 800314c:	334c      	adds	r3, #76	; 0x4c
 800314e:	2205      	movs	r2, #5
 8003150:	701a      	strb	r2, [r3, #0]
 8003152:	e075      	b.n	8003240 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003154:	78fa      	ldrb	r2, [r7, #3]
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	1a9b      	subs	r3, r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	334d      	adds	r3, #77	; 0x4d
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b07      	cmp	r3, #7
 8003168:	d00a      	beq.n	8003180 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800316a:	78fa      	ldrb	r2, [r7, #3]
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	1a9b      	subs	r3, r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	440b      	add	r3, r1
 8003178:	334d      	adds	r3, #77	; 0x4d
 800317a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800317c:	2b09      	cmp	r3, #9
 800317e:	d170      	bne.n	8003262 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003180:	78fa      	ldrb	r2, [r7, #3]
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	1a9b      	subs	r3, r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	334d      	adds	r3, #77	; 0x4d
 8003190:	2202      	movs	r2, #2
 8003192:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003194:	78fa      	ldrb	r2, [r7, #3]
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	3344      	adds	r3, #68	; 0x44
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	1c59      	adds	r1, r3, #1
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	1a9b      	subs	r3, r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4403      	add	r3, r0
 80031b4:	3344      	adds	r3, #68	; 0x44
 80031b6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80031b8:	78fa      	ldrb	r2, [r7, #3]
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	1a9b      	subs	r3, r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	3344      	adds	r3, #68	; 0x44
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d914      	bls.n	80031f8 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80031ce:	78fa      	ldrb	r2, [r7, #3]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	3344      	adds	r3, #68	; 0x44
 80031de:	2200      	movs	r2, #0
 80031e0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80031e2:	78fa      	ldrb	r2, [r7, #3]
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	1a9b      	subs	r3, r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	334c      	adds	r3, #76	; 0x4c
 80031f2:	2204      	movs	r2, #4
 80031f4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80031f6:	e022      	b.n	800323e <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031f8:	78fa      	ldrb	r2, [r7, #3]
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	4613      	mov	r3, r2
 80031fe:	011b      	lsls	r3, r3, #4
 8003200:	1a9b      	subs	r3, r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	334c      	adds	r3, #76	; 0x4c
 8003208:	2202      	movs	r2, #2
 800320a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800320c:	78fb      	ldrb	r3, [r7, #3]
 800320e:	015a      	lsls	r2, r3, #5
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	4413      	add	r3, r2
 8003214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003222:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800322a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800322c:	78fb      	ldrb	r3, [r7, #3]
 800322e:	015a      	lsls	r2, r3, #5
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	4413      	add	r3, r2
 8003234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003238:	461a      	mov	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800323e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003240:	78fa      	ldrb	r2, [r7, #3]
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	4613      	mov	r3, r2
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	1a9b      	subs	r3, r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	334c      	adds	r3, #76	; 0x4c
 8003250:	781a      	ldrb	r2, [r3, #0]
 8003252:	78fb      	ldrb	r3, [r7, #3]
 8003254:	4619      	mov	r1, r3
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f006 f8b0 	bl	80093bc <HAL_HCD_HC_NotifyURBChange_Callback>
 800325c:	e002      	b.n	8003264 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800325e:	bf00      	nop
 8003260:	e000      	b.n	8003264 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003262:	bf00      	nop
  }
}
 8003264:	3718      	adds	r7, #24
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b08a      	sub	sp, #40	; 0x28
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f003 030f 	and.w	r3, r3, #15
 800328a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	0c5b      	lsrs	r3, r3, #17
 8003290:	f003 030f 	and.w	r3, r3, #15
 8003294:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	091b      	lsrs	r3, r3, #4
 800329a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800329e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d004      	beq.n	80032b0 <HCD_RXQLVL_IRQHandler+0x46>
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2b05      	cmp	r3, #5
 80032aa:	f000 80b6 	beq.w	800341a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80032ae:	e0b7      	b.n	8003420 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 80b3 	beq.w	800341e <HCD_RXQLVL_IRQHandler+0x1b4>
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	4613      	mov	r3, r2
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	1a9b      	subs	r3, r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	332c      	adds	r3, #44	; 0x2c
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 80a7 	beq.w	800341e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	4613      	mov	r3, r2
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	1a9b      	subs	r3, r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	3338      	adds	r3, #56	; 0x38
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	18d1      	adds	r1, r2, r3
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	4613      	mov	r3, r2
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	1a9b      	subs	r3, r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4403      	add	r3, r0
 80032f4:	3334      	adds	r3, #52	; 0x34
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4299      	cmp	r1, r3
 80032fa:	f200 8083 	bhi.w	8003404 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6818      	ldr	r0, [r3, #0]
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4613      	mov	r3, r2
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	1a9b      	subs	r3, r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	440b      	add	r3, r1
 8003310:	332c      	adds	r3, #44	; 0x2c
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	b292      	uxth	r2, r2
 8003318:	4619      	mov	r1, r3
 800331a:	f001 ff19 	bl	8005150 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4613      	mov	r3, r2
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	1a9b      	subs	r3, r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	440b      	add	r3, r1
 800332c:	332c      	adds	r3, #44	; 0x2c
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	18d1      	adds	r1, r2, r3
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4613      	mov	r3, r2
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	1a9b      	subs	r3, r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4403      	add	r3, r0
 8003342:	332c      	adds	r3, #44	; 0x2c
 8003344:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4613      	mov	r3, r2
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	1a9b      	subs	r3, r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	440b      	add	r3, r1
 8003354:	3338      	adds	r3, #56	; 0x38
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	18d1      	adds	r1, r2, r3
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4613      	mov	r3, r2
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	1a9b      	subs	r3, r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4403      	add	r3, r0
 800336a:	3338      	adds	r3, #56	; 0x38
 800336c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	015a      	lsls	r2, r3, #5
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	4413      	add	r3, r2
 8003376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	0cdb      	lsrs	r3, r3, #19
 800337e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003382:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	4613      	mov	r3, r2
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	3328      	adds	r3, #40	; 0x28
 8003394:	881b      	ldrh	r3, [r3, #0]
 8003396:	461a      	mov	r2, r3
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	4293      	cmp	r3, r2
 800339c:	d13f      	bne.n	800341e <HCD_RXQLVL_IRQHandler+0x1b4>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d03c      	beq.n	800341e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	015a      	lsls	r2, r3, #5
 80033a8:	6a3b      	ldr	r3, [r7, #32]
 80033aa:	4413      	add	r3, r2
 80033ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033ba:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033c2:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	015a      	lsls	r2, r3, #5
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d0:	461a      	mov	r2, r3
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	4613      	mov	r3, r2
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	1a9b      	subs	r3, r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	440b      	add	r3, r1
 80033e4:	333c      	adds	r3, #60	; 0x3c
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	f083 0301 	eor.w	r3, r3, #1
 80033ec:	b2d8      	uxtb	r0, r3
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4613      	mov	r3, r2
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	1a9b      	subs	r3, r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	440b      	add	r3, r1
 80033fc:	333c      	adds	r3, #60	; 0x3c
 80033fe:	4602      	mov	r2, r0
 8003400:	701a      	strb	r2, [r3, #0]
      break;
 8003402:	e00c      	b.n	800341e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4613      	mov	r3, r2
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	334c      	adds	r3, #76	; 0x4c
 8003414:	2204      	movs	r2, #4
 8003416:	701a      	strb	r2, [r3, #0]
      break;
 8003418:	e001      	b.n	800341e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800341a:	bf00      	nop
 800341c:	e000      	b.n	8003420 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800341e:	bf00      	nop
  }
}
 8003420:	bf00      	nop
 8003422:	3728      	adds	r7, #40	; 0x28
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003454:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b02      	cmp	r3, #2
 800345e:	d10b      	bne.n	8003478 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b01      	cmp	r3, #1
 8003468:	d102      	bne.n	8003470 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f005 ff8a 	bl	8009384 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	f043 0302 	orr.w	r3, r3, #2
 8003476:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b08      	cmp	r3, #8
 8003480:	d132      	bne.n	80034e8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	f043 0308 	orr.w	r3, r3, #8
 8003488:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b04      	cmp	r3, #4
 8003492:	d126      	bne.n	80034e2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	7a5b      	ldrb	r3, [r3, #9]
 8003498:	2b02      	cmp	r3, #2
 800349a:	d113      	bne.n	80034c4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80034a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034a6:	d106      	bne.n	80034b6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2102      	movs	r1, #2
 80034ae:	4618      	mov	r0, r3
 80034b0:	f001 ffe4 	bl	800547c <USB_InitFSLSPClkSel>
 80034b4:	e011      	b.n	80034da <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2101      	movs	r1, #1
 80034bc:	4618      	mov	r0, r3
 80034be:	f001 ffdd 	bl	800547c <USB_InitFSLSPClkSel>
 80034c2:	e00a      	b.n	80034da <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	79db      	ldrb	r3, [r3, #7]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d106      	bne.n	80034da <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034d2:	461a      	mov	r2, r3
 80034d4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80034d8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f005 ff7c 	bl	80093d8 <HAL_HCD_PortEnabled_Callback>
 80034e0:	e002      	b.n	80034e8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f005 ff86 	bl	80093f4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f003 0320 	and.w	r3, r3, #32
 80034ee:	2b20      	cmp	r3, #32
 80034f0:	d103      	bne.n	80034fa <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	f043 0320 	orr.w	r3, r3, #32
 80034f8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003500:	461a      	mov	r2, r3
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	6013      	str	r3, [r2, #0]
}
 8003506:	bf00      	nop
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e267      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d075      	beq.n	800361a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800352e:	4b88      	ldr	r3, [pc, #544]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 030c 	and.w	r3, r3, #12
 8003536:	2b04      	cmp	r3, #4
 8003538:	d00c      	beq.n	8003554 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800353a:	4b85      	ldr	r3, [pc, #532]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003542:	2b08      	cmp	r3, #8
 8003544:	d112      	bne.n	800356c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003546:	4b82      	ldr	r3, [pc, #520]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800354e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003552:	d10b      	bne.n	800356c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003554:	4b7e      	ldr	r3, [pc, #504]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d05b      	beq.n	8003618 <HAL_RCC_OscConfig+0x108>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d157      	bne.n	8003618 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e242      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003574:	d106      	bne.n	8003584 <HAL_RCC_OscConfig+0x74>
 8003576:	4b76      	ldr	r3, [pc, #472]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a75      	ldr	r2, [pc, #468]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 800357c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	e01d      	b.n	80035c0 <HAL_RCC_OscConfig+0xb0>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800358c:	d10c      	bne.n	80035a8 <HAL_RCC_OscConfig+0x98>
 800358e:	4b70      	ldr	r3, [pc, #448]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a6f      	ldr	r2, [pc, #444]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 8003594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	4b6d      	ldr	r3, [pc, #436]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a6c      	ldr	r2, [pc, #432]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 80035a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	e00b      	b.n	80035c0 <HAL_RCC_OscConfig+0xb0>
 80035a8:	4b69      	ldr	r3, [pc, #420]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a68      	ldr	r2, [pc, #416]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 80035ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b2:	6013      	str	r3, [r2, #0]
 80035b4:	4b66      	ldr	r3, [pc, #408]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a65      	ldr	r2, [pc, #404]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 80035ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d013      	beq.n	80035f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c8:	f7fd fafe 	bl	8000bc8 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d0:	f7fd fafa 	bl	8000bc8 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b64      	cmp	r3, #100	; 0x64
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e207      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e2:	4b5b      	ldr	r3, [pc, #364]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCC_OscConfig+0xc0>
 80035ee:	e014      	b.n	800361a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f0:	f7fd faea 	bl	8000bc8 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f8:	f7fd fae6 	bl	8000bc8 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b64      	cmp	r3, #100	; 0x64
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e1f3      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800360a:	4b51      	ldr	r3, [pc, #324]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f0      	bne.n	80035f8 <HAL_RCC_OscConfig+0xe8>
 8003616:	e000      	b.n	800361a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d063      	beq.n	80036ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003626:	4b4a      	ldr	r3, [pc, #296]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 030c 	and.w	r3, r3, #12
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00b      	beq.n	800364a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003632:	4b47      	ldr	r3, [pc, #284]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800363a:	2b08      	cmp	r3, #8
 800363c:	d11c      	bne.n	8003678 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800363e:	4b44      	ldr	r3, [pc, #272]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d116      	bne.n	8003678 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800364a:	4b41      	ldr	r3, [pc, #260]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d005      	beq.n	8003662 <HAL_RCC_OscConfig+0x152>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d001      	beq.n	8003662 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e1c7      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003662:	4b3b      	ldr	r3, [pc, #236]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	4937      	ldr	r1, [pc, #220]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 8003672:	4313      	orrs	r3, r2
 8003674:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003676:	e03a      	b.n	80036ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d020      	beq.n	80036c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003680:	4b34      	ldr	r3, [pc, #208]	; (8003754 <HAL_RCC_OscConfig+0x244>)
 8003682:	2201      	movs	r2, #1
 8003684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003686:	f7fd fa9f 	bl	8000bc8 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800368e:	f7fd fa9b 	bl	8000bc8 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e1a8      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a0:	4b2b      	ldr	r3, [pc, #172]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0f0      	beq.n	800368e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ac:	4b28      	ldr	r3, [pc, #160]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	4925      	ldr	r1, [pc, #148]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	600b      	str	r3, [r1, #0]
 80036c0:	e015      	b.n	80036ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036c2:	4b24      	ldr	r3, [pc, #144]	; (8003754 <HAL_RCC_OscConfig+0x244>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c8:	f7fd fa7e 	bl	8000bc8 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036d0:	f7fd fa7a 	bl	8000bc8 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e187      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036e2:	4b1b      	ldr	r3, [pc, #108]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f0      	bne.n	80036d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d036      	beq.n	8003768 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d016      	beq.n	8003730 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003702:	4b15      	ldr	r3, [pc, #84]	; (8003758 <HAL_RCC_OscConfig+0x248>)
 8003704:	2201      	movs	r2, #1
 8003706:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003708:	f7fd fa5e 	bl	8000bc8 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003710:	f7fd fa5a 	bl	8000bc8 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e167      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003722:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <HAL_RCC_OscConfig+0x240>)
 8003724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0f0      	beq.n	8003710 <HAL_RCC_OscConfig+0x200>
 800372e:	e01b      	b.n	8003768 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003730:	4b09      	ldr	r3, [pc, #36]	; (8003758 <HAL_RCC_OscConfig+0x248>)
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003736:	f7fd fa47 	bl	8000bc8 <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800373c:	e00e      	b.n	800375c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800373e:	f7fd fa43 	bl	8000bc8 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d907      	bls.n	800375c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e150      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
 8003750:	40023800 	.word	0x40023800
 8003754:	42470000 	.word	0x42470000
 8003758:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800375c:	4b88      	ldr	r3, [pc, #544]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 800375e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1ea      	bne.n	800373e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 8097 	beq.w	80038a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003776:	2300      	movs	r3, #0
 8003778:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800377a:	4b81      	ldr	r3, [pc, #516]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10f      	bne.n	80037a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003786:	2300      	movs	r3, #0
 8003788:	60bb      	str	r3, [r7, #8]
 800378a:	4b7d      	ldr	r3, [pc, #500]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	4a7c      	ldr	r2, [pc, #496]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 8003790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003794:	6413      	str	r3, [r2, #64]	; 0x40
 8003796:	4b7a      	ldr	r3, [pc, #488]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379e:	60bb      	str	r3, [r7, #8]
 80037a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037a2:	2301      	movs	r3, #1
 80037a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a6:	4b77      	ldr	r3, [pc, #476]	; (8003984 <HAL_RCC_OscConfig+0x474>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d118      	bne.n	80037e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037b2:	4b74      	ldr	r3, [pc, #464]	; (8003984 <HAL_RCC_OscConfig+0x474>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a73      	ldr	r2, [pc, #460]	; (8003984 <HAL_RCC_OscConfig+0x474>)
 80037b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037be:	f7fd fa03 	bl	8000bc8 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c6:	f7fd f9ff 	bl	8000bc8 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e10c      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d8:	4b6a      	ldr	r3, [pc, #424]	; (8003984 <HAL_RCC_OscConfig+0x474>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0f0      	beq.n	80037c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d106      	bne.n	80037fa <HAL_RCC_OscConfig+0x2ea>
 80037ec:	4b64      	ldr	r3, [pc, #400]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 80037ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f0:	4a63      	ldr	r2, [pc, #396]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 80037f2:	f043 0301 	orr.w	r3, r3, #1
 80037f6:	6713      	str	r3, [r2, #112]	; 0x70
 80037f8:	e01c      	b.n	8003834 <HAL_RCC_OscConfig+0x324>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	2b05      	cmp	r3, #5
 8003800:	d10c      	bne.n	800381c <HAL_RCC_OscConfig+0x30c>
 8003802:	4b5f      	ldr	r3, [pc, #380]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 8003804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003806:	4a5e      	ldr	r2, [pc, #376]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 8003808:	f043 0304 	orr.w	r3, r3, #4
 800380c:	6713      	str	r3, [r2, #112]	; 0x70
 800380e:	4b5c      	ldr	r3, [pc, #368]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 8003810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003812:	4a5b      	ldr	r2, [pc, #364]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 8003814:	f043 0301 	orr.w	r3, r3, #1
 8003818:	6713      	str	r3, [r2, #112]	; 0x70
 800381a:	e00b      	b.n	8003834 <HAL_RCC_OscConfig+0x324>
 800381c:	4b58      	ldr	r3, [pc, #352]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 800381e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003820:	4a57      	ldr	r2, [pc, #348]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 8003822:	f023 0301 	bic.w	r3, r3, #1
 8003826:	6713      	str	r3, [r2, #112]	; 0x70
 8003828:	4b55      	ldr	r3, [pc, #340]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 800382a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382c:	4a54      	ldr	r2, [pc, #336]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 800382e:	f023 0304 	bic.w	r3, r3, #4
 8003832:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d015      	beq.n	8003868 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383c:	f7fd f9c4 	bl	8000bc8 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003842:	e00a      	b.n	800385a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003844:	f7fd f9c0 	bl	8000bc8 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003852:	4293      	cmp	r3, r2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e0cb      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385a:	4b49      	ldr	r3, [pc, #292]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 800385c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0ee      	beq.n	8003844 <HAL_RCC_OscConfig+0x334>
 8003866:	e014      	b.n	8003892 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003868:	f7fd f9ae 	bl	8000bc8 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800386e:	e00a      	b.n	8003886 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003870:	f7fd f9aa 	bl	8000bc8 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	f241 3288 	movw	r2, #5000	; 0x1388
 800387e:	4293      	cmp	r3, r2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e0b5      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003886:	4b3e      	ldr	r3, [pc, #248]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 8003888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1ee      	bne.n	8003870 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003892:	7dfb      	ldrb	r3, [r7, #23]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d105      	bne.n	80038a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003898:	4b39      	ldr	r3, [pc, #228]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	4a38      	ldr	r2, [pc, #224]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 800389e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 80a1 	beq.w	80039f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038ae:	4b34      	ldr	r3, [pc, #208]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 030c 	and.w	r3, r3, #12
 80038b6:	2b08      	cmp	r3, #8
 80038b8:	d05c      	beq.n	8003974 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d141      	bne.n	8003946 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c2:	4b31      	ldr	r3, [pc, #196]	; (8003988 <HAL_RCC_OscConfig+0x478>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c8:	f7fd f97e 	bl	8000bc8 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d0:	f7fd f97a 	bl	8000bc8 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e087      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e2:	4b27      	ldr	r3, [pc, #156]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f0      	bne.n	80038d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69da      	ldr	r2, [r3, #28]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	431a      	orrs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fc:	019b      	lsls	r3, r3, #6
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003904:	085b      	lsrs	r3, r3, #1
 8003906:	3b01      	subs	r3, #1
 8003908:	041b      	lsls	r3, r3, #16
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003910:	061b      	lsls	r3, r3, #24
 8003912:	491b      	ldr	r1, [pc, #108]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 8003914:	4313      	orrs	r3, r2
 8003916:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003918:	4b1b      	ldr	r3, [pc, #108]	; (8003988 <HAL_RCC_OscConfig+0x478>)
 800391a:	2201      	movs	r2, #1
 800391c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391e:	f7fd f953 	bl	8000bc8 <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003924:	e008      	b.n	8003938 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003926:	f7fd f94f 	bl	8000bc8 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e05c      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003938:	4b11      	ldr	r3, [pc, #68]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0f0      	beq.n	8003926 <HAL_RCC_OscConfig+0x416>
 8003944:	e054      	b.n	80039f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003946:	4b10      	ldr	r3, [pc, #64]	; (8003988 <HAL_RCC_OscConfig+0x478>)
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394c:	f7fd f93c 	bl	8000bc8 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003954:	f7fd f938 	bl	8000bc8 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e045      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003966:	4b06      	ldr	r3, [pc, #24]	; (8003980 <HAL_RCC_OscConfig+0x470>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1f0      	bne.n	8003954 <HAL_RCC_OscConfig+0x444>
 8003972:	e03d      	b.n	80039f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d107      	bne.n	800398c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e038      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
 8003980:	40023800 	.word	0x40023800
 8003984:	40007000 	.word	0x40007000
 8003988:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800398c:	4b1b      	ldr	r3, [pc, #108]	; (80039fc <HAL_RCC_OscConfig+0x4ec>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d028      	beq.n	80039ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d121      	bne.n	80039ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d11a      	bne.n	80039ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039bc:	4013      	ands	r3, r2
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d111      	bne.n	80039ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d2:	085b      	lsrs	r3, r3, #1
 80039d4:	3b01      	subs	r3, #1
 80039d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039d8:	429a      	cmp	r2, r3
 80039da:	d107      	bne.n	80039ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d001      	beq.n	80039f0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e000      	b.n	80039f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3718      	adds	r7, #24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40023800 	.word	0x40023800

08003a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e0cc      	b.n	8003bae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a14:	4b68      	ldr	r3, [pc, #416]	; (8003bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d90c      	bls.n	8003a3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a22:	4b65      	ldr	r3, [pc, #404]	; (8003bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a2a:	4b63      	ldr	r3, [pc, #396]	; (8003bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0307 	and.w	r3, r3, #7
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d001      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e0b8      	b.n	8003bae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d020      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d005      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a54:	4b59      	ldr	r3, [pc, #356]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	4a58      	ldr	r2, [pc, #352]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0308 	and.w	r3, r3, #8
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d005      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a6c:	4b53      	ldr	r3, [pc, #332]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	4a52      	ldr	r2, [pc, #328]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a78:	4b50      	ldr	r3, [pc, #320]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	494d      	ldr	r1, [pc, #308]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d044      	beq.n	8003b20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d107      	bne.n	8003aae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a9e:	4b47      	ldr	r3, [pc, #284]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d119      	bne.n	8003ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e07f      	b.n	8003bae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d003      	beq.n	8003abe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aba:	2b03      	cmp	r3, #3
 8003abc:	d107      	bne.n	8003ace <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003abe:	4b3f      	ldr	r3, [pc, #252]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d109      	bne.n	8003ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e06f      	b.n	8003bae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ace:	4b3b      	ldr	r3, [pc, #236]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e067      	b.n	8003bae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ade:	4b37      	ldr	r3, [pc, #220]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f023 0203 	bic.w	r2, r3, #3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	4934      	ldr	r1, [pc, #208]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003af0:	f7fd f86a 	bl	8000bc8 <HAL_GetTick>
 8003af4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af6:	e00a      	b.n	8003b0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af8:	f7fd f866 	bl	8000bc8 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e04f      	b.n	8003bae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0e:	4b2b      	ldr	r3, [pc, #172]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 020c 	and.w	r2, r3, #12
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d1eb      	bne.n	8003af8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b20:	4b25      	ldr	r3, [pc, #148]	; (8003bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d20c      	bcs.n	8003b48 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b2e:	4b22      	ldr	r3, [pc, #136]	; (8003bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b36:	4b20      	ldr	r3, [pc, #128]	; (8003bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d001      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e032      	b.n	8003bae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d008      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b54:	4b19      	ldr	r3, [pc, #100]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	4916      	ldr	r1, [pc, #88]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d009      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b72:	4b12      	ldr	r3, [pc, #72]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	490e      	ldr	r1, [pc, #56]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b86:	f000 f821 	bl	8003bcc <HAL_RCC_GetSysClockFreq>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	091b      	lsrs	r3, r3, #4
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	490a      	ldr	r1, [pc, #40]	; (8003bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b98:	5ccb      	ldrb	r3, [r1, r3]
 8003b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b9e:	4a09      	ldr	r2, [pc, #36]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003ba2:	4b09      	ldr	r3, [pc, #36]	; (8003bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fc ffca 	bl	8000b40 <HAL_InitTick>

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40023c00 	.word	0x40023c00
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	0800ae24 	.word	0x0800ae24
 8003bc4:	20000000 	.word	0x20000000
 8003bc8:	20000004 	.word	0x20000004

08003bcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bd0:	b094      	sub	sp, #80	; 0x50
 8003bd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003be4:	4b79      	ldr	r3, [pc, #484]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 030c 	and.w	r3, r3, #12
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	d00d      	beq.n	8003c0c <HAL_RCC_GetSysClockFreq+0x40>
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	f200 80e1 	bhi.w	8003db8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d002      	beq.n	8003c00 <HAL_RCC_GetSysClockFreq+0x34>
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d003      	beq.n	8003c06 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bfe:	e0db      	b.n	8003db8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c00:	4b73      	ldr	r3, [pc, #460]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c04:	e0db      	b.n	8003dbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c06:	4b73      	ldr	r3, [pc, #460]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c0a:	e0d8      	b.n	8003dbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c0c:	4b6f      	ldr	r3, [pc, #444]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c14:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c16:	4b6d      	ldr	r3, [pc, #436]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d063      	beq.n	8003cea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c22:	4b6a      	ldr	r3, [pc, #424]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	099b      	lsrs	r3, r3, #6
 8003c28:	2200      	movs	r2, #0
 8003c2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c34:	633b      	str	r3, [r7, #48]	; 0x30
 8003c36:	2300      	movs	r3, #0
 8003c38:	637b      	str	r3, [r7, #52]	; 0x34
 8003c3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c3e:	4622      	mov	r2, r4
 8003c40:	462b      	mov	r3, r5
 8003c42:	f04f 0000 	mov.w	r0, #0
 8003c46:	f04f 0100 	mov.w	r1, #0
 8003c4a:	0159      	lsls	r1, r3, #5
 8003c4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c50:	0150      	lsls	r0, r2, #5
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	4621      	mov	r1, r4
 8003c58:	1a51      	subs	r1, r2, r1
 8003c5a:	6139      	str	r1, [r7, #16]
 8003c5c:	4629      	mov	r1, r5
 8003c5e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c70:	4659      	mov	r1, fp
 8003c72:	018b      	lsls	r3, r1, #6
 8003c74:	4651      	mov	r1, sl
 8003c76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c7a:	4651      	mov	r1, sl
 8003c7c:	018a      	lsls	r2, r1, #6
 8003c7e:	4651      	mov	r1, sl
 8003c80:	ebb2 0801 	subs.w	r8, r2, r1
 8003c84:	4659      	mov	r1, fp
 8003c86:	eb63 0901 	sbc.w	r9, r3, r1
 8003c8a:	f04f 0200 	mov.w	r2, #0
 8003c8e:	f04f 0300 	mov.w	r3, #0
 8003c92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c9e:	4690      	mov	r8, r2
 8003ca0:	4699      	mov	r9, r3
 8003ca2:	4623      	mov	r3, r4
 8003ca4:	eb18 0303 	adds.w	r3, r8, r3
 8003ca8:	60bb      	str	r3, [r7, #8]
 8003caa:	462b      	mov	r3, r5
 8003cac:	eb49 0303 	adc.w	r3, r9, r3
 8003cb0:	60fb      	str	r3, [r7, #12]
 8003cb2:	f04f 0200 	mov.w	r2, #0
 8003cb6:	f04f 0300 	mov.w	r3, #0
 8003cba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003cbe:	4629      	mov	r1, r5
 8003cc0:	024b      	lsls	r3, r1, #9
 8003cc2:	4621      	mov	r1, r4
 8003cc4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cc8:	4621      	mov	r1, r4
 8003cca:	024a      	lsls	r2, r1, #9
 8003ccc:	4610      	mov	r0, r2
 8003cce:	4619      	mov	r1, r3
 8003cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cdc:	f7fc fac8 	bl	8000270 <__aeabi_uldivmod>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ce8:	e058      	b.n	8003d9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cea:	4b38      	ldr	r3, [pc, #224]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	099b      	lsrs	r3, r3, #6
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	4611      	mov	r1, r2
 8003cf6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cfa:	623b      	str	r3, [r7, #32]
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8003d00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d04:	4642      	mov	r2, r8
 8003d06:	464b      	mov	r3, r9
 8003d08:	f04f 0000 	mov.w	r0, #0
 8003d0c:	f04f 0100 	mov.w	r1, #0
 8003d10:	0159      	lsls	r1, r3, #5
 8003d12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d16:	0150      	lsls	r0, r2, #5
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4641      	mov	r1, r8
 8003d1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d22:	4649      	mov	r1, r9
 8003d24:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d28:	f04f 0200 	mov.w	r2, #0
 8003d2c:	f04f 0300 	mov.w	r3, #0
 8003d30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d3c:	ebb2 040a 	subs.w	r4, r2, sl
 8003d40:	eb63 050b 	sbc.w	r5, r3, fp
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	00eb      	lsls	r3, r5, #3
 8003d4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d52:	00e2      	lsls	r2, r4, #3
 8003d54:	4614      	mov	r4, r2
 8003d56:	461d      	mov	r5, r3
 8003d58:	4643      	mov	r3, r8
 8003d5a:	18e3      	adds	r3, r4, r3
 8003d5c:	603b      	str	r3, [r7, #0]
 8003d5e:	464b      	mov	r3, r9
 8003d60:	eb45 0303 	adc.w	r3, r5, r3
 8003d64:	607b      	str	r3, [r7, #4]
 8003d66:	f04f 0200 	mov.w	r2, #0
 8003d6a:	f04f 0300 	mov.w	r3, #0
 8003d6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d72:	4629      	mov	r1, r5
 8003d74:	028b      	lsls	r3, r1, #10
 8003d76:	4621      	mov	r1, r4
 8003d78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d7c:	4621      	mov	r1, r4
 8003d7e:	028a      	lsls	r2, r1, #10
 8003d80:	4610      	mov	r0, r2
 8003d82:	4619      	mov	r1, r3
 8003d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d86:	2200      	movs	r2, #0
 8003d88:	61bb      	str	r3, [r7, #24]
 8003d8a:	61fa      	str	r2, [r7, #28]
 8003d8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d90:	f7fc fa6e 	bl	8000270 <__aeabi_uldivmod>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4613      	mov	r3, r2
 8003d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	0c1b      	lsrs	r3, r3, #16
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	3301      	adds	r3, #1
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003dac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003dae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003db6:	e002      	b.n	8003dbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003db8:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3750      	adds	r7, #80	; 0x50
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dca:	bf00      	nop
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	00f42400 	.word	0x00f42400
 8003dd4:	007a1200 	.word	0x007a1200

08003dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ddc:	4b03      	ldr	r3, [pc, #12]	; (8003dec <HAL_RCC_GetHCLKFreq+0x14>)
 8003dde:	681b      	ldr	r3, [r3, #0]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	20000000 	.word	0x20000000

08003df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003df4:	f7ff fff0 	bl	8003dd8 <HAL_RCC_GetHCLKFreq>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	0a9b      	lsrs	r3, r3, #10
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	4903      	ldr	r1, [pc, #12]	; (8003e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e06:	5ccb      	ldrb	r3, [r1, r3]
 8003e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40023800 	.word	0x40023800
 8003e14:	0800ae34 	.word	0x0800ae34

08003e18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e1c:	f7ff ffdc 	bl	8003dd8 <HAL_RCC_GetHCLKFreq>
 8003e20:	4602      	mov	r2, r0
 8003e22:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	0b5b      	lsrs	r3, r3, #13
 8003e28:	f003 0307 	and.w	r3, r3, #7
 8003e2c:	4903      	ldr	r1, [pc, #12]	; (8003e3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e2e:	5ccb      	ldrb	r3, [r1, r3]
 8003e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	0800ae34 	.word	0x0800ae34

08003e40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e042      	b.n	8003ed8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d106      	bne.n	8003e6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7fc fce2 	bl	8000830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2224      	movs	r2, #36	; 0x24
 8003e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 fd7f 	bl	8004988 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	691a      	ldr	r2, [r3, #16]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695a      	ldr	r2, [r3, #20]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ea8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68da      	ldr	r2, [r3, #12]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003eb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b08a      	sub	sp, #40	; 0x28
 8003ee4:	af02      	add	r7, sp, #8
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	603b      	str	r3, [r7, #0]
 8003eec:	4613      	mov	r3, r2
 8003eee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b20      	cmp	r3, #32
 8003efe:	d175      	bne.n	8003fec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <HAL_UART_Transmit+0x2c>
 8003f06:	88fb      	ldrh	r3, [r7, #6]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e06e      	b.n	8003fee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2221      	movs	r2, #33	; 0x21
 8003f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f1e:	f7fc fe53 	bl	8000bc8 <HAL_GetTick>
 8003f22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	88fa      	ldrh	r2, [r7, #6]
 8003f28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	88fa      	ldrh	r2, [r7, #6]
 8003f2e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f38:	d108      	bne.n	8003f4c <HAL_UART_Transmit+0x6c>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d104      	bne.n	8003f4c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f42:	2300      	movs	r3, #0
 8003f44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	61bb      	str	r3, [r7, #24]
 8003f4a:	e003      	b.n	8003f54 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f50:	2300      	movs	r3, #0
 8003f52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f54:	e02e      	b.n	8003fb4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	2180      	movs	r1, #128	; 0x80
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 fb1d 	bl	80045a0 <UART_WaitOnFlagUntilTimeout>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d005      	beq.n	8003f78 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e03a      	b.n	8003fee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10b      	bne.n	8003f96 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	881b      	ldrh	r3, [r3, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	3302      	adds	r3, #2
 8003f92:	61bb      	str	r3, [r7, #24]
 8003f94:	e007      	b.n	8003fa6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	781a      	ldrb	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1cb      	bne.n	8003f56 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2140      	movs	r1, #64	; 0x40
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 fae9 	bl	80045a0 <UART_WaitOnFlagUntilTimeout>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d005      	beq.n	8003fe0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e006      	b.n	8003fee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	e000      	b.n	8003fee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003fec:	2302      	movs	r3, #2
  }
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3720      	adds	r7, #32
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
	...

08003ff8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b0ba      	sub	sp, #232	; 0xe8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800401e:	2300      	movs	r3, #0
 8004020:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004024:	2300      	movs	r3, #0
 8004026:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800402a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800402e:	f003 030f 	and.w	r3, r3, #15
 8004032:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004036:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10f      	bne.n	800405e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800403e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004042:	f003 0320 	and.w	r3, r3, #32
 8004046:	2b00      	cmp	r3, #0
 8004048:	d009      	beq.n	800405e <HAL_UART_IRQHandler+0x66>
 800404a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800404e:	f003 0320 	and.w	r3, r3, #32
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 fbd7 	bl	800480a <UART_Receive_IT>
      return;
 800405c:	e273      	b.n	8004546 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800405e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 80de 	beq.w	8004224 <HAL_UART_IRQHandler+0x22c>
 8004068:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b00      	cmp	r3, #0
 8004072:	d106      	bne.n	8004082 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004078:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 80d1 	beq.w	8004224 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00b      	beq.n	80040a6 <HAL_UART_IRQHandler+0xae>
 800408e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004096:	2b00      	cmp	r3, #0
 8004098:	d005      	beq.n	80040a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409e:	f043 0201 	orr.w	r2, r3, #1
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040aa:	f003 0304 	and.w	r3, r3, #4
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00b      	beq.n	80040ca <HAL_UART_IRQHandler+0xd2>
 80040b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d005      	beq.n	80040ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c2:	f043 0202 	orr.w	r2, r3, #2
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00b      	beq.n	80040ee <HAL_UART_IRQHandler+0xf6>
 80040d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d005      	beq.n	80040ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e6:	f043 0204 	orr.w	r2, r3, #4
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80040ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d011      	beq.n	800411e <HAL_UART_IRQHandler+0x126>
 80040fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040fe:	f003 0320 	and.w	r3, r3, #32
 8004102:	2b00      	cmp	r3, #0
 8004104:	d105      	bne.n	8004112 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004106:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d005      	beq.n	800411e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004116:	f043 0208 	orr.w	r2, r3, #8
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 820a 	beq.w	800453c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800412c:	f003 0320 	and.w	r3, r3, #32
 8004130:	2b00      	cmp	r3, #0
 8004132:	d008      	beq.n	8004146 <HAL_UART_IRQHandler+0x14e>
 8004134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004138:	f003 0320 	and.w	r3, r3, #32
 800413c:	2b00      	cmp	r3, #0
 800413e:	d002      	beq.n	8004146 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 fb62 	bl	800480a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004150:	2b40      	cmp	r3, #64	; 0x40
 8004152:	bf0c      	ite	eq
 8004154:	2301      	moveq	r3, #1
 8004156:	2300      	movne	r3, #0
 8004158:	b2db      	uxtb	r3, r3
 800415a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004162:	f003 0308 	and.w	r3, r3, #8
 8004166:	2b00      	cmp	r3, #0
 8004168:	d103      	bne.n	8004172 <HAL_UART_IRQHandler+0x17a>
 800416a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800416e:	2b00      	cmp	r3, #0
 8004170:	d04f      	beq.n	8004212 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 fa6d 	bl	8004652 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004182:	2b40      	cmp	r3, #64	; 0x40
 8004184:	d141      	bne.n	800420a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3314      	adds	r3, #20
 800418c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004190:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004194:	e853 3f00 	ldrex	r3, [r3]
 8004198:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800419c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3314      	adds	r3, #20
 80041ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80041b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80041b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80041be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80041c2:	e841 2300 	strex	r3, r2, [r1]
 80041c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80041ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1d9      	bne.n	8004186 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d013      	beq.n	8004202 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041de:	4a8a      	ldr	r2, [pc, #552]	; (8004408 <HAL_UART_IRQHandler+0x410>)
 80041e0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fc fe9f 	bl	8000f2a <HAL_DMA_Abort_IT>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d016      	beq.n	8004220 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80041fc:	4610      	mov	r0, r2
 80041fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004200:	e00e      	b.n	8004220 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f9b6 	bl	8004574 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004208:	e00a      	b.n	8004220 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f9b2 	bl	8004574 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004210:	e006      	b.n	8004220 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f9ae 	bl	8004574 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800421e:	e18d      	b.n	800453c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004220:	bf00      	nop
    return;
 8004222:	e18b      	b.n	800453c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004228:	2b01      	cmp	r3, #1
 800422a:	f040 8167 	bne.w	80044fc <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800422e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004232:	f003 0310 	and.w	r3, r3, #16
 8004236:	2b00      	cmp	r3, #0
 8004238:	f000 8160 	beq.w	80044fc <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800423c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004240:	f003 0310 	and.w	r3, r3, #16
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 8159 	beq.w	80044fc <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800424a:	2300      	movs	r3, #0
 800424c:	60bb      	str	r3, [r7, #8]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	60bb      	str	r3, [r7, #8]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	60bb      	str	r3, [r7, #8]
 800425e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800426a:	2b40      	cmp	r3, #64	; 0x40
 800426c:	f040 80ce 	bne.w	800440c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800427c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 80a9 	beq.w	80043d8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800428a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800428e:	429a      	cmp	r2, r3
 8004290:	f080 80a2 	bcs.w	80043d8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800429a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042a6:	f000 8088 	beq.w	80043ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	330c      	adds	r3, #12
 80042b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042b8:	e853 3f00 	ldrex	r3, [r3]
 80042bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80042c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	330c      	adds	r3, #12
 80042d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80042d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80042e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80042e6:	e841 2300 	strex	r3, r2, [r1]
 80042ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80042ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1d9      	bne.n	80042aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	3314      	adds	r3, #20
 80042fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004300:	e853 3f00 	ldrex	r3, [r3]
 8004304:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004306:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004308:	f023 0301 	bic.w	r3, r3, #1
 800430c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	3314      	adds	r3, #20
 8004316:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800431a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800431e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004320:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004322:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004326:	e841 2300 	strex	r3, r2, [r1]
 800432a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800432c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1e1      	bne.n	80042f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	3314      	adds	r3, #20
 8004338:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800433c:	e853 3f00 	ldrex	r3, [r3]
 8004340:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004348:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	3314      	adds	r3, #20
 8004352:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004356:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004358:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800435c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800435e:	e841 2300 	strex	r3, r2, [r1]
 8004362:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004364:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1e3      	bne.n	8004332 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2220      	movs	r2, #32
 800436e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	330c      	adds	r3, #12
 800437e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004382:	e853 3f00 	ldrex	r3, [r3]
 8004386:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004388:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800438a:	f023 0310 	bic.w	r3, r3, #16
 800438e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	330c      	adds	r3, #12
 8004398:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800439c:	65ba      	str	r2, [r7, #88]	; 0x58
 800439e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80043a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043a4:	e841 2300 	strex	r3, r2, [r1]
 80043a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80043aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1e3      	bne.n	8004378 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fc fd48 	bl	8000e4a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2202      	movs	r2, #2
 80043be:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	4619      	mov	r1, r3
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 f8d9 	bl	8004588 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80043d6:	e0b3      	b.n	8004540 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043e0:	429a      	cmp	r2, r3
 80043e2:	f040 80ad 	bne.w	8004540 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ea:	69db      	ldr	r3, [r3, #28]
 80043ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043f0:	f040 80a6 	bne.w	8004540 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	635a      	str	r2, [r3, #52]	; 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043fe:	4619      	mov	r1, r3
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f8c1 	bl	8004588 <HAL_UARTEx_RxEventCallback>
      return;
 8004406:	e09b      	b.n	8004540 <HAL_UART_IRQHandler+0x548>
 8004408:	08004719 	.word	0x08004719
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004414:	b29b      	uxth	r3, r3
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004420:	b29b      	uxth	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 808e 	beq.w	8004544 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004428:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 8089 	beq.w	8004544 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	330c      	adds	r3, #12
 8004438:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443c:	e853 3f00 	ldrex	r3, [r3]
 8004440:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004444:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004448:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	330c      	adds	r3, #12
 8004452:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004456:	647a      	str	r2, [r7, #68]	; 0x44
 8004458:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800445c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800445e:	e841 2300 	strex	r3, r2, [r1]
 8004462:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1e3      	bne.n	8004432 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	3314      	adds	r3, #20
 8004470:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	e853 3f00 	ldrex	r3, [r3]
 8004478:	623b      	str	r3, [r7, #32]
   return(result);
 800447a:	6a3b      	ldr	r3, [r7, #32]
 800447c:	f023 0301 	bic.w	r3, r3, #1
 8004480:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	3314      	adds	r3, #20
 800448a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800448e:	633a      	str	r2, [r7, #48]	; 0x30
 8004490:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004492:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004496:	e841 2300 	strex	r3, r2, [r1]
 800449a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800449c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1e3      	bne.n	800446a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2220      	movs	r2, #32
 80044a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	330c      	adds	r3, #12
 80044b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	e853 3f00 	ldrex	r3, [r3]
 80044be:	60fb      	str	r3, [r7, #12]
   return(result);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f023 0310 	bic.w	r3, r3, #16
 80044c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	330c      	adds	r3, #12
 80044d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80044d4:	61fa      	str	r2, [r7, #28]
 80044d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d8:	69b9      	ldr	r1, [r7, #24]
 80044da:	69fa      	ldr	r2, [r7, #28]
 80044dc:	e841 2300 	strex	r3, r2, [r1]
 80044e0:	617b      	str	r3, [r7, #20]
   return(result);
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1e3      	bne.n	80044b0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2202      	movs	r2, #2
 80044ec:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044f2:	4619      	mov	r1, r3
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f847 	bl	8004588 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044fa:	e023      	b.n	8004544 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004504:	2b00      	cmp	r3, #0
 8004506:	d009      	beq.n	800451c <HAL_UART_IRQHandler+0x524>
 8004508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800450c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004510:	2b00      	cmp	r3, #0
 8004512:	d003      	beq.n	800451c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f910 	bl	800473a <UART_Transmit_IT>
    return;
 800451a:	e014      	b.n	8004546 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800451c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00e      	beq.n	8004546 <HAL_UART_IRQHandler+0x54e>
 8004528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800452c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004530:	2b00      	cmp	r3, #0
 8004532:	d008      	beq.n	8004546 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f950 	bl	80047da <UART_EndTransmit_IT>
    return;
 800453a:	e004      	b.n	8004546 <HAL_UART_IRQHandler+0x54e>
    return;
 800453c:	bf00      	nop
 800453e:	e002      	b.n	8004546 <HAL_UART_IRQHandler+0x54e>
      return;
 8004540:	bf00      	nop
 8004542:	e000      	b.n	8004546 <HAL_UART_IRQHandler+0x54e>
      return;
 8004544:	bf00      	nop
  }
}
 8004546:	37e8      	adds	r7, #232	; 0xe8
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	460b      	mov	r3, r1
 8004592:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	603b      	str	r3, [r7, #0]
 80045ac:	4613      	mov	r3, r2
 80045ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045b0:	e03b      	b.n	800462a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b2:	6a3b      	ldr	r3, [r7, #32]
 80045b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b8:	d037      	beq.n	800462a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ba:	f7fc fb05 	bl	8000bc8 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	6a3a      	ldr	r2, [r7, #32]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d302      	bcc.n	80045d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e03a      	b.n	800464a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	f003 0304 	and.w	r3, r3, #4
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d023      	beq.n	800462a <UART_WaitOnFlagUntilTimeout+0x8a>
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2b80      	cmp	r3, #128	; 0x80
 80045e6:	d020      	beq.n	800462a <UART_WaitOnFlagUntilTimeout+0x8a>
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2b40      	cmp	r3, #64	; 0x40
 80045ec:	d01d      	beq.n	800462a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0308 	and.w	r3, r3, #8
 80045f8:	2b08      	cmp	r3, #8
 80045fa:	d116      	bne.n	800462a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	617b      	str	r3, [r7, #20]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	617b      	str	r3, [r7, #20]
 8004610:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 f81d 	bl	8004652 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2208      	movs	r2, #8
 800461c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e00f      	b.n	800464a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	4013      	ands	r3, r2
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	429a      	cmp	r2, r3
 8004638:	bf0c      	ite	eq
 800463a:	2301      	moveq	r3, #1
 800463c:	2300      	movne	r3, #0
 800463e:	b2db      	uxtb	r3, r3
 8004640:	461a      	mov	r2, r3
 8004642:	79fb      	ldrb	r3, [r7, #7]
 8004644:	429a      	cmp	r2, r3
 8004646:	d0b4      	beq.n	80045b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3718      	adds	r7, #24
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004652:	b480      	push	{r7}
 8004654:	b095      	sub	sp, #84	; 0x54
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	330c      	adds	r3, #12
 8004660:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004664:	e853 3f00 	ldrex	r3, [r3]
 8004668:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800466a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004670:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	330c      	adds	r3, #12
 8004678:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800467a:	643a      	str	r2, [r7, #64]	; 0x40
 800467c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004680:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004682:	e841 2300 	strex	r3, r2, [r1]
 8004686:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1e5      	bne.n	800465a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3314      	adds	r3, #20
 8004694:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	e853 3f00 	ldrex	r3, [r3]
 800469c:	61fb      	str	r3, [r7, #28]
   return(result);
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	f023 0301 	bic.w	r3, r3, #1
 80046a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	3314      	adds	r3, #20
 80046ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046b6:	e841 2300 	strex	r3, r2, [r1]
 80046ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1e5      	bne.n	800468e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d119      	bne.n	80046fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	330c      	adds	r3, #12
 80046d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	e853 3f00 	ldrex	r3, [r3]
 80046d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	f023 0310 	bic.w	r3, r3, #16
 80046e0:	647b      	str	r3, [r7, #68]	; 0x44
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	330c      	adds	r3, #12
 80046e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046ea:	61ba      	str	r2, [r7, #24]
 80046ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ee:	6979      	ldr	r1, [r7, #20]
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	e841 2300 	strex	r3, r2, [r1]
 80046f6:	613b      	str	r3, [r7, #16]
   return(result);
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1e5      	bne.n	80046ca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2220      	movs	r2, #32
 8004702:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800470c:	bf00      	nop
 800470e:	3754      	adds	r7, #84	; 0x54
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004724:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f7ff ff21 	bl	8004574 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004732:	bf00      	nop
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800473a:	b480      	push	{r7}
 800473c:	b085      	sub	sp, #20
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b21      	cmp	r3, #33	; 0x21
 800474c:	d13e      	bne.n	80047cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004756:	d114      	bne.n	8004782 <UART_Transmit_IT+0x48>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d110      	bne.n	8004782 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	461a      	mov	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004774:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	1c9a      	adds	r2, r3, #2
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	621a      	str	r2, [r3, #32]
 8004780:	e008      	b.n	8004794 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	1c59      	adds	r1, r3, #1
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6211      	str	r1, [r2, #32]
 800478c:	781a      	ldrb	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004798:	b29b      	uxth	r3, r3
 800479a:	3b01      	subs	r3, #1
 800479c:	b29b      	uxth	r3, r3
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	4619      	mov	r1, r3
 80047a2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10f      	bne.n	80047c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68da      	ldr	r2, [r3, #12]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68da      	ldr	r2, [r3, #12]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047c8:	2300      	movs	r3, #0
 80047ca:	e000      	b.n	80047ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047cc:	2302      	movs	r3, #2
  }
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr

080047da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b082      	sub	sp, #8
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68da      	ldr	r2, [r3, #12]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7ff fea6 	bl	800454c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b08c      	sub	sp, #48	; 0x30
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004812:	2300      	movs	r3, #0
 8004814:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t *pdata16bits = NULL;
 8004816:	2300      	movs	r3, #0
 8004818:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b22      	cmp	r3, #34	; 0x22
 8004824:	f040 80aa 	bne.w	800497c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004830:	d115      	bne.n	800485e <UART_Receive_IT+0x54>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d111      	bne.n	800485e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	b29b      	uxth	r3, r3
 8004848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800484c:	b29a      	uxth	r2, r3
 800484e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004850:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004856:	1c9a      	adds	r2, r3, #2
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	629a      	str	r2, [r3, #40]	; 0x28
 800485c:	e024      	b.n	80048a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004862:	62fb      	str	r3, [r7, #44]	; 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800486c:	d007      	beq.n	800487e <UART_Receive_IT+0x74>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10a      	bne.n	800488c <UART_Receive_IT+0x82>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d106      	bne.n	800488c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	b2da      	uxtb	r2, r3
 8004886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004888:	701a      	strb	r2, [r3, #0]
 800488a:	e008      	b.n	800489e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	b2db      	uxtb	r3, r3
 8004894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004898:	b2da      	uxtb	r2, r3
 800489a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a2:	1c5a      	adds	r2, r3, #1
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	3b01      	subs	r3, #1
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	4619      	mov	r1, r3
 80048b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d15d      	bne.n	8004978 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0220 	bic.w	r2, r2, #32
 80048ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68da      	ldr	r2, [r3, #12]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695a      	ldr	r2, [r3, #20]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0201 	bic.w	r2, r2, #1
 80048ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2220      	movs	r2, #32
 80048f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d135      	bne.n	800496e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	330c      	adds	r3, #12
 800490e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	e853 3f00 	ldrex	r3, [r3]
 8004916:	613b      	str	r3, [r7, #16]
   return(result);
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	f023 0310 	bic.w	r3, r3, #16
 800491e:	627b      	str	r3, [r7, #36]	; 0x24
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	330c      	adds	r3, #12
 8004926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004928:	623a      	str	r2, [r7, #32]
 800492a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492c:	69f9      	ldr	r1, [r7, #28]
 800492e:	6a3a      	ldr	r2, [r7, #32]
 8004930:	e841 2300 	strex	r3, r2, [r1]
 8004934:	61bb      	str	r3, [r7, #24]
   return(result);
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1e5      	bne.n	8004908 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0310 	and.w	r3, r3, #16
 8004946:	2b10      	cmp	r3, #16
 8004948:	d10a      	bne.n	8004960 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800494a:	2300      	movs	r3, #0
 800494c:	60fb      	str	r3, [r7, #12]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	60fb      	str	r3, [r7, #12]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	60fb      	str	r3, [r7, #12]
 800495e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004964:	4619      	mov	r1, r3
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7ff fe0e 	bl	8004588 <HAL_UARTEx_RxEventCallback>
 800496c:	e002      	b.n	8004974 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7ff fdf6 	bl	8004560 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004974:	2300      	movs	r3, #0
 8004976:	e002      	b.n	800497e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004978:	2300      	movs	r3, #0
 800497a:	e000      	b.n	800497e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800497c:	2302      	movs	r3, #2
  }
}
 800497e:	4618      	mov	r0, r3
 8004980:	3730      	adds	r7, #48	; 0x30
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800498c:	b0c0      	sub	sp, #256	; 0x100
 800498e:	af00      	add	r7, sp, #0
 8004990:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a4:	68d9      	ldr	r1, [r3, #12]
 80049a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	ea40 0301 	orr.w	r3, r0, r1
 80049b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	431a      	orrs	r2, r3
 80049c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	431a      	orrs	r2, r3
 80049c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049e0:	f021 010c 	bic.w	r1, r1, #12
 80049e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049ee:	430b      	orrs	r3, r1
 80049f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80049fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a02:	6999      	ldr	r1, [r3, #24]
 8004a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	ea40 0301 	orr.w	r3, r0, r1
 8004a0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	4b8f      	ldr	r3, [pc, #572]	; (8004c54 <UART_SetConfig+0x2cc>)
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d005      	beq.n	8004a28 <UART_SetConfig+0xa0>
 8004a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	4b8d      	ldr	r3, [pc, #564]	; (8004c58 <UART_SetConfig+0x2d0>)
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d104      	bne.n	8004a32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a28:	f7ff f9f6 	bl	8003e18 <HAL_RCC_GetPCLK2Freq>
 8004a2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a30:	e003      	b.n	8004a3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a32:	f7ff f9dd 	bl	8003df0 <HAL_RCC_GetPCLK1Freq>
 8004a36:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a44:	f040 810c 	bne.w	8004c60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a5a:	4622      	mov	r2, r4
 8004a5c:	462b      	mov	r3, r5
 8004a5e:	1891      	adds	r1, r2, r2
 8004a60:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a62:	415b      	adcs	r3, r3
 8004a64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a6a:	4621      	mov	r1, r4
 8004a6c:	eb12 0801 	adds.w	r8, r2, r1
 8004a70:	4629      	mov	r1, r5
 8004a72:	eb43 0901 	adc.w	r9, r3, r1
 8004a76:	f04f 0200 	mov.w	r2, #0
 8004a7a:	f04f 0300 	mov.w	r3, #0
 8004a7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a8a:	4690      	mov	r8, r2
 8004a8c:	4699      	mov	r9, r3
 8004a8e:	4623      	mov	r3, r4
 8004a90:	eb18 0303 	adds.w	r3, r8, r3
 8004a94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a98:	462b      	mov	r3, r5
 8004a9a:	eb49 0303 	adc.w	r3, r9, r3
 8004a9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004aae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004ab2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	18db      	adds	r3, r3, r3
 8004aba:	653b      	str	r3, [r7, #80]	; 0x50
 8004abc:	4613      	mov	r3, r2
 8004abe:	eb42 0303 	adc.w	r3, r2, r3
 8004ac2:	657b      	str	r3, [r7, #84]	; 0x54
 8004ac4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ac8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004acc:	f7fb fbd0 	bl	8000270 <__aeabi_uldivmod>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4b61      	ldr	r3, [pc, #388]	; (8004c5c <UART_SetConfig+0x2d4>)
 8004ad6:	fba3 2302 	umull	r2, r3, r3, r2
 8004ada:	095b      	lsrs	r3, r3, #5
 8004adc:	011c      	lsls	r4, r3, #4
 8004ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ae8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004aec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004af0:	4642      	mov	r2, r8
 8004af2:	464b      	mov	r3, r9
 8004af4:	1891      	adds	r1, r2, r2
 8004af6:	64b9      	str	r1, [r7, #72]	; 0x48
 8004af8:	415b      	adcs	r3, r3
 8004afa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004afc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b00:	4641      	mov	r1, r8
 8004b02:	eb12 0a01 	adds.w	sl, r2, r1
 8004b06:	4649      	mov	r1, r9
 8004b08:	eb43 0b01 	adc.w	fp, r3, r1
 8004b0c:	f04f 0200 	mov.w	r2, #0
 8004b10:	f04f 0300 	mov.w	r3, #0
 8004b14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b20:	4692      	mov	sl, r2
 8004b22:	469b      	mov	fp, r3
 8004b24:	4643      	mov	r3, r8
 8004b26:	eb1a 0303 	adds.w	r3, sl, r3
 8004b2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b2e:	464b      	mov	r3, r9
 8004b30:	eb4b 0303 	adc.w	r3, fp, r3
 8004b34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	18db      	adds	r3, r3, r3
 8004b50:	643b      	str	r3, [r7, #64]	; 0x40
 8004b52:	4613      	mov	r3, r2
 8004b54:	eb42 0303 	adc.w	r3, r2, r3
 8004b58:	647b      	str	r3, [r7, #68]	; 0x44
 8004b5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b62:	f7fb fb85 	bl	8000270 <__aeabi_uldivmod>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	4b3b      	ldr	r3, [pc, #236]	; (8004c5c <UART_SetConfig+0x2d4>)
 8004b6e:	fba3 2301 	umull	r2, r3, r3, r1
 8004b72:	095b      	lsrs	r3, r3, #5
 8004b74:	2264      	movs	r2, #100	; 0x64
 8004b76:	fb02 f303 	mul.w	r3, r2, r3
 8004b7a:	1acb      	subs	r3, r1, r3
 8004b7c:	00db      	lsls	r3, r3, #3
 8004b7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b82:	4b36      	ldr	r3, [pc, #216]	; (8004c5c <UART_SetConfig+0x2d4>)
 8004b84:	fba3 2302 	umull	r2, r3, r3, r2
 8004b88:	095b      	lsrs	r3, r3, #5
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b90:	441c      	add	r4, r3
 8004b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b96:	2200      	movs	r2, #0
 8004b98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ba0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ba4:	4642      	mov	r2, r8
 8004ba6:	464b      	mov	r3, r9
 8004ba8:	1891      	adds	r1, r2, r2
 8004baa:	63b9      	str	r1, [r7, #56]	; 0x38
 8004bac:	415b      	adcs	r3, r3
 8004bae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004bb4:	4641      	mov	r1, r8
 8004bb6:	1851      	adds	r1, r2, r1
 8004bb8:	6339      	str	r1, [r7, #48]	; 0x30
 8004bba:	4649      	mov	r1, r9
 8004bbc:	414b      	adcs	r3, r1
 8004bbe:	637b      	str	r3, [r7, #52]	; 0x34
 8004bc0:	f04f 0200 	mov.w	r2, #0
 8004bc4:	f04f 0300 	mov.w	r3, #0
 8004bc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004bcc:	4659      	mov	r1, fp
 8004bce:	00cb      	lsls	r3, r1, #3
 8004bd0:	4651      	mov	r1, sl
 8004bd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bd6:	4651      	mov	r1, sl
 8004bd8:	00ca      	lsls	r2, r1, #3
 8004bda:	4610      	mov	r0, r2
 8004bdc:	4619      	mov	r1, r3
 8004bde:	4603      	mov	r3, r0
 8004be0:	4642      	mov	r2, r8
 8004be2:	189b      	adds	r3, r3, r2
 8004be4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004be8:	464b      	mov	r3, r9
 8004bea:	460a      	mov	r2, r1
 8004bec:	eb42 0303 	adc.w	r3, r2, r3
 8004bf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c00:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c08:	460b      	mov	r3, r1
 8004c0a:	18db      	adds	r3, r3, r3
 8004c0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c0e:	4613      	mov	r3, r2
 8004c10:	eb42 0303 	adc.w	r3, r2, r3
 8004c14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c1e:	f7fb fb27 	bl	8000270 <__aeabi_uldivmod>
 8004c22:	4602      	mov	r2, r0
 8004c24:	460b      	mov	r3, r1
 8004c26:	4b0d      	ldr	r3, [pc, #52]	; (8004c5c <UART_SetConfig+0x2d4>)
 8004c28:	fba3 1302 	umull	r1, r3, r3, r2
 8004c2c:	095b      	lsrs	r3, r3, #5
 8004c2e:	2164      	movs	r1, #100	; 0x64
 8004c30:	fb01 f303 	mul.w	r3, r1, r3
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	00db      	lsls	r3, r3, #3
 8004c38:	3332      	adds	r3, #50	; 0x32
 8004c3a:	4a08      	ldr	r2, [pc, #32]	; (8004c5c <UART_SetConfig+0x2d4>)
 8004c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c40:	095b      	lsrs	r3, r3, #5
 8004c42:	f003 0207 	and.w	r2, r3, #7
 8004c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4422      	add	r2, r4
 8004c4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c50:	e106      	b.n	8004e60 <UART_SetConfig+0x4d8>
 8004c52:	bf00      	nop
 8004c54:	40011000 	.word	0x40011000
 8004c58:	40011400 	.word	0x40011400
 8004c5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c64:	2200      	movs	r2, #0
 8004c66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c6a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c72:	4642      	mov	r2, r8
 8004c74:	464b      	mov	r3, r9
 8004c76:	1891      	adds	r1, r2, r2
 8004c78:	6239      	str	r1, [r7, #32]
 8004c7a:	415b      	adcs	r3, r3
 8004c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c82:	4641      	mov	r1, r8
 8004c84:	1854      	adds	r4, r2, r1
 8004c86:	4649      	mov	r1, r9
 8004c88:	eb43 0501 	adc.w	r5, r3, r1
 8004c8c:	f04f 0200 	mov.w	r2, #0
 8004c90:	f04f 0300 	mov.w	r3, #0
 8004c94:	00eb      	lsls	r3, r5, #3
 8004c96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c9a:	00e2      	lsls	r2, r4, #3
 8004c9c:	4614      	mov	r4, r2
 8004c9e:	461d      	mov	r5, r3
 8004ca0:	4643      	mov	r3, r8
 8004ca2:	18e3      	adds	r3, r4, r3
 8004ca4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ca8:	464b      	mov	r3, r9
 8004caa:	eb45 0303 	adc.w	r3, r5, r3
 8004cae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004cbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cc2:	f04f 0200 	mov.w	r2, #0
 8004cc6:	f04f 0300 	mov.w	r3, #0
 8004cca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004cce:	4629      	mov	r1, r5
 8004cd0:	008b      	lsls	r3, r1, #2
 8004cd2:	4621      	mov	r1, r4
 8004cd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cd8:	4621      	mov	r1, r4
 8004cda:	008a      	lsls	r2, r1, #2
 8004cdc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ce0:	f7fb fac6 	bl	8000270 <__aeabi_uldivmod>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4b60      	ldr	r3, [pc, #384]	; (8004e6c <UART_SetConfig+0x4e4>)
 8004cea:	fba3 2302 	umull	r2, r3, r3, r2
 8004cee:	095b      	lsrs	r3, r3, #5
 8004cf0:	011c      	lsls	r4, r3, #4
 8004cf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004cfc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d04:	4642      	mov	r2, r8
 8004d06:	464b      	mov	r3, r9
 8004d08:	1891      	adds	r1, r2, r2
 8004d0a:	61b9      	str	r1, [r7, #24]
 8004d0c:	415b      	adcs	r3, r3
 8004d0e:	61fb      	str	r3, [r7, #28]
 8004d10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d14:	4641      	mov	r1, r8
 8004d16:	1851      	adds	r1, r2, r1
 8004d18:	6139      	str	r1, [r7, #16]
 8004d1a:	4649      	mov	r1, r9
 8004d1c:	414b      	adcs	r3, r1
 8004d1e:	617b      	str	r3, [r7, #20]
 8004d20:	f04f 0200 	mov.w	r2, #0
 8004d24:	f04f 0300 	mov.w	r3, #0
 8004d28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d2c:	4659      	mov	r1, fp
 8004d2e:	00cb      	lsls	r3, r1, #3
 8004d30:	4651      	mov	r1, sl
 8004d32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d36:	4651      	mov	r1, sl
 8004d38:	00ca      	lsls	r2, r1, #3
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	4603      	mov	r3, r0
 8004d40:	4642      	mov	r2, r8
 8004d42:	189b      	adds	r3, r3, r2
 8004d44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d48:	464b      	mov	r3, r9
 8004d4a:	460a      	mov	r2, r1
 8004d4c:	eb42 0303 	adc.w	r3, r2, r3
 8004d50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d60:	f04f 0200 	mov.w	r2, #0
 8004d64:	f04f 0300 	mov.w	r3, #0
 8004d68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d6c:	4649      	mov	r1, r9
 8004d6e:	008b      	lsls	r3, r1, #2
 8004d70:	4641      	mov	r1, r8
 8004d72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d76:	4641      	mov	r1, r8
 8004d78:	008a      	lsls	r2, r1, #2
 8004d7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d7e:	f7fb fa77 	bl	8000270 <__aeabi_uldivmod>
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	4611      	mov	r1, r2
 8004d88:	4b38      	ldr	r3, [pc, #224]	; (8004e6c <UART_SetConfig+0x4e4>)
 8004d8a:	fba3 2301 	umull	r2, r3, r3, r1
 8004d8e:	095b      	lsrs	r3, r3, #5
 8004d90:	2264      	movs	r2, #100	; 0x64
 8004d92:	fb02 f303 	mul.w	r3, r2, r3
 8004d96:	1acb      	subs	r3, r1, r3
 8004d98:	011b      	lsls	r3, r3, #4
 8004d9a:	3332      	adds	r3, #50	; 0x32
 8004d9c:	4a33      	ldr	r2, [pc, #204]	; (8004e6c <UART_SetConfig+0x4e4>)
 8004d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004da2:	095b      	lsrs	r3, r3, #5
 8004da4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004da8:	441c      	add	r4, r3
 8004daa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dae:	2200      	movs	r2, #0
 8004db0:	673b      	str	r3, [r7, #112]	; 0x70
 8004db2:	677a      	str	r2, [r7, #116]	; 0x74
 8004db4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004db8:	4642      	mov	r2, r8
 8004dba:	464b      	mov	r3, r9
 8004dbc:	1891      	adds	r1, r2, r2
 8004dbe:	60b9      	str	r1, [r7, #8]
 8004dc0:	415b      	adcs	r3, r3
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dc8:	4641      	mov	r1, r8
 8004dca:	1851      	adds	r1, r2, r1
 8004dcc:	6039      	str	r1, [r7, #0]
 8004dce:	4649      	mov	r1, r9
 8004dd0:	414b      	adcs	r3, r1
 8004dd2:	607b      	str	r3, [r7, #4]
 8004dd4:	f04f 0200 	mov.w	r2, #0
 8004dd8:	f04f 0300 	mov.w	r3, #0
 8004ddc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004de0:	4659      	mov	r1, fp
 8004de2:	00cb      	lsls	r3, r1, #3
 8004de4:	4651      	mov	r1, sl
 8004de6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dea:	4651      	mov	r1, sl
 8004dec:	00ca      	lsls	r2, r1, #3
 8004dee:	4610      	mov	r0, r2
 8004df0:	4619      	mov	r1, r3
 8004df2:	4603      	mov	r3, r0
 8004df4:	4642      	mov	r2, r8
 8004df6:	189b      	adds	r3, r3, r2
 8004df8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dfa:	464b      	mov	r3, r9
 8004dfc:	460a      	mov	r2, r1
 8004dfe:	eb42 0303 	adc.w	r3, r2, r3
 8004e02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	663b      	str	r3, [r7, #96]	; 0x60
 8004e0e:	667a      	str	r2, [r7, #100]	; 0x64
 8004e10:	f04f 0200 	mov.w	r2, #0
 8004e14:	f04f 0300 	mov.w	r3, #0
 8004e18:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e1c:	4649      	mov	r1, r9
 8004e1e:	008b      	lsls	r3, r1, #2
 8004e20:	4641      	mov	r1, r8
 8004e22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e26:	4641      	mov	r1, r8
 8004e28:	008a      	lsls	r2, r1, #2
 8004e2a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e2e:	f7fb fa1f 	bl	8000270 <__aeabi_uldivmod>
 8004e32:	4602      	mov	r2, r0
 8004e34:	460b      	mov	r3, r1
 8004e36:	4b0d      	ldr	r3, [pc, #52]	; (8004e6c <UART_SetConfig+0x4e4>)
 8004e38:	fba3 1302 	umull	r1, r3, r3, r2
 8004e3c:	095b      	lsrs	r3, r3, #5
 8004e3e:	2164      	movs	r1, #100	; 0x64
 8004e40:	fb01 f303 	mul.w	r3, r1, r3
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	011b      	lsls	r3, r3, #4
 8004e48:	3332      	adds	r3, #50	; 0x32
 8004e4a:	4a08      	ldr	r2, [pc, #32]	; (8004e6c <UART_SetConfig+0x4e4>)
 8004e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e50:	095b      	lsrs	r3, r3, #5
 8004e52:	f003 020f 	and.w	r2, r3, #15
 8004e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4422      	add	r2, r4
 8004e5e:	609a      	str	r2, [r3, #8]
}
 8004e60:	bf00      	nop
 8004e62:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e66:	46bd      	mov	sp, r7
 8004e68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e6c:	51eb851f 	.word	0x51eb851f

08004e70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e70:	b084      	sub	sp, #16
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b084      	sub	sp, #16
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
 8004e7a:	f107 001c 	add.w	r0, r7, #28
 8004e7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e82:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d123      	bne.n	8004ed2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004eb2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d105      	bne.n	8004ec6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f9dc 	bl	8005284 <USB_CoreReset>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	73fb      	strb	r3, [r7, #15]
 8004ed0:	e01b      	b.n	8004f0a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f9d0 	bl	8005284 <USB_CoreReset>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ee8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d106      	bne.n	8004efe <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	639a      	str	r2, [r3, #56]	; 0x38
 8004efc:	e005      	b.n	8004f0a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004f0a:	7fbb      	ldrb	r3, [r7, #30]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d10b      	bne.n	8004f28 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f043 0206 	orr.w	r2, r3, #6
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f043 0220 	orr.w	r2, r3, #32
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f34:	b004      	add	sp, #16
 8004f36:	4770      	bx	lr

08004f38 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f043 0201 	orr.w	r2, r3, #1
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b083      	sub	sp, #12
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f023 0201 	bic.w	r2, r3, #1
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	460b      	mov	r3, r1
 8004f86:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f98:	78fb      	ldrb	r3, [r7, #3]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d115      	bne.n	8004fca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004faa:	200a      	movs	r0, #10
 8004fac:	f7fb fe18 	bl	8000be0 <HAL_Delay>
      ms += 10U;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	330a      	adds	r3, #10
 8004fb4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f956 	bl	8005268 <USB_GetMode>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d01e      	beq.n	8005000 <USB_SetCurrentMode+0x84>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2bc7      	cmp	r3, #199	; 0xc7
 8004fc6:	d9f0      	bls.n	8004faa <USB_SetCurrentMode+0x2e>
 8004fc8:	e01a      	b.n	8005000 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004fca:	78fb      	ldrb	r3, [r7, #3]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d115      	bne.n	8004ffc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004fdc:	200a      	movs	r0, #10
 8004fde:	f7fb fdff 	bl	8000be0 <HAL_Delay>
      ms += 10U;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	330a      	adds	r3, #10
 8004fe6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f93d 	bl	8005268 <USB_GetMode>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d005      	beq.n	8005000 <USB_SetCurrentMode+0x84>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2bc7      	cmp	r3, #199	; 0xc7
 8004ff8:	d9f0      	bls.n	8004fdc <USB_SetCurrentMode+0x60>
 8004ffa:	e001      	b.n	8005000 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e005      	b.n	800500c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2bc8      	cmp	r3, #200	; 0xc8
 8005004:	d101      	bne.n	800500a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800501e:	2300      	movs	r3, #0
 8005020:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	3301      	adds	r3, #1
 8005026:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800502e:	d901      	bls.n	8005034 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e01b      	b.n	800506c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	2b00      	cmp	r3, #0
 800503a:	daf2      	bge.n	8005022 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	019b      	lsls	r3, r3, #6
 8005044:	f043 0220 	orr.w	r2, r3, #32
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	3301      	adds	r3, #1
 8005050:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005058:	d901      	bls.n	800505e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e006      	b.n	800506c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	f003 0320 	and.w	r3, r3, #32
 8005066:	2b20      	cmp	r3, #32
 8005068:	d0f0      	beq.n	800504c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3714      	adds	r7, #20
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005080:	2300      	movs	r3, #0
 8005082:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	3301      	adds	r3, #1
 8005088:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005090:	d901      	bls.n	8005096 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e018      	b.n	80050c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	2b00      	cmp	r3, #0
 800509c:	daf2      	bge.n	8005084 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800509e:	2300      	movs	r3, #0
 80050a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2210      	movs	r2, #16
 80050a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	3301      	adds	r3, #1
 80050ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80050b4:	d901      	bls.n	80050ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e006      	b.n	80050c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	f003 0310 	and.w	r3, r3, #16
 80050c2:	2b10      	cmp	r3, #16
 80050c4:	d0f0      	beq.n	80050a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b089      	sub	sp, #36	; 0x24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	4611      	mov	r1, r2
 80050e0:	461a      	mov	r2, r3
 80050e2:	460b      	mov	r3, r1
 80050e4:	71fb      	strb	r3, [r7, #7]
 80050e6:	4613      	mov	r3, r2
 80050e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80050f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d123      	bne.n	8005142 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80050fa:	88bb      	ldrh	r3, [r7, #4]
 80050fc:	3303      	adds	r3, #3
 80050fe:	089b      	lsrs	r3, r3, #2
 8005100:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005102:	2300      	movs	r3, #0
 8005104:	61bb      	str	r3, [r7, #24]
 8005106:	e018      	b.n	800513a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005108:	79fb      	ldrb	r3, [r7, #7]
 800510a:	031a      	lsls	r2, r3, #12
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	4413      	add	r3, r2
 8005110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005114:	461a      	mov	r2, r3
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	3301      	adds	r3, #1
 8005120:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	3301      	adds	r3, #1
 8005126:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	3301      	adds	r3, #1
 800512c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	3301      	adds	r3, #1
 8005132:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	3301      	adds	r3, #1
 8005138:	61bb      	str	r3, [r7, #24]
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	429a      	cmp	r2, r3
 8005140:	d3e2      	bcc.n	8005108 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3724      	adds	r7, #36	; 0x24
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005150:	b480      	push	{r7}
 8005152:	b08b      	sub	sp, #44	; 0x2c
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	4613      	mov	r3, r2
 800515c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005166:	88fb      	ldrh	r3, [r7, #6]
 8005168:	089b      	lsrs	r3, r3, #2
 800516a:	b29b      	uxth	r3, r3
 800516c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800516e:	88fb      	ldrh	r3, [r7, #6]
 8005170:	f003 0303 	and.w	r3, r3, #3
 8005174:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005176:	2300      	movs	r3, #0
 8005178:	623b      	str	r3, [r7, #32]
 800517a:	e014      	b.n	80051a6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	601a      	str	r2, [r3, #0]
    pDest++;
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	3301      	adds	r3, #1
 800518c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	3301      	adds	r3, #1
 8005192:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	3301      	adds	r3, #1
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	3301      	adds	r3, #1
 800519e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	3301      	adds	r3, #1
 80051a4:	623b      	str	r3, [r7, #32]
 80051a6:	6a3a      	ldr	r2, [r7, #32]
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d3e6      	bcc.n	800517c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80051ae:	8bfb      	ldrh	r3, [r7, #30]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d01e      	beq.n	80051f2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80051b4:	2300      	movs	r3, #0
 80051b6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051be:	461a      	mov	r2, r3
 80051c0:	f107 0310 	add.w	r3, r7, #16
 80051c4:	6812      	ldr	r2, [r2, #0]
 80051c6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	fa22 f303 	lsr.w	r3, r2, r3
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d8:	701a      	strb	r2, [r3, #0]
      i++;
 80051da:	6a3b      	ldr	r3, [r7, #32]
 80051dc:	3301      	adds	r3, #1
 80051de:	623b      	str	r3, [r7, #32]
      pDest++;
 80051e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e2:	3301      	adds	r3, #1
 80051e4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80051e6:	8bfb      	ldrh	r3, [r7, #30]
 80051e8:	3b01      	subs	r3, #1
 80051ea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80051ec:	8bfb      	ldrh	r3, [r7, #30]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1ea      	bne.n	80051c8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	372c      	adds	r7, #44	; 0x2c
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	4013      	ands	r3, r2
 8005216:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005218:	68fb      	ldr	r3, [r7, #12]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005226:	b480      	push	{r7}
 8005228:	b085      	sub	sp, #20
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
 800522e:	460b      	mov	r3, r1
 8005230:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005236:	78fb      	ldrb	r3, [r7, #3]
 8005238:	015a      	lsls	r2, r3, #5
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	4413      	add	r3, r2
 800523e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005246:	78fb      	ldrb	r3, [r7, #3]
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	4413      	add	r3, r2
 800524e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	4013      	ands	r3, r2
 8005258:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800525a:	68bb      	ldr	r3, [r7, #8]
}
 800525c:	4618      	mov	r0, r3
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	f003 0301 	and.w	r3, r3, #1
}
 8005278:	4618      	mov	r0, r3
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800528c:	2300      	movs	r3, #0
 800528e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	3301      	adds	r3, #1
 8005294:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800529c:	d901      	bls.n	80052a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e022      	b.n	80052e8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	daf2      	bge.n	8005290 <USB_CoreReset+0xc>

  count = 10U;
 80052aa:	230a      	movs	r3, #10
 80052ac:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80052ae:	e002      	b.n	80052b6 <USB_CoreReset+0x32>
  {
    count--;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	3b01      	subs	r3, #1
 80052b4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1f9      	bne.n	80052b0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	f043 0201 	orr.w	r2, r3, #1
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	3301      	adds	r3, #1
 80052cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80052d4:	d901      	bls.n	80052da <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e006      	b.n	80052e8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d0f0      	beq.n	80052c8 <USB_CoreReset+0x44>

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052f4:	b084      	sub	sp, #16
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b086      	sub	sp, #24
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
 80052fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005302:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005306:	2300      	movs	r3, #0
 8005308:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005314:	461a      	mov	r2, r3
 8005316:	2300      	movs	r3, #0
 8005318:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005336:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005346:	2b00      	cmp	r3, #0
 8005348:	d119      	bne.n	800537e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800534a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800534e:	2b01      	cmp	r3, #1
 8005350:	d10a      	bne.n	8005368 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005360:	f043 0304 	orr.w	r3, r3, #4
 8005364:	6013      	str	r3, [r2, #0]
 8005366:	e014      	b.n	8005392 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005376:	f023 0304 	bic.w	r3, r3, #4
 800537a:	6013      	str	r3, [r2, #0]
 800537c:	e009      	b.n	8005392 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800538c:	f023 0304 	bic.w	r3, r3, #4
 8005390:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005392:	2110      	movs	r1, #16
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7ff fe3d 	bl	8005014 <USB_FlushTxFifo>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f7ff fe67 	bl	8005078 <USB_FlushRxFifo>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80053b4:	2300      	movs	r3, #0
 80053b6:	613b      	str	r3, [r7, #16]
 80053b8:	e015      	b.n	80053e6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c6:	461a      	mov	r2, r3
 80053c8:	f04f 33ff 	mov.w	r3, #4294967295
 80053cc:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	015a      	lsls	r2, r3, #5
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053da:	461a      	mov	r2, r3
 80053dc:	2300      	movs	r3, #0
 80053de:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	3301      	adds	r3, #1
 80053e4:	613b      	str	r3, [r7, #16]
 80053e6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80053ea:	461a      	mov	r2, r3
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d3e3      	bcc.n	80053ba <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f04f 32ff 	mov.w	r2, #4294967295
 80053fe:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a18      	ldr	r2, [pc, #96]	; (8005464 <USB_HostInit+0x170>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d10b      	bne.n	8005420 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800540e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a15      	ldr	r2, [pc, #84]	; (8005468 <USB_HostInit+0x174>)
 8005414:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a14      	ldr	r2, [pc, #80]	; (800546c <USB_HostInit+0x178>)
 800541a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800541e:	e009      	b.n	8005434 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2280      	movs	r2, #128	; 0x80
 8005424:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a11      	ldr	r2, [pc, #68]	; (8005470 <USB_HostInit+0x17c>)
 800542a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a11      	ldr	r2, [pc, #68]	; (8005474 <USB_HostInit+0x180>)
 8005430:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005434:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005438:	2b00      	cmp	r3, #0
 800543a:	d105      	bne.n	8005448 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	f043 0210 	orr.w	r2, r3, #16
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	699a      	ldr	r2, [r3, #24]
 800544c:	4b0a      	ldr	r3, [pc, #40]	; (8005478 <USB_HostInit+0x184>)
 800544e:	4313      	orrs	r3, r2
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005454:	7dfb      	ldrb	r3, [r7, #23]
}
 8005456:	4618      	mov	r0, r3
 8005458:	3718      	adds	r7, #24
 800545a:	46bd      	mov	sp, r7
 800545c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005460:	b004      	add	sp, #16
 8005462:	4770      	bx	lr
 8005464:	40040000 	.word	0x40040000
 8005468:	01000200 	.word	0x01000200
 800546c:	00e00300 	.word	0x00e00300
 8005470:	00600080 	.word	0x00600080
 8005474:	004000e0 	.word	0x004000e0
 8005478:	a3200008 	.word	0xa3200008

0800547c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	460b      	mov	r3, r1
 8005486:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800549a:	f023 0303 	bic.w	r3, r3, #3
 800549e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	78fb      	ldrb	r3, [r7, #3]
 80054aa:	f003 0303 	and.w	r3, r3, #3
 80054ae:	68f9      	ldr	r1, [r7, #12]
 80054b0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80054b4:	4313      	orrs	r3, r2
 80054b6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80054b8:	78fb      	ldrb	r3, [r7, #3]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d107      	bne.n	80054ce <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054c4:	461a      	mov	r2, r3
 80054c6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80054ca:	6053      	str	r3, [r2, #4]
 80054cc:	e00c      	b.n	80054e8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80054ce:	78fb      	ldrb	r3, [r7, #3]
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d107      	bne.n	80054e4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054da:	461a      	mov	r2, r3
 80054dc:	f241 7370 	movw	r3, #6000	; 0x1770
 80054e0:	6053      	str	r3, [r2, #4]
 80054e2:	e001      	b.n	80054e8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e000      	b.n	80054ea <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3714      	adds	r7, #20
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b084      	sub	sp, #16
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005502:	2300      	movs	r3, #0
 8005504:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005516:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005524:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005526:	2064      	movs	r0, #100	; 0x64
 8005528:	f7fb fb5a 	bl	8000be0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005538:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800553a:	200a      	movs	r0, #10
 800553c:	f7fb fb50 	bl	8000be0 <HAL_Delay>

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800554a:	b480      	push	{r7}
 800554c:	b085      	sub	sp, #20
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
 8005552:	460b      	mov	r3, r1
 8005554:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800556e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d109      	bne.n	800558e <USB_DriveVbus+0x44>
 800557a:	78fb      	ldrb	r3, [r7, #3]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d106      	bne.n	800558e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005588:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800558c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005598:	d109      	bne.n	80055ae <USB_DriveVbus+0x64>
 800559a:	78fb      	ldrb	r3, [r7, #3]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d106      	bne.n	80055ae <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80055a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055ac:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3714      	adds	r7, #20
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80055c8:	2300      	movs	r3, #0
 80055ca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	0c5b      	lsrs	r3, r3, #17
 80055da:	f003 0303 	and.w	r3, r3, #3
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b085      	sub	sp, #20
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	b29b      	uxth	r3, r3
}
 8005600:	4618      	mov	r0, r3
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b088      	sub	sp, #32
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	4608      	mov	r0, r1
 8005616:	4611      	mov	r1, r2
 8005618:	461a      	mov	r2, r3
 800561a:	4603      	mov	r3, r0
 800561c:	70fb      	strb	r3, [r7, #3]
 800561e:	460b      	mov	r3, r1
 8005620:	70bb      	strb	r3, [r7, #2]
 8005622:	4613      	mov	r3, r2
 8005624:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005626:	2300      	movs	r3, #0
 8005628:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800562e:	78fb      	ldrb	r3, [r7, #3]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	4413      	add	r3, r2
 8005636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800563a:	461a      	mov	r2, r3
 800563c:	f04f 33ff 	mov.w	r3, #4294967295
 8005640:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005642:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005646:	2b03      	cmp	r3, #3
 8005648:	d87c      	bhi.n	8005744 <USB_HC_Init+0x138>
 800564a:	a201      	add	r2, pc, #4	; (adr r2, 8005650 <USB_HC_Init+0x44>)
 800564c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005650:	08005661 	.word	0x08005661
 8005654:	08005707 	.word	0x08005707
 8005658:	08005661 	.word	0x08005661
 800565c:	080056c9 	.word	0x080056c9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005660:	78fb      	ldrb	r3, [r7, #3]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	4413      	add	r3, r2
 8005668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800566c:	461a      	mov	r2, r3
 800566e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005672:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005674:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005678:	2b00      	cmp	r3, #0
 800567a:	da10      	bge.n	800569e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800567c:	78fb      	ldrb	r3, [r7, #3]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	4413      	add	r3, r2
 8005684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	78fa      	ldrb	r2, [r7, #3]
 800568c:	0151      	lsls	r1, r2, #5
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	440a      	add	r2, r1
 8005692:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800569a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800569c:	e055      	b.n	800574a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a6f      	ldr	r2, [pc, #444]	; (8005860 <USB_HC_Init+0x254>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d151      	bne.n	800574a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80056a6:	78fb      	ldrb	r3, [r7, #3]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	78fa      	ldrb	r2, [r7, #3]
 80056b6:	0151      	lsls	r1, r2, #5
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	440a      	add	r2, r1
 80056bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80056c4:	60d3      	str	r3, [r2, #12]
      break;
 80056c6:	e040      	b.n	800574a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80056c8:	78fb      	ldrb	r3, [r7, #3]
 80056ca:	015a      	lsls	r2, r3, #5
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	4413      	add	r3, r2
 80056d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056d4:	461a      	mov	r2, r3
 80056d6:	f240 639d 	movw	r3, #1693	; 0x69d
 80056da:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80056dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	da34      	bge.n	800574e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80056e4:	78fb      	ldrb	r3, [r7, #3]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	78fa      	ldrb	r2, [r7, #3]
 80056f4:	0151      	lsls	r1, r2, #5
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	440a      	add	r2, r1
 80056fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005702:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005704:	e023      	b.n	800574e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005706:	78fb      	ldrb	r3, [r7, #3]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	4413      	add	r3, r2
 800570e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005712:	461a      	mov	r2, r3
 8005714:	f240 2325 	movw	r3, #549	; 0x225
 8005718:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800571a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800571e:	2b00      	cmp	r3, #0
 8005720:	da17      	bge.n	8005752 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005722:	78fb      	ldrb	r3, [r7, #3]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	4413      	add	r3, r2
 800572a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	78fa      	ldrb	r2, [r7, #3]
 8005732:	0151      	lsls	r1, r2, #5
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	440a      	add	r2, r1
 8005738:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800573c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005740:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005742:	e006      	b.n	8005752 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	77fb      	strb	r3, [r7, #31]
      break;
 8005748:	e004      	b.n	8005754 <USB_HC_Init+0x148>
      break;
 800574a:	bf00      	nop
 800574c:	e002      	b.n	8005754 <USB_HC_Init+0x148>
      break;
 800574e:	bf00      	nop
 8005750:	e000      	b.n	8005754 <USB_HC_Init+0x148>
      break;
 8005752:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005754:	78fb      	ldrb	r3, [r7, #3]
 8005756:	015a      	lsls	r2, r3, #5
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	4413      	add	r3, r2
 800575c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005760:	461a      	mov	r2, r3
 8005762:	2300      	movs	r3, #0
 8005764:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005766:	78fb      	ldrb	r3, [r7, #3]
 8005768:	015a      	lsls	r2, r3, #5
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	4413      	add	r3, r2
 800576e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	78fa      	ldrb	r2, [r7, #3]
 8005776:	0151      	lsls	r1, r2, #5
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	440a      	add	r2, r1
 800577c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005780:	f043 0302 	orr.w	r3, r3, #2
 8005784:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800578c:	699a      	ldr	r2, [r3, #24]
 800578e:	78fb      	ldrb	r3, [r7, #3]
 8005790:	f003 030f 	and.w	r3, r3, #15
 8005794:	2101      	movs	r1, #1
 8005796:	fa01 f303 	lsl.w	r3, r1, r3
 800579a:	6939      	ldr	r1, [r7, #16]
 800579c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80057a0:	4313      	orrs	r3, r2
 80057a2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80057b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	da03      	bge.n	80057c0 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80057b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057bc:	61bb      	str	r3, [r7, #24]
 80057be:	e001      	b.n	80057c4 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80057c0:	2300      	movs	r3, #0
 80057c2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f7ff fef9 	bl	80055bc <USB_GetHostSpeed>
 80057ca:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80057cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d106      	bne.n	80057e2 <USB_HC_Init+0x1d6>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d003      	beq.n	80057e2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80057da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057de:	617b      	str	r3, [r7, #20]
 80057e0:	e001      	b.n	80057e6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80057e2:	2300      	movs	r3, #0
 80057e4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057e6:	787b      	ldrb	r3, [r7, #1]
 80057e8:	059b      	lsls	r3, r3, #22
 80057ea:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80057ee:	78bb      	ldrb	r3, [r7, #2]
 80057f0:	02db      	lsls	r3, r3, #11
 80057f2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057f6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80057f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80057fc:	049b      	lsls	r3, r3, #18
 80057fe:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005802:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005804:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005806:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800580a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	431a      	orrs	r2, r3
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005814:	78fa      	ldrb	r2, [r7, #3]
 8005816:	0151      	lsls	r1, r2, #5
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	440a      	add	r2, r1
 800581c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005820:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005824:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005826:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800582a:	2b03      	cmp	r3, #3
 800582c:	d003      	beq.n	8005836 <USB_HC_Init+0x22a>
 800582e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005832:	2b01      	cmp	r3, #1
 8005834:	d10f      	bne.n	8005856 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005836:	78fb      	ldrb	r3, [r7, #3]
 8005838:	015a      	lsls	r2, r3, #5
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	4413      	add	r3, r2
 800583e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	78fa      	ldrb	r2, [r7, #3]
 8005846:	0151      	lsls	r1, r2, #5
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	440a      	add	r2, r1
 800584c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005850:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005854:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005856:	7ffb      	ldrb	r3, [r7, #31]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3720      	adds	r7, #32
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	40040000 	.word	0x40040000

08005864 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b08c      	sub	sp, #48	; 0x30
 8005868:	af02      	add	r7, sp, #8
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	4613      	mov	r3, r2
 8005870:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	785b      	ldrb	r3, [r3, #1]
 800587a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800587c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005880:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	4a5d      	ldr	r2, [pc, #372]	; (80059fc <USB_HC_StartXfer+0x198>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d12f      	bne.n	80058ea <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800588a:	79fb      	ldrb	r3, [r7, #7]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d11c      	bne.n	80058ca <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	7c9b      	ldrb	r3, [r3, #18]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d003      	beq.n	80058a0 <USB_HC_StartXfer+0x3c>
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	7c9b      	ldrb	r3, [r3, #18]
 800589c:	2b02      	cmp	r3, #2
 800589e:	d124      	bne.n	80058ea <USB_HC_StartXfer+0x86>
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	799b      	ldrb	r3, [r3, #6]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d120      	bne.n	80058ea <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	69fa      	ldr	r2, [r7, #28]
 80058b8:	0151      	lsls	r1, r2, #5
 80058ba:	6a3a      	ldr	r2, [r7, #32]
 80058bc:	440a      	add	r2, r1
 80058be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c6:	60d3      	str	r3, [r2, #12]
 80058c8:	e00f      	b.n	80058ea <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	791b      	ldrb	r3, [r3, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10b      	bne.n	80058ea <USB_HC_StartXfer+0x86>
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	795b      	ldrb	r3, [r3, #5]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d107      	bne.n	80058ea <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	785b      	ldrb	r3, [r3, #1]
 80058de:	4619      	mov	r1, r3
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f000 fb6b 	bl	8005fbc <USB_DoPing>
        return HAL_OK;
 80058e6:	2300      	movs	r3, #0
 80058e8:	e232      	b.n	8005d50 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	799b      	ldrb	r3, [r3, #6]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d158      	bne.n	80059a4 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80058f2:	2301      	movs	r3, #1
 80058f4:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	78db      	ldrb	r3, [r3, #3]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d007      	beq.n	800590e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80058fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	8a92      	ldrh	r2, [r2, #20]
 8005904:	fb03 f202 	mul.w	r2, r3, r2
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	61da      	str	r2, [r3, #28]
 800590c:	e07c      	b.n	8005a08 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	7c9b      	ldrb	r3, [r3, #18]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d130      	bne.n	8005978 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	2bbc      	cmp	r3, #188	; 0xbc
 800591c:	d918      	bls.n	8005950 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	8a9b      	ldrh	r3, [r3, #20]
 8005922:	461a      	mov	r2, r3
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	69da      	ldr	r2, [r3, #28]
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d003      	beq.n	8005940 <USB_HC_StartXfer+0xdc>
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	2b02      	cmp	r3, #2
 800593e:	d103      	bne.n	8005948 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	2202      	movs	r2, #2
 8005944:	60da      	str	r2, [r3, #12]
 8005946:	e05f      	b.n	8005a08 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2201      	movs	r2, #1
 800594c:	60da      	str	r2, [r3, #12]
 800594e:	e05b      	b.n	8005a08 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	6a1a      	ldr	r2, [r3, #32]
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d007      	beq.n	8005970 <USB_HC_StartXfer+0x10c>
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	2b02      	cmp	r3, #2
 8005966:	d003      	beq.n	8005970 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	2204      	movs	r2, #4
 800596c:	60da      	str	r2, [r3, #12]
 800596e:	e04b      	b.n	8005a08 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	2203      	movs	r2, #3
 8005974:	60da      	str	r2, [r3, #12]
 8005976:	e047      	b.n	8005a08 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005978:	79fb      	ldrb	r3, [r7, #7]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d10d      	bne.n	800599a <USB_HC_StartXfer+0x136>
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	8a92      	ldrh	r2, [r2, #20]
 8005986:	4293      	cmp	r3, r2
 8005988:	d907      	bls.n	800599a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800598a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	8a92      	ldrh	r2, [r2, #20]
 8005990:	fb03 f202 	mul.w	r2, r3, r2
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	61da      	str	r2, [r3, #28]
 8005998:	e036      	b.n	8005a08 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	6a1a      	ldr	r2, [r3, #32]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	61da      	str	r2, [r3, #28]
 80059a2:	e031      	b.n	8005a08 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d018      	beq.n	80059de <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	8a92      	ldrh	r2, [r2, #20]
 80059b4:	4413      	add	r3, r2
 80059b6:	3b01      	subs	r3, #1
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	8a92      	ldrh	r2, [r2, #20]
 80059bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80059c0:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 80059c2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80059c4:	8b7b      	ldrh	r3, [r7, #26]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d90b      	bls.n	80059e2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80059ca:	8b7b      	ldrh	r3, [r7, #26]
 80059cc:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80059ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	8a92      	ldrh	r2, [r2, #20]
 80059d4:	fb03 f202 	mul.w	r2, r3, r2
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	61da      	str	r2, [r3, #28]
 80059dc:	e001      	b.n	80059e2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80059de:	2301      	movs	r3, #1
 80059e0:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	78db      	ldrb	r3, [r3, #3]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00a      	beq.n	8005a00 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80059ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	8a92      	ldrh	r2, [r2, #20]
 80059f0:	fb03 f202 	mul.w	r2, r3, r2
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	61da      	str	r2, [r3, #28]
 80059f8:	e006      	b.n	8005a08 <USB_HC_StartXfer+0x1a4>
 80059fa:	bf00      	nop
 80059fc:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	6a1a      	ldr	r2, [r3, #32]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	69db      	ldr	r3, [r3, #28]
 8005a0c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a12:	04d9      	lsls	r1, r3, #19
 8005a14:	4ba3      	ldr	r3, [pc, #652]	; (8005ca4 <USB_HC_StartXfer+0x440>)
 8005a16:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a18:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	7d9b      	ldrb	r3, [r3, #22]
 8005a1e:	075b      	lsls	r3, r3, #29
 8005a20:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a24:	69f9      	ldr	r1, [r7, #28]
 8005a26:	0148      	lsls	r0, r1, #5
 8005a28:	6a39      	ldr	r1, [r7, #32]
 8005a2a:	4401      	add	r1, r0
 8005a2c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a30:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a32:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005a34:	79fb      	ldrb	r3, [r7, #7]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d009      	beq.n	8005a4e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	6999      	ldr	r1, [r3, #24]
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	6a3b      	ldr	r3, [r7, #32]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a4a:	460a      	mov	r2, r1
 8005a4c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	bf0c      	ite	eq
 8005a5e:	2301      	moveq	r3, #1
 8005a60:	2300      	movne	r3, #0
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	015a      	lsls	r2, r3, #5
 8005a6a:	6a3b      	ldr	r3, [r7, #32]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	69fa      	ldr	r2, [r7, #28]
 8005a76:	0151      	lsls	r1, r2, #5
 8005a78:	6a3a      	ldr	r2, [r7, #32]
 8005a7a:	440a      	add	r2, r1
 8005a7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a80:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005a84:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	015a      	lsls	r2, r3, #5
 8005a8a:	6a3b      	ldr	r3, [r7, #32]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	7e7b      	ldrb	r3, [r7, #25]
 8005a96:	075b      	lsls	r3, r3, #29
 8005a98:	69f9      	ldr	r1, [r7, #28]
 8005a9a:	0148      	lsls	r0, r1, #5
 8005a9c:	6a39      	ldr	r1, [r7, #32]
 8005a9e:	4401      	add	r1, r0
 8005aa0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	799b      	ldrb	r3, [r3, #6]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	f040 80c3 	bne.w	8005c38 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	7c5b      	ldrb	r3, [r3, #17]
 8005ab6:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005abc:	4313      	orrs	r3, r2
 8005abe:	69fa      	ldr	r2, [r7, #28]
 8005ac0:	0151      	lsls	r1, r2, #5
 8005ac2:	6a3a      	ldr	r2, [r7, #32]
 8005ac4:	440a      	add	r2, r1
 8005ac6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005ace:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	6a3b      	ldr	r3, [r7, #32]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	69fa      	ldr	r2, [r7, #28]
 8005ae0:	0151      	lsls	r1, r2, #5
 8005ae2:	6a3a      	ldr	r2, [r7, #32]
 8005ae4:	440a      	add	r2, r1
 8005ae6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005aee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	79db      	ldrb	r3, [r3, #7]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d123      	bne.n	8005b40 <USB_HC_StartXfer+0x2dc>
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	78db      	ldrb	r3, [r3, #3]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d11f      	bne.n	8005b40 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	6a3b      	ldr	r3, [r7, #32]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	69fa      	ldr	r2, [r7, #28]
 8005b10:	0151      	lsls	r1, r2, #5
 8005b12:	6a3a      	ldr	r2, [r7, #32]
 8005b14:	440a      	add	r2, r1
 8005b16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b1e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	6a3b      	ldr	r3, [r7, #32]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	69fa      	ldr	r2, [r7, #28]
 8005b30:	0151      	lsls	r1, r2, #5
 8005b32:	6a3a      	ldr	r2, [r7, #32]
 8005b34:	440a      	add	r2, r1
 8005b36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b3e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	7c9b      	ldrb	r3, [r3, #18]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d003      	beq.n	8005b50 <USB_HC_StartXfer+0x2ec>
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	7c9b      	ldrb	r3, [r3, #18]
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	d117      	bne.n	8005b80 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d113      	bne.n	8005b80 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	78db      	ldrb	r3, [r3, #3]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d10f      	bne.n	8005b80 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	6a3b      	ldr	r3, [r7, #32]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	69fa      	ldr	r2, [r7, #28]
 8005b70:	0151      	lsls	r1, r2, #5
 8005b72:	6a3a      	ldr	r2, [r7, #32]
 8005b74:	440a      	add	r2, r1
 8005b76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b7e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	7c9b      	ldrb	r3, [r3, #18]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d162      	bne.n	8005c4e <USB_HC_StartXfer+0x3ea>
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	78db      	ldrb	r3, [r3, #3]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d15e      	bne.n	8005c4e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	3b01      	subs	r3, #1
 8005b96:	2b03      	cmp	r3, #3
 8005b98:	d858      	bhi.n	8005c4c <USB_HC_StartXfer+0x3e8>
 8005b9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ba0 <USB_HC_StartXfer+0x33c>)
 8005b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba0:	08005bb1 	.word	0x08005bb1
 8005ba4:	08005bd3 	.word	0x08005bd3
 8005ba8:	08005bf5 	.word	0x08005bf5
 8005bac:	08005c17 	.word	0x08005c17
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	6a3b      	ldr	r3, [r7, #32]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	69fa      	ldr	r2, [r7, #28]
 8005bc0:	0151      	lsls	r1, r2, #5
 8005bc2:	6a3a      	ldr	r2, [r7, #32]
 8005bc4:	440a      	add	r2, r1
 8005bc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bce:	6053      	str	r3, [r2, #4]
          break;
 8005bd0:	e03d      	b.n	8005c4e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	015a      	lsls	r2, r3, #5
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	4413      	add	r3, r2
 8005bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	69fa      	ldr	r2, [r7, #28]
 8005be2:	0151      	lsls	r1, r2, #5
 8005be4:	6a3a      	ldr	r2, [r7, #32]
 8005be6:	440a      	add	r2, r1
 8005be8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bec:	f043 030e 	orr.w	r3, r3, #14
 8005bf0:	6053      	str	r3, [r2, #4]
          break;
 8005bf2:	e02c      	b.n	8005c4e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	6a3b      	ldr	r3, [r7, #32]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	69fa      	ldr	r2, [r7, #28]
 8005c04:	0151      	lsls	r1, r2, #5
 8005c06:	6a3a      	ldr	r2, [r7, #32]
 8005c08:	440a      	add	r2, r1
 8005c0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c12:	6053      	str	r3, [r2, #4]
          break;
 8005c14:	e01b      	b.n	8005c4e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	6a3b      	ldr	r3, [r7, #32]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	69fa      	ldr	r2, [r7, #28]
 8005c26:	0151      	lsls	r1, r2, #5
 8005c28:	6a3a      	ldr	r2, [r7, #32]
 8005c2a:	440a      	add	r2, r1
 8005c2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c34:	6053      	str	r3, [r2, #4]
          break;
 8005c36:	e00a      	b.n	8005c4e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	6a3b      	ldr	r3, [r7, #32]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c44:	461a      	mov	r2, r3
 8005c46:	2300      	movs	r3, #0
 8005c48:	6053      	str	r3, [r2, #4]
 8005c4a:	e000      	b.n	8005c4e <USB_HC_StartXfer+0x3ea>
          break;
 8005c4c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	6a3b      	ldr	r3, [r7, #32]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c64:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	78db      	ldrb	r3, [r3, #3]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d004      	beq.n	8005c78 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c74:	613b      	str	r3, [r7, #16]
 8005c76:	e003      	b.n	8005c80 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c7e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c86:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	6a3b      	ldr	r3, [r7, #32]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c94:	461a      	mov	r2, r3
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005c9a:	79fb      	ldrb	r3, [r7, #7]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d003      	beq.n	8005ca8 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	e055      	b.n	8005d50 <USB_HC_StartXfer+0x4ec>
 8005ca4:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	78db      	ldrb	r3, [r3, #3]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d14e      	bne.n	8005d4e <USB_HC_StartXfer+0x4ea>
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d04a      	beq.n	8005d4e <USB_HC_StartXfer+0x4ea>
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	79db      	ldrb	r3, [r3, #7]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d146      	bne.n	8005d4e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	7c9b      	ldrb	r3, [r3, #18]
 8005cc4:	2b03      	cmp	r3, #3
 8005cc6:	d831      	bhi.n	8005d2c <USB_HC_StartXfer+0x4c8>
 8005cc8:	a201      	add	r2, pc, #4	; (adr r2, 8005cd0 <USB_HC_StartXfer+0x46c>)
 8005cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cce:	bf00      	nop
 8005cd0:	08005ce1 	.word	0x08005ce1
 8005cd4:	08005d05 	.word	0x08005d05
 8005cd8:	08005ce1 	.word	0x08005ce1
 8005cdc:	08005d05 	.word	0x08005d05
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	6a1b      	ldr	r3, [r3, #32]
 8005ce4:	3303      	adds	r3, #3
 8005ce6:	089b      	lsrs	r3, r3, #2
 8005ce8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005cea:	8afa      	ldrh	r2, [r7, #22]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d91c      	bls.n	8005d30 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	f043 0220 	orr.w	r2, r3, #32
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	619a      	str	r2, [r3, #24]
        }
        break;
 8005d02:	e015      	b.n	8005d30 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	6a1b      	ldr	r3, [r3, #32]
 8005d08:	3303      	adds	r3, #3
 8005d0a:	089b      	lsrs	r3, r3, #2
 8005d0c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005d0e:	8afa      	ldrh	r2, [r7, #22]
 8005d10:	6a3b      	ldr	r3, [r7, #32]
 8005d12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d90a      	bls.n	8005d34 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	619a      	str	r2, [r3, #24]
        }
        break;
 8005d2a:	e003      	b.n	8005d34 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8005d2c:	bf00      	nop
 8005d2e:	e002      	b.n	8005d36 <USB_HC_StartXfer+0x4d2>
        break;
 8005d30:	bf00      	nop
 8005d32:	e000      	b.n	8005d36 <USB_HC_StartXfer+0x4d2>
        break;
 8005d34:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	6999      	ldr	r1, [r3, #24]
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	785a      	ldrb	r2, [r3, #1]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	2000      	movs	r0, #0
 8005d46:	9000      	str	r0, [sp, #0]
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f7ff f9c3 	bl	80050d4 <USB_WritePacket>
  }

  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3728      	adds	r7, #40	; 0x28
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	b29b      	uxth	r3, r3
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3714      	adds	r7, #20
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b089      	sub	sp, #36	; 0x24
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
 8005d82:	460b      	mov	r3, r1
 8005d84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005d8a:	78fb      	ldrb	r3, [r7, #3]
 8005d8c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	0c9b      	lsrs	r3, r3, #18
 8005da2:	f003 0303 	and.w	r3, r3, #3
 8005da6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	015a      	lsls	r2, r3, #5
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	4413      	add	r3, r2
 8005db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	0fdb      	lsrs	r3, r3, #31
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	0fdb      	lsrs	r3, r3, #31
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f003 0320 	and.w	r3, r3, #32
 8005ddc:	2b20      	cmp	r3, #32
 8005dde:	d10d      	bne.n	8005dfc <USB_HC_Halt+0x82>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10a      	bne.n	8005dfc <USB_HC_Halt+0x82>
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d005      	beq.n	8005df8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d002      	beq.n	8005df8 <USB_HC_Halt+0x7e>
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	2b03      	cmp	r3, #3
 8005df6:	d101      	bne.n	8005dfc <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	e0d8      	b.n	8005fae <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <USB_HC_Halt+0x8e>
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d173      	bne.n	8005ef0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	69ba      	ldr	r2, [r7, #24]
 8005e18:	0151      	lsls	r1, r2, #5
 8005e1a:	69fa      	ldr	r2, [r7, #28]
 8005e1c:	440a      	add	r2, r1
 8005e1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e26:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f003 0320 	and.w	r3, r3, #32
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d14a      	bne.n	8005eca <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d133      	bne.n	8005ea8 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	015a      	lsls	r2, r3, #5
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	4413      	add	r3, r2
 8005e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	69ba      	ldr	r2, [r7, #24]
 8005e50:	0151      	lsls	r1, r2, #5
 8005e52:	69fa      	ldr	r2, [r7, #28]
 8005e54:	440a      	add	r2, r1
 8005e56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e5a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e5e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	69ba      	ldr	r2, [r7, #24]
 8005e70:	0151      	lsls	r1, r2, #5
 8005e72:	69fa      	ldr	r2, [r7, #28]
 8005e74:	440a      	add	r2, r1
 8005e76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e7e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	3301      	adds	r3, #1
 8005e84:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e8c:	d82e      	bhi.n	8005eec <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	015a      	lsls	r2, r3, #5
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ea0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ea4:	d0ec      	beq.n	8005e80 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ea6:	e081      	b.n	8005fac <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	69ba      	ldr	r2, [r7, #24]
 8005eb8:	0151      	lsls	r1, r2, #5
 8005eba:	69fa      	ldr	r2, [r7, #28]
 8005ebc:	440a      	add	r2, r1
 8005ebe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ec2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ec6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ec8:	e070      	b.n	8005fac <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	0151      	lsls	r1, r2, #5
 8005edc:	69fa      	ldr	r2, [r7, #28]
 8005ede:	440a      	add	r2, r1
 8005ee0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ee4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ee8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005eea:	e05f      	b.n	8005fac <USB_HC_Halt+0x232>
            break;
 8005eec:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005eee:	e05d      	b.n	8005fac <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	015a      	lsls	r2, r3, #5
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	0151      	lsls	r1, r2, #5
 8005f02:	69fa      	ldr	r2, [r7, #28]
 8005f04:	440a      	add	r2, r1
 8005f06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f0e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d133      	bne.n	8005f88 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	0151      	lsls	r1, r2, #5
 8005f32:	69fa      	ldr	r2, [r7, #28]
 8005f34:	440a      	add	r2, r1
 8005f36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f3e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	015a      	lsls	r2, r3, #5
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	69ba      	ldr	r2, [r7, #24]
 8005f50:	0151      	lsls	r1, r2, #5
 8005f52:	69fa      	ldr	r2, [r7, #28]
 8005f54:	440a      	add	r2, r1
 8005f56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f5e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	3301      	adds	r3, #1
 8005f64:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f6c:	d81d      	bhi.n	8005faa <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f84:	d0ec      	beq.n	8005f60 <USB_HC_Halt+0x1e6>
 8005f86:	e011      	b.n	8005fac <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	0151      	lsls	r1, r2, #5
 8005f9a:	69fa      	ldr	r2, [r7, #28]
 8005f9c:	440a      	add	r2, r1
 8005f9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fa6:	6013      	str	r3, [r2, #0]
 8005fa8:	e000      	b.n	8005fac <USB_HC_Halt+0x232>
          break;
 8005faa:	bf00      	nop
    }
  }

  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3724      	adds	r7, #36	; 0x24
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
	...

08005fbc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005fcc:	78fb      	ldrb	r3, [r7, #3]
 8005fce:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	04da      	lsls	r2, r3, #19
 8005fd8:	4b15      	ldr	r3, [pc, #84]	; (8006030 <USB_DoPing+0x74>)
 8005fda:	4013      	ands	r3, r2
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	0151      	lsls	r1, r2, #5
 8005fe0:	697a      	ldr	r2, [r7, #20]
 8005fe2:	440a      	add	r2, r1
 8005fe4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fe8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fec:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	015a      	lsls	r2, r3, #5
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006004:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800600c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	015a      	lsls	r2, r3, #5
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	4413      	add	r3, r2
 8006016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800601a:	461a      	mov	r2, r3
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	371c      	adds	r7, #28
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	1ff80000 	.word	0x1ff80000

08006034 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b088      	sub	sp, #32
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800603c:	2300      	movs	r3, #0
 800603e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f7fe ff86 	bl	8004f5a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800604e:	2110      	movs	r1, #16
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f7fe ffdf 	bl	8005014 <USB_FlushTxFifo>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d001      	beq.n	8006060 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f7ff f809 	bl	8005078 <USB_FlushRxFifo>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d001      	beq.n	8006070 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006070:	2300      	movs	r3, #0
 8006072:	61bb      	str	r3, [r7, #24]
 8006074:	e01f      	b.n	80060b6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	015a      	lsls	r2, r3, #5
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	4413      	add	r3, r2
 800607e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800608c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006094:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800609c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	015a      	lsls	r2, r3, #5
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	4413      	add	r3, r2
 80060a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060aa:	461a      	mov	r2, r3
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	3301      	adds	r3, #1
 80060b4:	61bb      	str	r3, [r7, #24]
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	2b0f      	cmp	r3, #15
 80060ba:	d9dc      	bls.n	8006076 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80060bc:	2300      	movs	r3, #0
 80060be:	61bb      	str	r3, [r7, #24]
 80060c0:	e034      	b.n	800612c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	015a      	lsls	r2, r3, #5
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	4413      	add	r3, r2
 80060ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060d8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060e0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80060e8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	015a      	lsls	r2, r3, #5
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	4413      	add	r3, r2
 80060f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060f6:	461a      	mov	r2, r3
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	3301      	adds	r3, #1
 8006100:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006108:	d80c      	bhi.n	8006124 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	015a      	lsls	r2, r3, #5
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	4413      	add	r3, r2
 8006112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800611c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006120:	d0ec      	beq.n	80060fc <USB_StopHost+0xc8>
 8006122:	e000      	b.n	8006126 <USB_StopHost+0xf2>
        break;
 8006124:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	3301      	adds	r3, #1
 800612a:	61bb      	str	r3, [r7, #24]
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	2b0f      	cmp	r3, #15
 8006130:	d9c7      	bls.n	80060c2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006138:	461a      	mov	r2, r3
 800613a:	f04f 33ff 	mov.w	r3, #4294967295
 800613e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f04f 32ff 	mov.w	r2, #4294967295
 8006146:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f7fe fef5 	bl	8004f38 <USB_EnableGlobalInt>

  return ret;
 800614e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3720      	adds	r7, #32
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <USBH_VIDEO_InterfaceInit>:
  *         The function init the Video class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_VIDEO_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8006158:	b590      	push	{r4, r7, lr}
 800615a:	b08b      	sub	sp, #44	; 0x2c
 800615c:	af04      	add	r7, sp, #16
 800615e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8006160:	2302      	movs	r3, #2
 8006162:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef out_status ;    
  VIDEO_HandleTypeDef *VIDEO_Handle;
  uint8_t  interface, index;
  
  uint16_t ep_size_in = 0;  
 8006164:	2300      	movs	r3, #0
 8006166:	82bb      	strh	r3, [r7, #20]
  
  interface = USBH_FindInterface(phost, CC_VIDEO, USB_SUBCLASS_VIDEOCONTROL, 0x00);
 8006168:	2300      	movs	r3, #0
 800616a:	2201      	movs	r2, #1
 800616c:	210e      	movs	r1, #14
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f001 f942 	bl	80073f8 <USBH_FindInterface>
 8006174:	4603      	mov	r3, r0
 8006176:	74fb      	strb	r3, [r7, #19]
  
  if(interface == 0xFF) /* Not Valid Interface */
 8006178:	7cfb      	ldrb	r3, [r7, #19]
 800617a:	2bff      	cmp	r3, #255	; 0xff
 800617c:	d112      	bne.n	80061a4 <USBH_VIDEO_InterfaceInit+0x4c>
  {
    USBH_ErrLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 800617e:	488b      	ldr	r0, [pc, #556]	; (80063ac <USBH_VIDEO_InterfaceInit+0x254>)
 8006180:	f003 fcb8 	bl	8009af4 <iprintf>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800618a:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4619      	mov	r1, r3
 8006192:	4887      	ldr	r0, [pc, #540]	; (80063b0 <USBH_VIDEO_InterfaceInit+0x258>)
 8006194:	f003 fcae 	bl	8009af4 <iprintf>
 8006198:	200a      	movs	r0, #10
 800619a:	f003 fcbd 	bl	8009b18 <putchar>
    status = USBH_FAIL;      
 800619e:	2302      	movs	r3, #2
 80061a0:	75fb      	strb	r3, [r7, #23]
 80061a2:	e0fe      	b.n	80063a2 <USBH_VIDEO_InterfaceInit+0x24a>
  }
  else
  {
    phost->pActiveClass->pData = (VIDEO_HandleTypeDef *)USBH_malloc (sizeof(VIDEO_HandleTypeDef));
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061aa:	f8d3 4a50 	ldr.w	r4, [r3, #2640]	; 0xa50
 80061ae:	f44f 70a4 	mov.w	r0, #328	; 0x148
 80061b2:	f003 fb21 	bl	80097f8 <malloc>
 80061b6:	4603      	mov	r3, r0
 80061b8:	61e3      	str	r3, [r4, #28]
    VIDEO_Handle =  (VIDEO_HandleTypeDef *) phost->pActiveClass->pData; 
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061c0:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	60fb      	str	r3, [r7, #12]
    USBH_memset(VIDEO_Handle, 0, sizeof(VIDEO_HandleTypeDef));
 80061c8:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80061cc:	2100      	movs	r1, #0
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f003 fcfd 	bl	8009bce <memset>
    
    /* 1st Step:  Find IN Video Interfaces */
    out_status = USBH_VIDEO_FindStreamingIN(phost);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 fb0f 	bl	80067f8 <USBH_VIDEO_FindStreamingIN>
 80061da:	4603      	mov	r3, r0
 80061dc:	72fb      	strb	r3, [r7, #11]
    
    if(out_status == USBH_FAIL)
 80061de:	7afb      	ldrb	r3, [r7, #11]
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d110      	bne.n	8006206 <USBH_VIDEO_InterfaceInit+0xae>
    {
      USBH_UsrLog("%s class configuration not supported.", phost->pActiveClass->Name);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061ea:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4619      	mov	r1, r3
 80061f2:	4870      	ldr	r0, [pc, #448]	; (80063b4 <USBH_VIDEO_InterfaceInit+0x25c>)
 80061f4:	f003 fc7e 	bl	8009af4 <iprintf>
 80061f8:	200a      	movs	r0, #10
 80061fa:	f003 fc8d 	bl	8009b18 <putchar>
      status = USBH_FAIL;
 80061fe:	2302      	movs	r3, #2
 8006200:	75fb      	strb	r3, [r7, #23]
      return USBH_FAIL;
 8006202:	2302      	movs	r3, #2
 8006204:	e0ce      	b.n	80063a4 <USBH_VIDEO_InterfaceInit+0x24c>
    }
    
    /* 2nd Step:  Select Video Streaming Interfaces with best endpoint size*/ 
    for (index = 0; index < VIDEO_MAX_VIDEO_STD_INTERFACE; index++)
 8006206:	2300      	movs	r3, #0
 8006208:	75bb      	strb	r3, [r7, #22]
 800620a:	e062      	b.n	80062d2 <USBH_VIDEO_InterfaceInit+0x17a>
    {      
      if( VIDEO_Handle->stream_in[index].valid == 1)
 800620c:	7dba      	ldrb	r2, [r7, #22]
 800620e:	68f9      	ldr	r1, [r7, #12]
 8006210:	4613      	mov	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4413      	add	r3, r2
 8006216:	005b      	lsls	r3, r3, #1
 8006218:	440b      	add	r3, r1
 800621a:	330a      	adds	r3, #10
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d154      	bne.n	80062cc <USBH_VIDEO_InterfaceInit+0x174>
      {
        uint16_t ep_size = VIDEO_Handle->stream_in[index].EpSize;
 8006222:	7dba      	ldrb	r2, [r7, #22]
 8006224:	68f9      	ldr	r1, [r7, #12]
 8006226:	4613      	mov	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4413      	add	r3, r2
 800622c:	005b      	lsls	r3, r3, #1
 800622e:	440b      	add	r3, r1
 8006230:	3306      	adds	r3, #6
 8006232:	881b      	ldrh	r3, [r3, #0]
 8006234:	813b      	strh	r3, [r7, #8]
        //if (ep_size == 512)
        if ((ep_size > ep_size_in) && (ep_size < UVC_RX_FIFO_SIZE_LIMIT))
 8006236:	893a      	ldrh	r2, [r7, #8]
 8006238:	8abb      	ldrh	r3, [r7, #20]
 800623a:	429a      	cmp	r2, r3
 800623c:	d946      	bls.n	80062cc <USBH_VIDEO_InterfaceInit+0x174>
 800623e:	893b      	ldrh	r3, [r7, #8]
 8006240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006244:	d242      	bcs.n	80062cc <USBH_VIDEO_InterfaceInit+0x174>
        {
          ep_size_in = ep_size;
 8006246:	893b      	ldrh	r3, [r7, #8]
 8006248:	82bb      	strh	r3, [r7, #20]
          VIDEO_Handle->camera.interface = VIDEO_Handle->stream_in[index].interface;
 800624a:	7dba      	ldrb	r2, [r7, #22]
 800624c:	68f9      	ldr	r1, [r7, #12]
 800624e:	4613      	mov	r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	4413      	add	r3, r2
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	440b      	add	r3, r1
 8006258:	3309      	adds	r3, #9
 800625a:	781a      	ldrb	r2, [r3, #0]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
          VIDEO_Handle->camera.AltSettings = VIDEO_Handle->stream_in[index].AltSettings;                
 8006262:	7dba      	ldrb	r2, [r7, #22]
 8006264:	68f9      	ldr	r1, [r7, #12]
 8006266:	4613      	mov	r3, r2
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	4413      	add	r3, r2
 800626c:	005b      	lsls	r3, r3, #1
 800626e:	440b      	add	r3, r1
 8006270:	3308      	adds	r3, #8
 8006272:	781a      	ldrb	r2, [r3, #0]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
          VIDEO_Handle->camera.Ep = VIDEO_Handle->stream_in[index].Ep;
 800627a:	7dba      	ldrb	r2, [r7, #22]
 800627c:	68f9      	ldr	r1, [r7, #12]
 800627e:	4613      	mov	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	005b      	lsls	r3, r3, #1
 8006286:	440b      	add	r3, r1
 8006288:	3304      	adds	r3, #4
 800628a:	781a      	ldrb	r2, [r3, #0]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
          VIDEO_Handle->camera.EpSize = VIDEO_Handle->stream_in[index].EpSize;
 8006292:	7dba      	ldrb	r2, [r7, #22]
 8006294:	68f9      	ldr	r1, [r7, #12]
 8006296:	4613      	mov	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4413      	add	r3, r2
 800629c:	005b      	lsls	r3, r3, #1
 800629e:	440b      	add	r3, r1
 80062a0:	3306      	adds	r3, #6
 80062a2:	881a      	ldrh	r2, [r3, #0]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
          VIDEO_Handle->camera.Poll = VIDEO_Handle->stream_in[index].Poll;         
 80062aa:	7dba      	ldrb	r2, [r7, #22]
 80062ac:	68f9      	ldr	r1, [r7, #12]
 80062ae:	4613      	mov	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4413      	add	r3, r2
 80062b4:	005b      	lsls	r3, r3, #1
 80062b6:	440b      	add	r3, r1
 80062b8:	330c      	adds	r3, #12
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	b2da      	uxtb	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
          VIDEO_Handle->camera.supported = 1;    
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    for (index = 0; index < VIDEO_MAX_VIDEO_STD_INTERFACE; index++)
 80062cc:	7dbb      	ldrb	r3, [r7, #22]
 80062ce:	3301      	adds	r3, #1
 80062d0:	75bb      	strb	r3, [r7, #22]
 80062d2:	7dbb      	ldrb	r3, [r7, #22]
 80062d4:	2b04      	cmp	r3, #4
 80062d6:	d999      	bls.n	800620c <USBH_VIDEO_InterfaceInit+0xb4>
        }
      }
    }
    USBH_DbgLog("Selected EP size: %d bytes", ep_size_in);
 80062d8:	4837      	ldr	r0, [pc, #220]	; (80063b8 <USBH_VIDEO_InterfaceInit+0x260>)
 80062da:	f003 fc0b 	bl	8009af4 <iprintf>
 80062de:	8abb      	ldrh	r3, [r7, #20]
 80062e0:	4619      	mov	r1, r3
 80062e2:	4836      	ldr	r0, [pc, #216]	; (80063bc <USBH_VIDEO_InterfaceInit+0x264>)
 80062e4:	f003 fc06 	bl	8009af4 <iprintf>
 80062e8:	200a      	movs	r0, #10
 80062ea:	f003 fc15 	bl	8009b18 <putchar>
    
    
    /* 3rd Step:  Find and Parse Video interfaces */ 
    USBH_VIDEO_ParseCSDescriptors(phost);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fb4c 	bl	800698c <USBH_VIDEO_ParseCSDescriptors>
    
    /* 4rd Step:  Find desrcroptors for target settings */
    USBH_VIDEO_AnalyseFormatDescriptors(&VIDEO_Handle->class_desc);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	3338      	adds	r3, #56	; 0x38
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 fd09 	bl	8006d10 <USBH_VIDEO_AnalyseFormatDescriptors>
    if (USBH_VIDEO_Best_bFormatIndex == -1)
 80062fe:	4b30      	ldr	r3, [pc, #192]	; (80063c0 <USBH_VIDEO_InterfaceInit+0x268>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006306:	d103      	bne.n	8006310 <USBH_VIDEO_InterfaceInit+0x1b8>
    {
      status = USBH_FAIL;
 8006308:	2302      	movs	r3, #2
 800630a:	75fb      	strb	r3, [r7, #23]
      return USBH_FAIL;
 800630c:	2302      	movs	r3, #2
 800630e:	e049      	b.n	80063a4 <USBH_VIDEO_InterfaceInit+0x24c>
    }
    
    USBH_VIDEO_AnalyseFrameDescriptors(&VIDEO_Handle->class_desc);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	3338      	adds	r3, #56	; 0x38
 8006314:	4618      	mov	r0, r3
 8006316:	f000 fd69 	bl	8006dec <USBH_VIDEO_AnalyseFrameDescriptors>
    if (USBH_VIDEO_Best_bFrameIndex == -1)
 800631a:	4b2a      	ldr	r3, [pc, #168]	; (80063c4 <USBH_VIDEO_InterfaceInit+0x26c>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006322:	d103      	bne.n	800632c <USBH_VIDEO_InterfaceInit+0x1d4>
    {
      status = USBH_FAIL;
 8006324:	2302      	movs	r3, #2
 8006326:	75fb      	strb	r3, [r7, #23]
      return USBH_FAIL;
 8006328:	2302      	movs	r3, #2
 800632a:	e03b      	b.n	80063a4 <USBH_VIDEO_InterfaceInit+0x24c>
    }

    if(VIDEO_Handle->camera.supported == 1)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 8006332:	2b01      	cmp	r3, #1
 8006334:	d12d      	bne.n	8006392 <USBH_VIDEO_InterfaceInit+0x23a>
    {       
      VIDEO_Handle->camera.Pipe = USBH_AllocPipe(phost, VIDEO_Handle->camera.Ep);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800633c:	4619      	mov	r1, r3
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f002 fe33 	bl	8008faa <USBH_AllocPipe>
 8006344:	4603      	mov	r3, r0
 8006346:	461a      	mov	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
      
      /* Open pipe for IN endpoint */
      USBH_OpenPipe(phost,
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f893 110f 	ldrb.w	r1, [r3, #271]	; 0x10f
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f893 2108 	ldrb.w	r2, [r3, #264]	; 0x108
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006360:	f893 081c 	ldrb.w	r0, [r3, #2076]	; 0x81c
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800636a:	f893 381d 	ldrb.w	r3, [r3, #2077]	; 0x81d
 800636e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8006372:	9402      	str	r4, [sp, #8]
 8006374:	2401      	movs	r4, #1
 8006376:	9401      	str	r4, [sp, #4]
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	4603      	mov	r3, r0
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f002 fde5 	bl	8008f4c <USBH_OpenPipe>
                    phost->device.speed,
                    USB_EP_TYPE_ISOC,
                    1000);//WARNING!
                    //VIDEO_Handle->camera.EpSize);//working ok 
      
      USBH_LL_SetToggle(phost, VIDEO_Handle->camera.Pipe, 0);  
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f893 310f 	ldrb.w	r3, [r3, #271]	; 0x10f
 8006388:	2200      	movs	r2, #0
 800638a:	4619      	mov	r1, r3
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f003 f9c6 	bl	800971e <USBH_LL_SetToggle>
    }
    
    VIDEO_Handle->req_state     = VIDEO_REQ_INIT;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2201      	movs	r2, #1
 8006396:	701a      	strb	r2, [r3, #0]
    VIDEO_Handle->control_state = VIDEO_CONTROL_INIT;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2201      	movs	r2, #1
 800639c:	705a      	strb	r2, [r3, #1]
    
    status = USBH_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80063a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	371c      	adds	r7, #28
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd90      	pop	{r4, r7, pc}
 80063ac:	0800a75c 	.word	0x0800a75c
 80063b0:	0800a764 	.word	0x0800a764
 80063b4:	0800a78c 	.word	0x0800a78c
 80063b8:	0800a7b4 	.word	0x0800a7b4
 80063bc:	0800a7c0 	.word	0x0800a7c0
 80063c0:	20000034 	.word	0x20000034
 80063c4:	20000038 	.word	0x20000038

080063c8 <USBH_VIDEO_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the Video class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_VIDEO_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  VIDEO_HandleTypeDef *VIDEO_Handle = (VIDEO_HandleTypeDef *) phost->pActiveClass->pData; 
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063d6:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 80063da:	69db      	ldr	r3, [r3, #28]
 80063dc:	60fb      	str	r3, [r7, #12]
  
  if(VIDEO_Handle->camera.Pipe != 0x00)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f893 310f 	ldrb.w	r3, [r3, #271]	; 0x10f
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d011      	beq.n	800640c <USBH_VIDEO_InterfaceDeInit+0x44>
  {
    USBH_ClosePipe  (phost, VIDEO_Handle->camera.Pipe);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f893 310f 	ldrb.w	r3, [r3, #271]	; 0x10f
 80063ee:	4619      	mov	r1, r3
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f002 fdca 	bl	8008f8a <USBH_ClosePipe>
    USBH_FreePipe  (phost, VIDEO_Handle->camera.Pipe);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f893 310f 	ldrb.w	r3, [r3, #271]	; 0x10f
 80063fc:	4619      	mov	r1, r3
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f002 fdf4 	bl	8008fec <USBH_FreePipe>
    VIDEO_Handle->camera.Pipe = 0;     /* Reset the pipe as Free */  
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
  }
  
  if(phost->pActiveClass->pData)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006412:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 8006416:	69db      	ldr	r3, [r3, #28]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00f      	beq.n	800643c <USBH_VIDEO_InterfaceDeInit+0x74>
  {
    USBH_free (phost->pActiveClass->pData);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006422:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 8006426:	69db      	ldr	r3, [r3, #28]
 8006428:	4618      	mov	r0, r3
 800642a:	f003 f9ed 	bl	8009808 <free>
    phost->pActiveClass->pData = 0;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006434:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 8006438:	2200      	movs	r2, #0
 800643a:	61da      	str	r2, [r3, #28]
  }  
  return USBH_OK ;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
	...

08006448 <USBH_VIDEO_ClassRequest>:
  *         for Video class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_VIDEO_ClassRequest(USBH_HandleTypeDef *phost)
{   
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  VIDEO_HandleTypeDef *VIDEO_Handle = (VIDEO_HandleTypeDef *)phost->pActiveClass->pData;  
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006456:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 800645a:	69db      	ldr	r3, [r3, #28]
 800645c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 800645e:	2301      	movs	r3, #1
 8006460:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 8006462:	2301      	movs	r3, #1
 8006464:	73fb      	strb	r3, [r7, #15]
//  VIDEO_Handle->camera.supported = 1;
  
  /* Switch VIDEO REQ state machine */
  switch (VIDEO_Handle->req_state)
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	3b01      	subs	r3, #1
 800646c:	2b04      	cmp	r3, #4
 800646e:	d85a      	bhi.n	8006526 <USBH_VIDEO_ClassRequest+0xde>
 8006470:	a201      	add	r2, pc, #4	; (adr r2, 8006478 <USBH_VIDEO_ClassRequest+0x30>)
 8006472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006476:	bf00      	nop
 8006478:	0800648d 	.word	0x0800648d
 800647c:	08006513 	.word	0x08006513
 8006480:	0800648d 	.word	0x0800648d
 8006484:	080064d5 	.word	0x080064d5
 8006488:	080064c1 	.word	0x080064c1
  {
  case VIDEO_REQ_INIT:
  case VIDEO_REQ_SET_DEFAULT_IN_INTERFACE:
    if(VIDEO_Handle->camera.supported == 1)
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 8006492:	2b01      	cmp	r3, #1
 8006494:	d110      	bne.n	80064b8 <USBH_VIDEO_ClassRequest+0x70>
    {
      req_status = USBH_SetInterface(phost, 
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800649c:	2200      	movs	r2, #0
 800649e:	4619      	mov	r1, r3
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f001 ffe1 	bl	8008468 <USBH_SetInterface>
 80064a6:	4603      	mov	r3, r0
 80064a8:	73fb      	strb	r3, [r7, #15]
                                     VIDEO_Handle->camera.interface, 
                                     0);
      
      if(req_status == USBH_OK)
 80064aa:	7bfb      	ldrb	r3, [r7, #15]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d13c      	bne.n	800652a <USBH_VIDEO_ClassRequest+0xe2>
      {
        VIDEO_Handle->req_state = VIDEO_REQ_SET_IN_INTERFACE;
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	2204      	movs	r2, #4
 80064b4:	701a      	strb	r2, [r3, #0]
      VIDEO_Handle->req_state = VIDEO_REQ_SET_DEFAULT_IN_INTERFACE;//???
#if (USBH_USE_OS == 1)
      osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
#endif
    }
    break;
 80064b6:	e038      	b.n	800652a <USBH_VIDEO_ClassRequest+0xe2>
      VIDEO_Handle->req_state = VIDEO_REQ_SET_DEFAULT_IN_INTERFACE;//???
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	2203      	movs	r2, #3
 80064bc:	701a      	strb	r2, [r3, #0]
    break;
 80064be:	e034      	b.n	800652a <USBH_VIDEO_ClassRequest+0xe2>
    
  case VIDEO_REQ_CS_REQUESTS:
    if(USBH_VIDEO_HandleCSRequest(phost) == USBH_OK)
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 f84e 	bl	8006562 <USBH_VIDEO_HandleCSRequest>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d130      	bne.n	800652e <USBH_VIDEO_ClassRequest+0xe6>
    {
      VIDEO_Handle->req_state = VIDEO_REQ_SET_IN_INTERFACE;
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	2204      	movs	r2, #4
 80064d0:	701a      	strb	r2, [r3, #0]
    }
    break;
 80064d2:	e02c      	b.n	800652e <USBH_VIDEO_ClassRequest+0xe6>
   
  case VIDEO_REQ_SET_IN_INTERFACE:
    if(VIDEO_Handle->camera.supported == 1)
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d115      	bne.n	800650a <USBH_VIDEO_ClassRequest+0xc2>
    {
      req_status = USBH_SetInterface(phost, 
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	f893 110c 	ldrb.w	r1, [r3, #268]	; 0x10c
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 80064ea:	461a      	mov	r2, r3
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f001 ffbb 	bl	8008468 <USBH_SetInterface>
 80064f2:	4603      	mov	r3, r0
 80064f4:	73fb      	strb	r3, [r7, #15]
                                     VIDEO_Handle->camera.interface, 
                                     VIDEO_Handle->camera.AltSettings);
      
      if(req_status == USBH_OK)
 80064f6:	7bfb      	ldrb	r3, [r7, #15]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d11a      	bne.n	8006532 <USBH_VIDEO_ClassRequest+0xea>
      {
        VIDEO_Handle->req_state = VIDEO_REQ_IDLE;
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	2202      	movs	r2, #2
 8006500:	701a      	strb	r2, [r3, #0]
        VIDEO_Handle->steam_in_state = VIDEO_STATE_START_IN;
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	2202      	movs	r2, #2
 8006506:	709a      	strb	r2, [r3, #2]
      VIDEO_Handle->req_state = VIDEO_REQ_SET_IN_INTERFACE;
#if (USBH_USE_OS == 1)
      osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
#endif       
    }
    break;
 8006508:	e013      	b.n	8006532 <USBH_VIDEO_ClassRequest+0xea>
      VIDEO_Handle->req_state = VIDEO_REQ_SET_IN_INTERFACE;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	2204      	movs	r2, #4
 800650e:	701a      	strb	r2, [r3, #0]
    break;
 8006510:	e00f      	b.n	8006532 <USBH_VIDEO_ClassRequest+0xea>

  case VIDEO_REQ_IDLE:
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE); 
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006518:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800651c:	2102      	movs	r1, #2
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	4798      	blx	r3
    status  = USBH_OK;    
 8006522:	2300      	movs	r3, #0
 8006524:	75fb      	strb	r3, [r7, #23]
#if (USBH_USE_OS == 1)
      osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif
  default:
    break;
 8006526:	bf00      	nop
 8006528:	e004      	b.n	8006534 <USBH_VIDEO_ClassRequest+0xec>
    break;
 800652a:	bf00      	nop
 800652c:	e002      	b.n	8006534 <USBH_VIDEO_ClassRequest+0xec>
    break;
 800652e:	bf00      	nop
 8006530:	e000      	b.n	8006534 <USBH_VIDEO_ClassRequest+0xec>
    break;
 8006532:	bf00      	nop
  }
  return status; 
 8006534:	7dfb      	ldrb	r3, [r7, #23]
}
 8006536:	4618      	mov	r0, r3
 8006538:	3718      	adds	r7, #24
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop

08006540 <USBH_VIDEO_CSRequest>:
  *         for Video class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_VIDEO_CSRequest(USBH_HandleTypeDef *phost, uint8_t feature, uint8_t channel)
{   
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	460b      	mov	r3, r1
 800654a:	70fb      	strb	r3, [r7, #3]
 800654c:	4613      	mov	r3, r2
 800654e:	70bb      	strb	r3, [r7, #2]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006550:	2301      	movs	r3, #1
 8006552:	73fb      	strb	r3, [r7, #15]

  return status; 
 8006554:	7bfb      	ldrb	r3, [r7, #15]
}
 8006556:	4618      	mov	r0, r3
 8006558:	3714      	adds	r7, #20
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <USBH_VIDEO_HandleCSRequest>:
  *         and associated channels for Video class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_VIDEO_HandleCSRequest(USBH_HandleTypeDef *phost)
{ 
 8006562:	b580      	push	{r7, lr}
 8006564:	b084      	sub	sp, #16
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_BUSY;
 800656a:	2301      	movs	r3, #1
 800656c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef cs_status = USBH_BUSY;
 800656e:	2301      	movs	r3, #1
 8006570:	73bb      	strb	r3, [r7, #14]
  VIDEO_HandleTypeDef *VIDEO_Handle =  (VIDEO_HandleTypeDef *) phost->pActiveClass->pData;  
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006578:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 800657c:	69db      	ldr	r3, [r3, #28]
 800657e:	60bb      	str	r3, [r7, #8]
        
  cs_status = USBH_VIDEO_CSRequest(phost, 
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8006586:	2200      	movs	r2, #0
 8006588:	4619      	mov	r1, r3
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f7ff ffd8 	bl	8006540 <USBH_VIDEO_CSRequest>
 8006590:	4603      	mov	r3, r0
 8006592:	73bb      	strb	r3, [r7, #14]
  
  if(cs_status != USBH_BUSY)
  {        
  }
  
  return status;
 8006594:	7bfb      	ldrb	r3, [r7, #15]
}
 8006596:	4618      	mov	r0, r3
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <USBH_VIDEO_ProcessDummy>:

//Used because of USN HOST HAL need it (BgndProcess)
static USBH_StatusTypeDef USBH_VIDEO_ProcessDummy(USBH_HandleTypeDef *phost)
{
 800659e:	b480      	push	{r7}
 80065a0:	b083      	sub	sp, #12
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  return USBH_OK ;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <USBH_VIDEO_Process>:
            MUST be called frequently!
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_VIDEO_Process(USBH_HandleTypeDef *phost)
{   
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80065bc:	2301      	movs	r3, #1
 80065be:	73fb      	strb	r3, [r7, #15]
  VIDEO_HandleTypeDef *VIDEO_Handle =  (VIDEO_HandleTypeDef *)  phost->pActiveClass->pData;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065c6:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 80065ca:	69db      	ldr	r3, [r3, #28]
 80065cc:	60bb      	str	r3, [r7, #8]
  
  if(VIDEO_Handle->camera.supported == 1)
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d102      	bne.n	80065de <USBH_VIDEO_Process+0x2a>
  {
    USBH_VIDEO_InputStream(phost);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f805 	bl	80065e8 <USBH_VIDEO_InputStream>
  }
 
  return status;
 80065de:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <USBH_VIDEO_InputStream>:
  * @brief  Handle Input stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_VIDEO_InputStream (USBH_HandleTypeDef *phost)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b086      	sub	sp, #24
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  // Called from USB_HOST_fast_class_call
  USBH_StatusTypeDef status = USBH_BUSY;
 80065f0:	2301      	movs	r3, #1
 80065f2:	75fb      	strb	r3, [r7, #23]
  VIDEO_HandleTypeDef *VIDEO_Handle =  (VIDEO_HandleTypeDef*) phost->pActiveClass->pData;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065fa:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 80065fe:	69db      	ldr	r3, [r3, #28]
 8006600:	613b      	str	r3, [r7, #16]
  USBH_URBStateTypeDef result;
  
  switch(VIDEO_Handle->steam_in_state)
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	789b      	ldrb	r3, [r3, #2]
 8006606:	2b02      	cmp	r3, #2
 8006608:	d002      	beq.n	8006610 <USBH_VIDEO_InputStream+0x28>
 800660a:	2b03      	cmp	r3, #3
 800660c:	d00f      	beq.n	800662e <USBH_VIDEO_InputStream+0x46>
                            VIDEO_Handle->camera.Pipe);
      }
    break;
    
    default:
      break;
 800660e:	e04a      	b.n	80066a6 <USBH_VIDEO_InputStream+0xbe>
                            VIDEO_Handle->camera.EpSize,
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
      USBH_IsocReceiveData(phost,
 8006616:	461a      	mov	r2, r3
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	f893 310f 	ldrb.w	r3, [r3, #271]	; 0x10f
 800661e:	4924      	ldr	r1, [pc, #144]	; (80066b0 <USBH_VIDEO_InputStream+0xc8>)
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f002 fc78 	bl	8008f16 <USBH_IsocReceiveData>
      VIDEO_Handle->steam_in_state = VIDEO_STATE_DATA_IN;
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	2203      	movs	r2, #3
 800662a:	709a      	strb	r2, [r3, #2]
    break;
 800662c:	e03b      	b.n	80066a6 <USBH_VIDEO_InputStream+0xbe>
      result = USBH_LL_GetURBState(phost, VIDEO_Handle->camera.Pipe);
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	f893 310f 	ldrb.w	r3, [r3, #271]	; 0x10f
 8006634:	4619      	mov	r1, r3
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f003 f84e 	bl	80096d8 <USBH_LL_GetURBState>
 800663c:	4603      	mov	r3, r0
 800663e:	73fb      	strb	r3, [r7, #15]
      if((result == USBH_URB_DONE) && ((phost->Timer - VIDEO_Handle->camera.timer) >= VIDEO_Handle->camera.Poll))
 8006640:	7bfb      	ldrb	r3, [r7, #15]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d12e      	bne.n	80066a4 <USBH_VIDEO_InputStream+0xbc>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800664c:	f8d3 2a98 	ldr.w	r2, [r3, #2712]	; 0xa98
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
 800665e:	4293      	cmp	r3, r2
 8006660:	d320      	bcc.n	80066a4 <USBH_VIDEO_InputStream+0xbc>
        VIDEO_Handle->camera.timer = phost->Timer;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006668:	f8d3 2a98 	ldr.w	r2, [r3, #2712]	; 0xa98
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        volatile uint32_t rxlen = USBH_LL_GetLastXferSize(phost, VIDEO_Handle->camera.Pipe);//Return the last transfered packet size.
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	f893 310f 	ldrb.w	r3, [r3, #271]	; 0x10f
 8006678:	4619      	mov	r1, r3
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f002 ff92 	bl	80095a4 <USBH_LL_GetLastXferSize>
 8006680:	4603      	mov	r3, r0
 8006682:	60bb      	str	r3, [r7, #8]
        video_stream_process_packet((uint16_t)rxlen);
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	b29b      	uxth	r3, r3
 8006688:	4618      	mov	r0, r3
 800668a:	f000 fc33 	bl	8006ef4 <video_stream_process_packet>
                            VIDEO_Handle->camera.EpSize,
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
        USBH_IsocReceiveData(phost,
 8006694:	461a      	mov	r2, r3
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f893 310f 	ldrb.w	r3, [r3, #271]	; 0x10f
 800669c:	4904      	ldr	r1, [pc, #16]	; (80066b0 <USBH_VIDEO_InputStream+0xc8>)
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f002 fc39 	bl	8008f16 <USBH_IsocReceiveData>
    break;
 80066a4:	bf00      	nop
  }
  
  
  
  return status;  
 80066a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3718      	adds	r7, #24
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	2001c32c 	.word	0x2001c32c

080066b4 <USBH_VIDEO_SOFProcess>:
  *         The function is for managing the SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_VIDEO_SOFProcess (USBH_HandleTypeDef *phost)
{    
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
	...

080066cc <USBH_VS_SetCur>:

//*****************************************************************************
//*****************************************************************************

USBH_StatusTypeDef USBH_VS_SetCur(USBH_HandleTypeDef *phost, uint16_t request_type)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b086      	sub	sp, #24
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	460b      	mov	r3, r1
 80066d6:	807b      	strh	r3, [r7, #2]
  uint16_t wLength = 26;
 80066d8:	231a      	movs	r3, #26
 80066da:	82fb      	strh	r3, [r7, #22]
  
  if (request_type == (VS_PROBE_CONTROL << 8))
 80066dc:	887b      	ldrh	r3, [r7, #2]
 80066de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066e2:	d114      	bne.n	800670e <USBH_VS_SetCur+0x42>
  {
    memset(&ProbeParams, 0, sizeof(ProbeParams));
 80066e4:	2222      	movs	r2, #34	; 0x22
 80066e6:	2100      	movs	r1, #0
 80066e8:	481d      	ldr	r0, [pc, #116]	; (8006760 <USBH_VS_SetCur+0x94>)
 80066ea:	f003 fa70 	bl	8009bce <memset>
    // Set needed params, at commit stage this parameters must be receied during "GET_CUR"
    ProbeParams.bmHint = 1;
 80066ee:	4b1c      	ldr	r3, [pc, #112]	; (8006760 <USBH_VS_SetCur+0x94>)
 80066f0:	2201      	movs	r2, #1
 80066f2:	801a      	strh	r2, [r3, #0]
    ProbeParams.bFormatIndex = USBH_VIDEO_Best_bFormatIndex;             
 80066f4:	4b1b      	ldr	r3, [pc, #108]	; (8006764 <USBH_VS_SetCur+0x98>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	4b19      	ldr	r3, [pc, #100]	; (8006760 <USBH_VS_SetCur+0x94>)
 80066fc:	709a      	strb	r2, [r3, #2]
    ProbeParams.bFrameIndex = USBH_VIDEO_Best_bFrameIndex;
 80066fe:	4b1a      	ldr	r3, [pc, #104]	; (8006768 <USBH_VS_SetCur+0x9c>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	b2da      	uxtb	r2, r3
 8006704:	4b16      	ldr	r3, [pc, #88]	; (8006760 <USBH_VS_SetCur+0x94>)
 8006706:	70da      	strb	r2, [r3, #3]
    
    //Maximum framerate can be selected here
    ProbeParams.dwFrameInterval = 333333;//30 FPS
 8006708:	4b15      	ldr	r3, [pc, #84]	; (8006760 <USBH_VS_SetCur+0x94>)
 800670a:	4a18      	ldr	r2, [pc, #96]	; (800676c <USBH_VS_SetCur+0xa0>)
 800670c:	605a      	str	r2, [r3, #4]
    //ProbeParams.dwFrameInterval = 2000000;//5 FPS
  }
  
  //H2D - host to device
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2221      	movs	r2, #33	; 0x21
 8006712:	741a      	strb	r2, [r3, #16]
  USB_REQ_TYPE_CLASS;
  
  VIDEO_HandleTypeDef *VIDEO_Handle;
  VIDEO_Handle =  (VIDEO_HandleTypeDef *) phost->pActiveClass->pData;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800671a:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 800671e:	69db      	ldr	r3, [r3, #28]
 8006720:	613b      	str	r3, [r7, #16]
  
  phost->Control.setup.b.bRequest = UVC_SET_CUR;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2201      	movs	r2, #1
 8006726:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = request_type;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	887a      	ldrh	r2, [r7, #2]
 800672c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = VIDEO_Handle->camera.interface; //Video Streaming interface number
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8006734:	b29a      	uxth	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	8afa      	ldrh	r2, [r7, #22]
 800673e:	82da      	strh	r2, [r3, #22]
  
  USBH_StatusTypeDef status;
  do 
  {
    status = USBH_CtlReq(phost, (uint8_t *)&ProbeParams, wLength);
 8006740:	8afb      	ldrh	r3, [r7, #22]
 8006742:	461a      	mov	r2, r3
 8006744:	4906      	ldr	r1, [pc, #24]	; (8006760 <USBH_VS_SetCur+0x94>)
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f002 f9bd 	bl	8008ac6 <USBH_CtlReq>
 800674c:	4603      	mov	r3, r0
 800674e:	73fb      	strb	r3, [r7, #15]
  } while (status == USBH_BUSY);
 8006750:	7bfb      	ldrb	r3, [r7, #15]
 8006752:	2b01      	cmp	r3, #1
 8006754:	d0f4      	beq.n	8006740 <USBH_VS_SetCur+0x74>
  
  return USBH_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3718      	adds	r7, #24
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	2001c308 	.word	0x2001c308
 8006764:	20000034 	.word	0x20000034
 8006768:	20000038 	.word	0x20000038
 800676c:	00051615 	.word	0x00051615

08006770 <USBH_VS_GetCur>:

USBH_StatusTypeDef USBH_VS_GetCur(USBH_HandleTypeDef *phost, uint16_t request_type)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	460b      	mov	r3, r1
 800677a:	807b      	strh	r3, [r7, #2]
  memset(&ProbeParams, 0, sizeof(ProbeParams));
 800677c:	2222      	movs	r2, #34	; 0x22
 800677e:	2100      	movs	r1, #0
 8006780:	481c      	ldr	r0, [pc, #112]	; (80067f4 <USBH_VS_GetCur+0x84>)
 8006782:	f003 fa24 	bl	8009bce <memset>
  uint16_t wLength = 26;
 8006786:	231a      	movs	r3, #26
 8006788:	82fb      	strh	r3, [r7, #22]

  //H2D - host to device
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	22a1      	movs	r2, #161	; 0xa1
 800678e:	741a      	strb	r2, [r3, #16]
  USB_REQ_TYPE_CLASS;
  
  VIDEO_HandleTypeDef *VIDEO_Handle;
  VIDEO_Handle =  (VIDEO_HandleTypeDef *) phost->pActiveClass->pData;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006796:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 800679a:	69db      	ldr	r3, [r3, #28]
 800679c:	613b      	str	r3, [r7, #16]
  
  phost->Control.setup.b.bRequest = UVC_GET_CUR;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2281      	movs	r2, #129	; 0x81
 80067a2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = request_type;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	887a      	ldrh	r2, [r7, #2]
 80067a8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = VIDEO_Handle->camera.interface; //Video Streaming interface number
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	8afa      	ldrh	r2, [r7, #22]
 80067ba:	82da      	strh	r2, [r3, #22]
  
  USBH_StatusTypeDef status;
  do 
  {
    status = USBH_CtlReq(phost, (uint8_t *)&ProbeParams, wLength);
 80067bc:	8afb      	ldrh	r3, [r7, #22]
 80067be:	461a      	mov	r2, r3
 80067c0:	490c      	ldr	r1, [pc, #48]	; (80067f4 <USBH_VS_GetCur+0x84>)
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f002 f97f 	bl	8008ac6 <USBH_CtlReq>
 80067c8:	4603      	mov	r3, r0
 80067ca:	73fb      	strb	r3, [r7, #15]
  } while (status == USBH_BUSY);
 80067cc:	7bfb      	ldrb	r3, [r7, #15]
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d0f4      	beq.n	80067bc <USBH_VS_GetCur+0x4c>
  
  if (status == USBH_OK)
 80067d2:	7bfb      	ldrb	r3, [r7, #15]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d108      	bne.n	80067ea <USBH_VS_GetCur+0x7a>
  {
    if (ProbeParams.dwMaxVideoFrameSize > 0)
 80067d8:	4b06      	ldr	r3, [pc, #24]	; (80067f4 <USBH_VS_GetCur+0x84>)
 80067da:	f8d3 3012 	ldr.w	r3, [r3, #18]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <USBH_VS_GetCur+0x76>
    {
      return USBH_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	e002      	b.n	80067ec <USBH_VS_GetCur+0x7c>
    }
    else
      return USBH_FAIL;
 80067e6:	2302      	movs	r3, #2
 80067e8:	e000      	b.n	80067ec <USBH_VS_GetCur+0x7c>
  }
  
  return status;
 80067ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3718      	adds	r7, #24
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	2001c308 	.word	0x2001c308

080067f8 <USBH_VIDEO_FindStreamingIN>:
  * @brief  Find IN Video Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_VIDEO_FindStreamingIN(USBH_HandleTypeDef *phost)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL ;
 8006800:	2302      	movs	r3, #2
 8006802:	737b      	strb	r3, [r7, #13]
  VIDEO_HandleTypeDef *VIDEO_Handle;

  VIDEO_Handle = (VIDEO_HandleTypeDef *) phost->pActiveClass->pData; 
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800680a:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 800680e:	69db      	ldr	r3, [r3, #28]
 8006810:	60bb      	str	r3, [r7, #8]

  // Look For VIDEOSTREAMING IN interface (data FROM camera)
  alt_settings = 0;
 8006812:	2300      	movs	r3, #0
 8006814:	73bb      	strb	r3, [r7, #14]
  for (interface = 0;  interface < USBH_MAX_NUM_INTERFACES ; interface ++ )
 8006816:	2300      	movs	r3, #0
 8006818:	73fb      	strb	r3, [r7, #15]
 800681a:	e0a7      	b.n	800696c <USBH_VIDEO_FindStreamingIN+0x174>
  {
    if((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == CC_VIDEO) &&
 800681c:	7bfb      	ldrb	r3, [r7, #15]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	2132      	movs	r1, #50	; 0x32
 8006822:	fb01 f303 	mul.w	r3, r1, r3
 8006826:	4413      	add	r3, r2
 8006828:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 800682c:	3307      	adds	r3, #7
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	2b0e      	cmp	r3, #14
 8006832:	f040 8098 	bne.w	8006966 <USBH_VIDEO_FindStreamingIN+0x16e>
       (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_VIDEOSTREAMING))
 8006836:	7bfb      	ldrb	r3, [r7, #15]
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	2132      	movs	r1, #50	; 0x32
 800683c:	fb01 f303 	mul.w	r3, r1, r3
 8006840:	4413      	add	r3, r2
 8006842:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8006846:	3308      	adds	r3, #8
 8006848:	781b      	ldrb	r3, [r3, #0]
    if((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == CC_VIDEO) &&
 800684a:	2b02      	cmp	r3, #2
 800684c:	f040 808b 	bne.w	8006966 <USBH_VIDEO_FindStreamingIN+0x16e>
    {

      if((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80) && // is IN EP
 8006850:	7bfb      	ldrb	r3, [r7, #15]
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	2132      	movs	r1, #50	; 0x32
 8006856:	fb01 f303 	mul.w	r3, r1, r3
 800685a:	4413      	add	r3, r2
 800685c:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8006860:	330e      	adds	r3, #14
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	b25b      	sxtb	r3, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	da7d      	bge.n	8006966 <USBH_VIDEO_FindStreamingIN+0x16e>
         (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0))
 800686a:	7bfb      	ldrb	r3, [r7, #15]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	2132      	movs	r1, #50	; 0x32
 8006870:	fb01 f303 	mul.w	r3, r1, r3
 8006874:	4413      	add	r3, r2
 8006876:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 800687a:	3310      	adds	r3, #16
 800687c:	881b      	ldrh	r3, [r3, #0]
      if((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80) && // is IN EP
 800687e:	2b00      	cmp	r3, #0
 8006880:	d071      	beq.n	8006966 <USBH_VIDEO_FindStreamingIN+0x16e>
      {
        VIDEO_Handle->stream_in[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006882:	7bfb      	ldrb	r3, [r7, #15]
 8006884:	7bba      	ldrb	r2, [r7, #14]
 8006886:	6879      	ldr	r1, [r7, #4]
 8006888:	2032      	movs	r0, #50	; 0x32
 800688a:	fb00 f303 	mul.w	r3, r0, r3
 800688e:	440b      	add	r3, r1
 8006890:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8006894:	330e      	adds	r3, #14
 8006896:	7818      	ldrb	r0, [r3, #0]
 8006898:	68b9      	ldr	r1, [r7, #8]
 800689a:	4613      	mov	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4413      	add	r3, r2
 80068a0:	005b      	lsls	r3, r3, #1
 80068a2:	440b      	add	r3, r1
 80068a4:	3304      	adds	r3, #4
 80068a6:	4602      	mov	r2, r0
 80068a8:	701a      	strb	r2, [r3, #0]
        VIDEO_Handle->stream_in[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068aa:	7bfb      	ldrb	r3, [r7, #15]
 80068ac:	7bba      	ldrb	r2, [r7, #14]
 80068ae:	6879      	ldr	r1, [r7, #4]
 80068b0:	2032      	movs	r0, #50	; 0x32
 80068b2:	fb00 f303 	mul.w	r3, r0, r3
 80068b6:	440b      	add	r3, r1
 80068b8:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 80068bc:	3310      	adds	r3, #16
 80068be:	8818      	ldrh	r0, [r3, #0]
 80068c0:	68b9      	ldr	r1, [r7, #8]
 80068c2:	4613      	mov	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	005b      	lsls	r3, r3, #1
 80068ca:	440b      	add	r3, r1
 80068cc:	3306      	adds	r3, #6
 80068ce:	4602      	mov	r2, r0
 80068d0:	801a      	strh	r2, [r3, #0]
        VIDEO_Handle->stream_in[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;        
 80068d2:	7bfb      	ldrb	r3, [r7, #15]
 80068d4:	7bba      	ldrb	r2, [r7, #14]
 80068d6:	6879      	ldr	r1, [r7, #4]
 80068d8:	2032      	movs	r0, #50	; 0x32
 80068da:	fb00 f303 	mul.w	r3, r0, r3
 80068de:	440b      	add	r3, r1
 80068e0:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 80068e4:	3304      	adds	r3, #4
 80068e6:	7818      	ldrb	r0, [r3, #0]
 80068e8:	68b9      	ldr	r1, [r7, #8]
 80068ea:	4613      	mov	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	005b      	lsls	r3, r3, #1
 80068f2:	440b      	add	r3, r1
 80068f4:	3309      	adds	r3, #9
 80068f6:	4602      	mov	r2, r0
 80068f8:	701a      	strb	r2, [r3, #0]
        VIDEO_Handle->stream_in[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 80068fa:	7bfb      	ldrb	r3, [r7, #15]
 80068fc:	7bba      	ldrb	r2, [r7, #14]
 80068fe:	6879      	ldr	r1, [r7, #4]
 8006900:	2032      	movs	r0, #50	; 0x32
 8006902:	fb00 f303 	mul.w	r3, r0, r3
 8006906:	440b      	add	r3, r1
 8006908:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 800690c:	3305      	adds	r3, #5
 800690e:	7818      	ldrb	r0, [r3, #0]
 8006910:	68b9      	ldr	r1, [r7, #8]
 8006912:	4613      	mov	r3, r2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4413      	add	r3, r2
 8006918:	005b      	lsls	r3, r3, #1
 800691a:	440b      	add	r3, r1
 800691c:	3308      	adds	r3, #8
 800691e:	4602      	mov	r2, r0
 8006920:	701a      	strb	r2, [r3, #0]
        VIDEO_Handle->stream_in[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;   
 8006922:	7bfb      	ldrb	r3, [r7, #15]
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	2132      	movs	r1, #50	; 0x32
 8006928:	fb01 f303 	mul.w	r3, r1, r3
 800692c:	4413      	add	r3, r2
 800692e:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8006932:	3312      	adds	r3, #18
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	7bba      	ldrb	r2, [r7, #14]
 8006938:	b298      	uxth	r0, r3
 800693a:	68b9      	ldr	r1, [r7, #8]
 800693c:	4613      	mov	r3, r2
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4413      	add	r3, r2
 8006942:	005b      	lsls	r3, r3, #1
 8006944:	440b      	add	r3, r1
 8006946:	330c      	adds	r3, #12
 8006948:	4602      	mov	r2, r0
 800694a:	801a      	strh	r2, [r3, #0]
        VIDEO_Handle->stream_in[alt_settings].valid = 1; 
 800694c:	7bba      	ldrb	r2, [r7, #14]
 800694e:	68b9      	ldr	r1, [r7, #8]
 8006950:	4613      	mov	r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4413      	add	r3, r2
 8006956:	005b      	lsls	r3, r3, #1
 8006958:	440b      	add	r3, r1
 800695a:	330a      	adds	r3, #10
 800695c:	2201      	movs	r2, #1
 800695e:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 8006960:	7bbb      	ldrb	r3, [r7, #14]
 8006962:	3301      	adds	r3, #1
 8006964:	73bb      	strb	r3, [r7, #14]
  for (interface = 0;  interface < USBH_MAX_NUM_INTERFACES ; interface ++ )
 8006966:	7bfb      	ldrb	r3, [r7, #15]
 8006968:	3301      	adds	r3, #1
 800696a:	73fb      	strb	r3, [r7, #15]
 800696c:	7bfb      	ldrb	r3, [r7, #15]
 800696e:	2b09      	cmp	r3, #9
 8006970:	f67f af54 	bls.w	800681c <USBH_VIDEO_FindStreamingIN+0x24>
      }
    }
  } 
  
  if(alt_settings > 0)
 8006974:	7bbb      	ldrb	r3, [r7, #14]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d001      	beq.n	800697e <USBH_VIDEO_FindStreamingIN+0x186>
  {  
     status = USBH_OK;
 800697a:	2300      	movs	r3, #0
 800697c:	737b      	strb	r3, [r7, #13]
  }
  
  return status;
 800697e:	7b7b      	ldrb	r3, [r7, #13]
}
 8006980:	4618      	mov	r0, r3
 8006982:	3714      	adds	r7, #20
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <USBH_VIDEO_ParseCSDescriptors>:
  * @brief  Parse VC and interfaces Descriptors
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_VIDEO_ParseCSDescriptors(USBH_HandleTypeDef *phost)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b086      	sub	sp, #24
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  //Pointer to header of descriptor
  USBH_DescHeader_t            *pdesc ;
  uint16_t                      ptr;
  int8_t                        itf_index = 0;
 8006994:	2300      	movs	r3, #0
 8006996:	74fb      	strb	r3, [r7, #19]
  int8_t                        itf_number = 0; 
 8006998:	2300      	movs	r3, #0
 800699a:	74bb      	strb	r3, [r7, #18]
  int8_t                        alt_setting;   
  VIDEO_HandleTypeDef           *VIDEO_Handle;
  
  VIDEO_Handle =  (VIDEO_HandleTypeDef *) phost->pActiveClass->pData;  
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069a2:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 80069a6:	69db      	ldr	r3, [r3, #28]
 80069a8:	60fb      	str	r3, [r7, #12]
  pdesc   = (USBH_DescHeader_t *)(phost->device.CfgDesc_Raw);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	331c      	adds	r3, #28
 80069ae:	617b      	str	r3, [r7, #20]
  ptr = USB_LEN_CFG_DESC;
 80069b0:	2309      	movs	r3, #9
 80069b2:	813b      	strh	r3, [r7, #8]
  
  VIDEO_Handle->class_desc.InputTerminalNum = 0;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
  VIDEO_Handle->class_desc.OutputTerminalNum = 0;  
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
  VIDEO_Handle->class_desc.ASNum = 0;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
  
  while(ptr < phost->device.CfgDesc.wTotalLength)
 80069cc:	e03b      	b.n	8006a46 <USBH_VIDEO_ParseCSDescriptors+0xba>
  {
    pdesc = USBH_GetNextDesc((uint8_t*) pdesc, &ptr);
 80069ce:	f107 0308 	add.w	r3, r7, #8
 80069d2:	4619      	mov	r1, r3
 80069d4:	6978      	ldr	r0, [r7, #20]
 80069d6:	f002 f85b 	bl	8008a90 <USBH_GetNextDesc>
 80069da:	6178      	str	r0, [r7, #20]
    
    switch (pdesc->bDescriptorType)
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	785b      	ldrb	r3, [r3, #1]
 80069e0:	2b04      	cmp	r3, #4
 80069e2:	d002      	beq.n	80069ea <USBH_VIDEO_ParseCSDescriptors+0x5e>
 80069e4:	2b24      	cmp	r3, #36	; 0x24
 80069e6:	d011      	beq.n	8006a0c <USBH_VIDEO_ParseCSDescriptors+0x80>
 80069e8:	e02c      	b.n	8006a44 <USBH_VIDEO_ParseCSDescriptors+0xb8>
    {
      
    case USB_DESC_TYPE_INTERFACE:
      itf_number = *((uint8_t *)pdesc + 2);//bInterfaceNumber
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	3302      	adds	r3, #2
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	74bb      	strb	r3, [r7, #18]
      alt_setting = *((uint8_t *)pdesc + 3);
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	3303      	adds	r3, #3
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	72fb      	strb	r3, [r7, #11]
      itf_index = USBH_FindInterfaceIndex(phost, itf_number, alt_setting);     
 80069fa:	7cbb      	ldrb	r3, [r7, #18]
 80069fc:	7afa      	ldrb	r2, [r7, #11]
 80069fe:	4619      	mov	r1, r3
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 fd40 	bl	8007486 <USBH_FindInterfaceIndex>
 8006a06:	4603      	mov	r3, r0
 8006a08:	74fb      	strb	r3, [r7, #19]
      break;
 8006a0a:	e01c      	b.n	8006a46 <USBH_VIDEO_ParseCSDescriptors+0xba>
      
   
    case USB_DESC_TYPE_CS_INTERFACE://0x24 - Class specific descriptor 
      if(itf_number <= phost->device.CfgDesc.bNumInterfaces)
 8006a0c:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006a16:	f892 283c 	ldrb.w	r2, [r2, #2108]	; 0x83c
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	dc13      	bgt.n	8006a46 <USBH_VIDEO_ParseCSDescriptors+0xba>
      {
        
        ParseCSDescriptors(&VIDEO_Handle->class_desc,
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8006a24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	2132      	movs	r1, #50	; 0x32
 8006a2c:	fb01 f303 	mul.w	r3, r1, r3
 8006a30:	4413      	add	r3, r2
 8006a32:	f503 53c2 	add.w	r3, r3, #6208	; 0x1840
 8006a36:	3308      	adds	r3, #8
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	f000 f80f 	bl	8006a60 <ParseCSDescriptors>
                           phost->device.CfgDesc.Itf_Desc[itf_index].bInterfaceSubClass, 
                           (uint8_t *)pdesc);
      }
      break;
 8006a42:	e000      	b.n	8006a46 <USBH_VIDEO_ParseCSDescriptors+0xba>
      
    default:
      break; 
 8006a44:	bf00      	nop
  while(ptr < phost->device.CfgDesc.wTotalLength)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a4c:	f8b3 283a 	ldrh.w	r2, [r3, #2106]	; 0x83a
 8006a50:	893b      	ldrh	r3, [r7, #8]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d8bb      	bhi.n	80069ce <USBH_VIDEO_ParseCSDescriptors+0x42>
    }
  }
  return USBH_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3718      	adds	r7, #24
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <ParseCSDescriptors>:
  * @retval USBH Status
  */
USBH_StatusTypeDef ParseCSDescriptors(VIDEO_ClassSpecificDescTypedef *class_desc, 
                                      uint8_t vs_subclass, 
                                      uint8_t *pdesc)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b088      	sub	sp, #32
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	460b      	mov	r3, r1
 8006a6a:	607a      	str	r2, [r7, #4]
 8006a6c:	72fb      	strb	r3, [r7, #11]
  uint8_t desc_number = 0;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	77fb      	strb	r3, [r7, #31]
    
  if(vs_subclass == USB_SUBCLASS_VIDEOCONTROL)
 8006a72:	7afb      	ldrb	r3, [r7, #11]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d141      	bne.n	8006afc <ParseCSDescriptors+0x9c>
  {
    switch(pdesc[2])
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	3302      	adds	r3, #2
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	2b03      	cmp	r3, #3
 8006a82:	f200 812c 	bhi.w	8006cde <ParseCSDescriptors+0x27e>
 8006a86:	a201      	add	r2, pc, #4	; (adr r2, 8006a8c <ParseCSDescriptors+0x2c>)
 8006a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8c:	08006a9d 	.word	0x08006a9d
 8006a90:	08006aa5 	.word	0x08006aa5
 8006a94:	08006ac1 	.word	0x08006ac1
 8006a98:	08006adf 	.word	0x08006adf
    {
    case UVC_VC_HEADER: 
      class_desc->cs_desc.HeaderDesc = (VIDEO_HeaderDescTypeDef *)pdesc;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	601a      	str	r2, [r3, #0]
      break;
 8006aa2:	e129      	b.n	8006cf8 <ParseCSDescriptors+0x298>
      
    case UVC_VC_INPUT_TERMINAL:
      class_desc->cs_desc.InputTerminalDesc[class_desc->InputTerminalNum++] = (VIDEO_ITDescTypeDef*) pdesc;    
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8006aaa:	1c5a      	adds	r2, r3, #1
 8006aac:	b291      	uxth	r1, r2
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	f8a2 10c2 	strh.w	r1, [r2, #194]	; 0xc2
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	4413      	add	r3, r2
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	605a      	str	r2, [r3, #4]
      break;
 8006abe:	e11b      	b.n	8006cf8 <ParseCSDescriptors+0x298>
      
    case UVC_VC_OUTPUT_TERMINAL:
      class_desc->cs_desc.OutputTerminalDesc[class_desc->OutputTerminalNum++] = (VIDEO_OTDescTypeDef*) pdesc;   
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8006ac6:	1c5a      	adds	r2, r3, #1
 8006ac8:	b291      	uxth	r1, r2
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	f8a2 10c4 	strh.w	r1, [r2, #196]	; 0xc4
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	330a      	adds	r3, #10
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4413      	add	r3, r2
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	605a      	str	r2, [r3, #4]
      break;
 8006adc:	e10c      	b.n	8006cf8 <ParseCSDescriptors+0x298>
      
    case UVC_VC_SELECTOR_UNIT:
      class_desc->cs_desc.SelectorUnitDesc[class_desc->SelectorUnitNum++] = (VIDEO_SelectorDescTypeDef*) pdesc; 
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8006ae4:	1c5a      	adds	r2, r3, #1
 8006ae6:	b291      	uxth	r1, r2
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	f8a2 10c6 	strh.w	r1, [r2, #198]	; 0xc6
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	3310      	adds	r3, #16
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	605a      	str	r2, [r3, #4]
      break;    
 8006afa:	e0fd      	b.n	8006cf8 <ParseCSDescriptors+0x298>

    default: 
      break;
    }
  }
  else if(vs_subclass == USB_SUBCLASS_VIDEOSTREAMING)
 8006afc:	7afb      	ldrb	r3, [r7, #11]
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	f040 80fa 	bne.w	8006cf8 <ParseCSDescriptors+0x298>
  {
    switch(pdesc[2])
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	3302      	adds	r3, #2
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	2b06      	cmp	r3, #6
 8006b0e:	f200 80e8 	bhi.w	8006ce2 <ParseCSDescriptors+0x282>
 8006b12:	a201      	add	r2, pc, #4	; (adr r2, 8006b18 <ParseCSDescriptors+0xb8>)
 8006b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b18:	08006b35 	.word	0x08006b35
 8006b1c:	08006ce3 	.word	0x08006ce3
 8006b20:	08006ce3 	.word	0x08006ce3
 8006b24:	08006c21 	.word	0x08006c21
 8006b28:	08006c49 	.word	0x08006c49
 8006b2c:	08006b5f 	.word	0x08006b5f
 8006b30:	08006b89 	.word	0x08006b89
    {      
    case UVC_VS_INPUT_HEADER:
      if (class_desc->InputHeaderNum < VIDEO_MAX_NUM_IN_HEADER)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	f200 80d3 	bhi.w	8006ce6 <ParseCSDescriptors+0x286>
        class_desc->vs_desc.InputHeader[class_desc->InputHeaderNum++] = (VIDEO_InHeaderDescTypeDef*) pdesc; 
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8006b46:	1c5a      	adds	r2, r3, #1
 8006b48:	b2d1      	uxtb	r1, r2
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	f882 10c8 	strb.w	r1, [r2, #200]	; 0xc8
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	3312      	adds	r3, #18
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4413      	add	r3, r2
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	605a      	str	r2, [r3, #4]
      break;
 8006b5c:	e0c3      	b.n	8006ce6 <ParseCSDescriptors+0x286>
      
    //***** MJPEG *****
      
    case UVC_VS_FORMAT_MJPEG:
      if (class_desc->MJPEGFormatNum < VIDEO_MAX_MJPEG_FORMAT)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	f200 80c0 	bhi.w	8006cea <ParseCSDescriptors+0x28a>
        class_desc->vs_desc.MJPEGFormat[class_desc->MJPEGFormatNum++] = (VIDEO_MJPEGFormatDescTypeDef*) pdesc; 
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8006b70:	1c5a      	adds	r2, r3, #1
 8006b72:	b2d1      	uxtb	r1, r2
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	f882 10c9 	strb.w	r1, [r2, #201]	; 0xc9
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	3314      	adds	r3, #20
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	609a      	str	r2, [r3, #8]
      break;
 8006b86:	e0b0      	b.n	8006cea <ParseCSDescriptors+0x28a>
      
    case UVC_VS_FRAME_MJPEG:
      desc_number = class_desc->MJPEGFrameNum; 
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8006b8e:	77fb      	strb	r3, [r7, #31]
      
      if (desc_number < VIDEO_MAX_MJPEG_FRAME_D)
 8006b90:	7ffb      	ldrb	r3, [r7, #31]
 8006b92:	2b09      	cmp	r3, #9
 8006b94:	f200 80ab 	bhi.w	8006cee <ParseCSDescriptors+0x28e>
      {
        class_desc->vs_desc.MJPEGFrame[desc_number] = (VIDEO_MJPEGFrameDescTypeDef*) pdesc;
 8006b98:	7ffb      	ldrb	r3, [r7, #31]
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	3318      	adds	r3, #24
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4413      	add	r3, r2
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	605a      	str	r2, [r3, #4]
        uint16_t width = LE16(class_desc->vs_desc.MJPEGFrame[desc_number]->wWidth);
 8006ba6:	7ffb      	ldrb	r3, [r7, #31]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	3318      	adds	r3, #24
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	795b      	ldrb	r3, [r3, #5]
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	7ffb      	ldrb	r3, [r7, #31]
 8006bb8:	68f9      	ldr	r1, [r7, #12]
 8006bba:	3318      	adds	r3, #24
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	440b      	add	r3, r1
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	799b      	ldrb	r3, [r3, #6]
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	021b      	lsls	r3, r3, #8
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	83bb      	strh	r3, [r7, #28]
        uint16_t height = LE16(class_desc->vs_desc.MJPEGFrame[desc_number]->wHeight);
 8006bce:	7ffb      	ldrb	r3, [r7, #31]
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	3318      	adds	r3, #24
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	79db      	ldrb	r3, [r3, #7]
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	7ffb      	ldrb	r3, [r7, #31]
 8006be0:	68f9      	ldr	r1, [r7, #12]
 8006be2:	3318      	adds	r3, #24
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	440b      	add	r3, r1
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	7a1b      	ldrb	r3, [r3, #8]
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	021b      	lsls	r3, r3, #8
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	837b      	strh	r3, [r7, #26]
        
        USBH_DbgLog("MJPEG Frame detected: %d x %d", width, height);
 8006bf6:	4843      	ldr	r0, [pc, #268]	; (8006d04 <ParseCSDescriptors+0x2a4>)
 8006bf8:	f002 ff7c 	bl	8009af4 <iprintf>
 8006bfc:	8bbb      	ldrh	r3, [r7, #28]
 8006bfe:	8b7a      	ldrh	r2, [r7, #26]
 8006c00:	4619      	mov	r1, r3
 8006c02:	4841      	ldr	r0, [pc, #260]	; (8006d08 <ParseCSDescriptors+0x2a8>)
 8006c04:	f002 ff76 	bl	8009af4 <iprintf>
 8006c08:	200a      	movs	r0, #10
 8006c0a:	f002 ff85 	bl	8009b18 <putchar>
        class_desc->MJPEGFrameNum++;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8006c14:	3301      	adds	r3, #1
 8006c16:	b2da      	uxtb	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
      }
      break;
 8006c1e:	e066      	b.n	8006cee <ParseCSDescriptors+0x28e>
      
    //***** UNCOMPRESSED ***** 
      
    case UVC_VS_FORMAT_UNCOMPRESSED:
      if (class_desc->UncompFormatNum < VIDEO_MAX_UNCOMP_FORMAT)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d863      	bhi.n	8006cf2 <ParseCSDescriptors+0x292>
        class_desc->vs_desc.UncompFormat[class_desc->UncompFormatNum++] = (VIDEO_UncompFormatDescTypeDef*) pdesc; 
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 8006c30:	1c5a      	adds	r2, r3, #1
 8006c32:	b2d1      	uxtb	r1, r2
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	f882 10cb 	strb.w	r1, [r2, #203]	; 0xcb
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	3322      	adds	r3, #34	; 0x22
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4413      	add	r3, r2
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	605a      	str	r2, [r3, #4]
      break;
 8006c46:	e054      	b.n	8006cf2 <ParseCSDescriptors+0x292>
      
      //-------
      
    case UVC_VS_FRAME_UNCOMPRESSED:
      desc_number = class_desc->UncompFrameNum; 
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8006c4e:	77fb      	strb	r3, [r7, #31]
      
      if (desc_number < VIDEO_MAX_UNCOMP_FRAME_D)
 8006c50:	7ffb      	ldrb	r3, [r7, #31]
 8006c52:	2b09      	cmp	r3, #9
 8006c54:	d84f      	bhi.n	8006cf6 <ParseCSDescriptors+0x296>
      {
        class_desc->vs_desc.UncompFrame[desc_number] = (VIDEO_UncompFrameDescTypeDef*) pdesc;
 8006c56:	7ffb      	ldrb	r3, [r7, #31]
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	3324      	adds	r3, #36	; 0x24
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4413      	add	r3, r2
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	609a      	str	r2, [r3, #8]
        uint16_t width = LE16(class_desc->vs_desc.UncompFrame[desc_number]->wWidth);
 8006c64:	7ffb      	ldrb	r3, [r7, #31]
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	3324      	adds	r3, #36	; 0x24
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	4413      	add	r3, r2
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	795b      	ldrb	r3, [r3, #5]
 8006c72:	b29a      	uxth	r2, r3
 8006c74:	7ffb      	ldrb	r3, [r7, #31]
 8006c76:	68f9      	ldr	r1, [r7, #12]
 8006c78:	3324      	adds	r3, #36	; 0x24
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	440b      	add	r3, r1
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	799b      	ldrb	r3, [r3, #6]
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	021b      	lsls	r3, r3, #8
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	833b      	strh	r3, [r7, #24]
        uint16_t height = LE16(class_desc->vs_desc.UncompFrame[desc_number]->wHeight);
 8006c8c:	7ffb      	ldrb	r3, [r7, #31]
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	3324      	adds	r3, #36	; 0x24
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4413      	add	r3, r2
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	79db      	ldrb	r3, [r3, #7]
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	7ffb      	ldrb	r3, [r7, #31]
 8006c9e:	68f9      	ldr	r1, [r7, #12]
 8006ca0:	3324      	adds	r3, #36	; 0x24
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	440b      	add	r3, r1
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	7a1b      	ldrb	r3, [r3, #8]
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	021b      	lsls	r3, r3, #8
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	82fb      	strh	r3, [r7, #22]
        
        USBH_DbgLog("Uncompressed Frame detected: %d x %d", width, height);
 8006cb4:	4813      	ldr	r0, [pc, #76]	; (8006d04 <ParseCSDescriptors+0x2a4>)
 8006cb6:	f002 ff1d 	bl	8009af4 <iprintf>
 8006cba:	8b3b      	ldrh	r3, [r7, #24]
 8006cbc:	8afa      	ldrh	r2, [r7, #22]
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	4812      	ldr	r0, [pc, #72]	; (8006d0c <ParseCSDescriptors+0x2ac>)
 8006cc2:	f002 ff17 	bl	8009af4 <iprintf>
 8006cc6:	200a      	movs	r0, #10
 8006cc8:	f002 ff26 	bl	8009b18 <putchar>
        class_desc->UncompFrameNum++;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	b2da      	uxtb	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
      }
      break;
 8006cdc:	e00b      	b.n	8006cf6 <ParseCSDescriptors+0x296>
      break;
 8006cde:	bf00      	nop
 8006ce0:	e00a      	b.n	8006cf8 <ParseCSDescriptors+0x298>
      
    default:
      break;
 8006ce2:	bf00      	nop
 8006ce4:	e008      	b.n	8006cf8 <ParseCSDescriptors+0x298>
      break;
 8006ce6:	bf00      	nop
 8006ce8:	e006      	b.n	8006cf8 <ParseCSDescriptors+0x298>
      break;
 8006cea:	bf00      	nop
 8006cec:	e004      	b.n	8006cf8 <ParseCSDescriptors+0x298>
      break;
 8006cee:	bf00      	nop
 8006cf0:	e002      	b.n	8006cf8 <ParseCSDescriptors+0x298>
      break;
 8006cf2:	bf00      	nop
 8006cf4:	e000      	b.n	8006cf8 <ParseCSDescriptors+0x298>
      break;
 8006cf6:	bf00      	nop
    }
  }
 
  return USBH_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3720      	adds	r7, #32
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	0800a7dc 	.word	0x0800a7dc
 8006d08:	0800a7e8 	.word	0x0800a7e8
 8006d0c:	0800a808 	.word	0x0800a808

08006d10 <USBH_VIDEO_AnalyseFormatDescriptors>:

/*
 * Check if camera have needed Format descriptor (base for MJPEG/Uncompressed frames)
 */
void USBH_VIDEO_AnalyseFormatDescriptors(VIDEO_ClassSpecificDescTypedef *class_desc)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  USBH_VIDEO_Best_bFormatIndex = -1;
 8006d18:	4b2d      	ldr	r3, [pc, #180]	; (8006dd0 <USBH_VIDEO_AnalyseFormatDescriptors+0xc0>)
 8006d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d1e:	601a      	str	r2, [r3, #0]
  
  if (USBH_VIDEO_Target_Format == USBH_VIDEO_MJPEG)
 8006d20:	4b2c      	ldr	r3, [pc, #176]	; (8006dd4 <USBH_VIDEO_AnalyseFormatDescriptors+0xc4>)
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d11b      	bne.n	8006d60 <USBH_VIDEO_AnalyseFormatDescriptors+0x50>
  {
    if (class_desc->MJPEGFormatNum != 1)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d00d      	beq.n	8006d4e <USBH_VIDEO_AnalyseFormatDescriptors+0x3e>
    {
      USBH_ErrLog("Not supported MJPEG descriptors number: %d", class_desc->MJPEGFormatNum);
 8006d32:	4829      	ldr	r0, [pc, #164]	; (8006dd8 <USBH_VIDEO_AnalyseFormatDescriptors+0xc8>)
 8006d34:	f002 fede 	bl	8009af4 <iprintf>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8006d3e:	4619      	mov	r1, r3
 8006d40:	4826      	ldr	r0, [pc, #152]	; (8006ddc <USBH_VIDEO_AnalyseFormatDescriptors+0xcc>)
 8006d42:	f002 fed7 	bl	8009af4 <iprintf>
 8006d46:	200a      	movs	r0, #10
 8006d48:	f002 fee6 	bl	8009b18 <putchar>
    {
      VIDEO_MJPEGFormatDescTypeDef* mjpeg_format_desc;
      mjpeg_format_desc = class_desc->vs_desc.MJPEGFormat[0];
      USBH_VIDEO_Best_bFormatIndex = mjpeg_format_desc->bFormatIndex;
    }
    return;
 8006d4c:	e03c      	b.n	8006dc8 <USBH_VIDEO_AnalyseFormatDescriptors+0xb8>
      mjpeg_format_desc = class_desc->vs_desc.MJPEGFormat[0];
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d52:	60bb      	str	r3, [r7, #8]
      USBH_VIDEO_Best_bFormatIndex = mjpeg_format_desc->bFormatIndex;
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	78db      	ldrb	r3, [r3, #3]
 8006d58:	461a      	mov	r2, r3
 8006d5a:	4b1d      	ldr	r3, [pc, #116]	; (8006dd0 <USBH_VIDEO_AnalyseFormatDescriptors+0xc0>)
 8006d5c:	601a      	str	r2, [r3, #0]
    return;
 8006d5e:	e033      	b.n	8006dc8 <USBH_VIDEO_AnalyseFormatDescriptors+0xb8>
  }
  else if (USBH_VIDEO_Target_Format == USBH_VIDEO_YUY2)
 8006d60:	4b1c      	ldr	r3, [pc, #112]	; (8006dd4 <USBH_VIDEO_AnalyseFormatDescriptors+0xc4>)
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d12f      	bne.n	8006dc8 <USBH_VIDEO_AnalyseFormatDescriptors+0xb8>
  {
    if (class_desc->UncompFormatNum != 1)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d00d      	beq.n	8006d8e <USBH_VIDEO_AnalyseFormatDescriptors+0x7e>
    {
      USBH_ErrLog("Not supported UNCOMP descriptors number: %d", class_desc->UncompFormatNum);
 8006d72:	4819      	ldr	r0, [pc, #100]	; (8006dd8 <USBH_VIDEO_AnalyseFormatDescriptors+0xc8>)
 8006d74:	f002 febe 	bl	8009af4 <iprintf>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 8006d7e:	4619      	mov	r1, r3
 8006d80:	4817      	ldr	r0, [pc, #92]	; (8006de0 <USBH_VIDEO_AnalyseFormatDescriptors+0xd0>)
 8006d82:	f002 feb7 	bl	8009af4 <iprintf>
 8006d86:	200a      	movs	r0, #10
 8006d88:	f002 fec6 	bl	8009b18 <putchar>
      return;
 8006d8c:	e01c      	b.n	8006dc8 <USBH_VIDEO_AnalyseFormatDescriptors+0xb8>
    }
    else
    {
      //Camera have a single Format descriptor, so we need to check if this descriptor is really YUY2
      VIDEO_UncompFormatDescTypeDef* uncomp_format_desc;
      uncomp_format_desc = class_desc->vs_desc.UncompFormat[0];
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d94:	60fb      	str	r3, [r7, #12]
      
      if (memcmp(&uncomp_format_desc->guidFormat, "YUY2", 4) != 0)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	3305      	adds	r3, #5
 8006d9a:	2204      	movs	r2, #4
 8006d9c:	4911      	ldr	r1, [pc, #68]	; (8006de4 <USBH_VIDEO_AnalyseFormatDescriptors+0xd4>)
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f002 ff05 	bl	8009bae <memcmp>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d009      	beq.n	8006dbe <USBH_VIDEO_AnalyseFormatDescriptors+0xae>
      {
        USBH_ErrLog("Not supported UNCOMP descriptor type");
 8006daa:	480b      	ldr	r0, [pc, #44]	; (8006dd8 <USBH_VIDEO_AnalyseFormatDescriptors+0xc8>)
 8006dac:	f002 fea2 	bl	8009af4 <iprintf>
 8006db0:	480d      	ldr	r0, [pc, #52]	; (8006de8 <USBH_VIDEO_AnalyseFormatDescriptors+0xd8>)
 8006db2:	f002 fe9f 	bl	8009af4 <iprintf>
 8006db6:	200a      	movs	r0, #10
 8006db8:	f002 feae 	bl	8009b18 <putchar>
        return;
 8006dbc:	e004      	b.n	8006dc8 <USBH_VIDEO_AnalyseFormatDescriptors+0xb8>
      }
      else
      {
        // Found!
        USBH_VIDEO_Best_bFormatIndex = uncomp_format_desc->bFormatIndex;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	78db      	ldrb	r3, [r3, #3]
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	4b02      	ldr	r3, [pc, #8]	; (8006dd0 <USBH_VIDEO_AnalyseFormatDescriptors+0xc0>)
 8006dc6:	601a      	str	r2, [r3, #0]
      }
    }
  }
}
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	20000034 	.word	0x20000034
 8006dd4:	2001c52c 	.word	0x2001c52c
 8006dd8:	0800a830 	.word	0x0800a830
 8006ddc:	0800a838 	.word	0x0800a838
 8006de0:	0800a864 	.word	0x0800a864
 8006de4:	0800a890 	.word	0x0800a890
 8006de8:	0800a898 	.word	0x0800a898

08006dec <USBH_VIDEO_AnalyseFrameDescriptors>:

/*
 * Check if camera have needed Frame descriptor (whith target image width)
 */
void USBH_VIDEO_AnalyseFrameDescriptors(VIDEO_ClassSpecificDescTypedef *class_desc)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b087      	sub	sp, #28
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  USBH_VIDEO_Best_bFrameIndex = -1;
 8006df4:	4b3b      	ldr	r3, [pc, #236]	; (8006ee4 <USBH_VIDEO_AnalyseFrameDescriptors+0xf8>)
 8006df6:	f04f 32ff 	mov.w	r2, #4294967295
 8006dfa:	601a      	str	r2, [r3, #0]
    
  if (USBH_VIDEO_Target_Format == USBH_VIDEO_MJPEG)
 8006dfc:	4b3a      	ldr	r3, [pc, #232]	; (8006ee8 <USBH_VIDEO_AnalyseFrameDescriptors+0xfc>)
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d132      	bne.n	8006e6a <USBH_VIDEO_AnalyseFrameDescriptors+0x7e>
  {
    for (uint8_t i = 0; i < class_desc->MJPEGFrameNum; i++)
 8006e04:	2300      	movs	r3, #0
 8006e06:	75fb      	strb	r3, [r7, #23]
 8006e08:	e028      	b.n	8006e5c <USBH_VIDEO_AnalyseFrameDescriptors+0x70>
    {
      VIDEO_MJPEGFrameDescTypeDef* mjpeg_frame_desc;
      mjpeg_frame_desc = class_desc->vs_desc.MJPEGFrame[i];
 8006e0a:	7dfb      	ldrb	r3, [r7, #23]
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	3318      	adds	r3, #24
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4413      	add	r3, r2
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	60fb      	str	r3, [r7, #12]
      if ((LE16(mjpeg_frame_desc->wWidth) == USBH_VIDEO_Target_Width) && \
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	795b      	ldrb	r3, [r3, #5]
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	799b      	ldrb	r3, [r3, #6]
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	021b      	lsls	r3, r3, #8
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	431a      	orrs	r2, r3
 8006e2a:	4b30      	ldr	r3, [pc, #192]	; (8006eec <USBH_VIDEO_AnalyseFrameDescriptors+0x100>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d111      	bne.n	8006e56 <USBH_VIDEO_AnalyseFrameDescriptors+0x6a>
        (LE16(mjpeg_frame_desc->wHeight) == USBH_VIDEO_Target_Height))
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	79db      	ldrb	r3, [r3, #7]
 8006e36:	461a      	mov	r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	7a1b      	ldrb	r3, [r3, #8]
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	021b      	lsls	r3, r3, #8
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	431a      	orrs	r2, r3
 8006e44:	4b2a      	ldr	r3, [pc, #168]	; (8006ef0 <USBH_VIDEO_AnalyseFrameDescriptors+0x104>)
 8006e46:	681b      	ldr	r3, [r3, #0]
      if ((LE16(mjpeg_frame_desc->wWidth) == USBH_VIDEO_Target_Width) && \
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d104      	bne.n	8006e56 <USBH_VIDEO_AnalyseFrameDescriptors+0x6a>
      {
        //Found!
        USBH_VIDEO_Best_bFrameIndex = mjpeg_frame_desc->bFrameIndex;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	78db      	ldrb	r3, [r3, #3]
 8006e50:	461a      	mov	r2, r3
 8006e52:	4b24      	ldr	r3, [pc, #144]	; (8006ee4 <USBH_VIDEO_AnalyseFrameDescriptors+0xf8>)
 8006e54:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < class_desc->MJPEGFrameNum; i++)
 8006e56:	7dfb      	ldrb	r3, [r7, #23]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	75fb      	strb	r3, [r7, #23]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 8006e62:	7dfa      	ldrb	r2, [r7, #23]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d3d0      	bcc.n	8006e0a <USBH_VIDEO_AnalyseFrameDescriptors+0x1e>
        //Found!
        USBH_VIDEO_Best_bFrameIndex = uncomp_frame_desc->bFrameIndex;
      }
    }
  }
}
 8006e68:	e035      	b.n	8006ed6 <USBH_VIDEO_AnalyseFrameDescriptors+0xea>
  else if (USBH_VIDEO_Target_Format == USBH_VIDEO_YUY2)
 8006e6a:	4b1f      	ldr	r3, [pc, #124]	; (8006ee8 <USBH_VIDEO_AnalyseFrameDescriptors+0xfc>)
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d131      	bne.n	8006ed6 <USBH_VIDEO_AnalyseFrameDescriptors+0xea>
    for (uint8_t i = 0; i < class_desc->UncompFrameNum; i++)
 8006e72:	2300      	movs	r3, #0
 8006e74:	75bb      	strb	r3, [r7, #22]
 8006e76:	e028      	b.n	8006eca <USBH_VIDEO_AnalyseFrameDescriptors+0xde>
      uncomp_frame_desc = class_desc->vs_desc.UncompFrame[i];
 8006e78:	7dbb      	ldrb	r3, [r7, #22]
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	3324      	adds	r3, #36	; 0x24
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	613b      	str	r3, [r7, #16]
      if ((LE16(uncomp_frame_desc->wWidth) == USBH_VIDEO_Target_Width) && \
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	795b      	ldrb	r3, [r3, #5]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	799b      	ldrb	r3, [r3, #6]
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	021b      	lsls	r3, r3, #8
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	431a      	orrs	r2, r3
 8006e98:	4b14      	ldr	r3, [pc, #80]	; (8006eec <USBH_VIDEO_AnalyseFrameDescriptors+0x100>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d111      	bne.n	8006ec4 <USBH_VIDEO_AnalyseFrameDescriptors+0xd8>
        (LE16(uncomp_frame_desc->wHeight) == USBH_VIDEO_Target_Height))
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	79db      	ldrb	r3, [r3, #7]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	7a1b      	ldrb	r3, [r3, #8]
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	021b      	lsls	r3, r3, #8
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	431a      	orrs	r2, r3
 8006eb2:	4b0f      	ldr	r3, [pc, #60]	; (8006ef0 <USBH_VIDEO_AnalyseFrameDescriptors+0x104>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
      if ((LE16(uncomp_frame_desc->wWidth) == USBH_VIDEO_Target_Width) && \
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d104      	bne.n	8006ec4 <USBH_VIDEO_AnalyseFrameDescriptors+0xd8>
        USBH_VIDEO_Best_bFrameIndex = uncomp_frame_desc->bFrameIndex;
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	78db      	ldrb	r3, [r3, #3]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	4b08      	ldr	r3, [pc, #32]	; (8006ee4 <USBH_VIDEO_AnalyseFrameDescriptors+0xf8>)
 8006ec2:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < class_desc->UncompFrameNum; i++)
 8006ec4:	7dbb      	ldrb	r3, [r7, #22]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	75bb      	strb	r3, [r7, #22]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8006ed0:	7dba      	ldrb	r2, [r7, #22]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d3d0      	bcc.n	8006e78 <USBH_VIDEO_AnalyseFrameDescriptors+0x8c>
}
 8006ed6:	bf00      	nop
 8006ed8:	371c      	adds	r7, #28
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	20000038 	.word	0x20000038
 8006ee8:	2001c52c 	.word	0x2001c52c
 8006eec:	2000002c 	.word	0x2000002c
 8006ef0:	20000030 	.word	0x20000030

08006ef4 <video_stream_process_packet>:

//****************************************************************************

//size - new packet size
void video_stream_process_packet(uint16_t size)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	4603      	mov	r3, r0
 8006efc:	80fb      	strh	r3, [r7, #6]
  uvc_total_packet_cnt++;
 8006efe:	4b42      	ldr	r3, [pc, #264]	; (8007008 <video_stream_process_packet+0x114>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	3301      	adds	r3, #1
 8006f04:	4a40      	ldr	r2, [pc, #256]	; (8007008 <video_stream_process_packet+0x114>)
 8006f06:	6013      	str	r3, [r2, #0]
  if ((size < 2) && (size > UVC_RX_FIFO_SIZE_LIMIT))
 8006f08:	88fb      	ldrh	r3, [r7, #6]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d803      	bhi.n	8006f16 <video_stream_process_packet+0x22>
 8006f0e:	88fb      	ldrh	r3, [r7, #6]
 8006f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f14:	d872      	bhi.n	8006ffc <video_stream_process_packet+0x108>
    return; //error
  
  if ((uvc_parsing_enabled == 0) || (uvc_parsing_initialized == 0))
 8006f16:	4b3d      	ldr	r3, [pc, #244]	; (800700c <video_stream_process_packet+0x118>)
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d003      	beq.n	8006f26 <video_stream_process_packet+0x32>
 8006f1e:	4b3c      	ldr	r3, [pc, #240]	; (8007010 <video_stream_process_packet+0x11c>)
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d105      	bne.n	8006f32 <video_stream_process_packet+0x3e>
  {
    video_stream_switch_buffers();//try to switch buffers
 8006f26:	f000 f889 	bl	800703c <video_stream_switch_buffers>
    uvc_prev_packet_eof = 0;
 8006f2a:	4b3a      	ldr	r3, [pc, #232]	; (8007014 <video_stream_process_packet+0x120>)
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	701a      	strb	r2, [r3, #0]
    return;
 8006f30:	e067      	b.n	8007002 <video_stream_process_packet+0x10e>
  }
  
  if (size <= UVC_HEADER_SIZE)
 8006f32:	88fb      	ldrh	r3, [r7, #6]
 8006f34:	2b0c      	cmp	r3, #12
 8006f36:	d805      	bhi.n	8006f44 <video_stream_process_packet+0x50>
  {
    uvc_header_cnt++;
 8006f38:	4b37      	ldr	r3, [pc, #220]	; (8007018 <video_stream_process_packet+0x124>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	4a36      	ldr	r2, [pc, #216]	; (8007018 <video_stream_process_packet+0x124>)
 8006f40:	6013      	str	r3, [r2, #0]
 8006f42:	e05e      	b.n	8007002 <video_stream_process_packet+0x10e>
  }
  else if (size > UVC_HEADER_SIZE)
 8006f44:	88fb      	ldrh	r3, [r7, #6]
 8006f46:	2b0c      	cmp	r3, #12
 8006f48:	d95b      	bls.n	8007002 <video_stream_process_packet+0x10e>
  {
    // Detected packet with data
    uvc_data_packet_cnt++;
 8006f4a:	4b34      	ldr	r3, [pc, #208]	; (800701c <video_stream_process_packet+0x128>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	4a32      	ldr	r2, [pc, #200]	; (800701c <video_stream_process_packet+0x128>)
 8006f52:	6013      	str	r3, [r2, #0]
    
    //Get FID bit state
    uint8_t masked_fid = (tmp_packet_framebuffer[UVC_HEADER_BIT_FIELD_POS] & UVC_HEADER_FID_BIT);
 8006f54:	4b32      	ldr	r3, [pc, #200]	; (8007020 <video_stream_process_packet+0x12c>)
 8006f56:	785b      	ldrb	r3, [r3, #1]
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	f003 0301 	and.w	r3, r3, #1
 8006f5e:	73fb      	strb	r3, [r7, #15]
    if ((masked_fid != uvc_prev_fid_state) && (uvc_prev_packet_eof == 1))
 8006f60:	4b30      	ldr	r3, [pc, #192]	; (8007024 <video_stream_process_packet+0x130>)
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	7bfa      	ldrb	r2, [r7, #15]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d00e      	beq.n	8006f88 <video_stream_process_packet+0x94>
 8006f6a:	4b2a      	ldr	r3, [pc, #168]	; (8007014 <video_stream_process_packet+0x120>)
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d10a      	bne.n	8006f88 <video_stream_process_packet+0x94>
    {
      //Detected FIRST packet of the frame

      uvc_frame_cnt++;
 8006f72:	4b2d      	ldr	r3, [pc, #180]	; (8007028 <video_stream_process_packet+0x134>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	3301      	adds	r3, #1
 8006f78:	4a2b      	ldr	r2, [pc, #172]	; (8007028 <video_stream_process_packet+0x134>)
 8006f7a:	6013      	str	r3, [r2, #0]
      uvc_curr_frame_length = 0;
 8006f7c:	4b2b      	ldr	r3, [pc, #172]	; (800702c <video_stream_process_packet+0x138>)
 8006f7e:	2200      	movs	r2, #0
 8006f80:	601a      	str	r2, [r3, #0]
      uvc_frame_start_detected = 1;
 8006f82:	4b2b      	ldr	r3, [pc, #172]	; (8007030 <video_stream_process_packet+0x13c>)
 8006f84:	2201      	movs	r2, #1
 8006f86:	701a      	strb	r2, [r3, #0]
    }
    uvc_prev_fid_state = masked_fid;
 8006f88:	4a26      	ldr	r2, [pc, #152]	; (8007024 <video_stream_process_packet+0x130>)
 8006f8a:	7bfb      	ldrb	r3, [r7, #15]
 8006f8c:	7013      	strb	r3, [r2, #0]
    
    uint16_t data_size = size - UVC_HEADER_SIZE;
 8006f8e:	88fb      	ldrh	r3, [r7, #6]
 8006f90:	3b0c      	subs	r3, #12
 8006f92:	81bb      	strh	r3, [r7, #12]
    video_stream_add_packet_data((uint8_t*)&tmp_packet_framebuffer[UVC_HEADER_SIZE], data_size);
 8006f94:	89bb      	ldrh	r3, [r7, #12]
 8006f96:	4619      	mov	r1, r3
 8006f98:	4826      	ldr	r0, [pc, #152]	; (8007034 <video_stream_process_packet+0x140>)
 8006f9a:	f000 f89b 	bl	80070d4 <video_stream_add_packet_data>
    
    if (tmp_packet_framebuffer[UVC_HEADER_BIT_FIELD_POS] & UVC_HEADER_EOF_BIT)//Last packet in frame
 8006f9e:	4b20      	ldr	r3, [pc, #128]	; (8007020 <video_stream_process_packet+0x12c>)
 8006fa0:	785b      	ldrb	r3, [r3, #1]
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	f003 0302 	and.w	r3, r3, #2
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d014      	beq.n	8006fd6 <video_stream_process_packet+0xe2>
    {
      uvc_prev_packet_eof = 1;
 8006fac:	4b19      	ldr	r3, [pc, #100]	; (8007014 <video_stream_process_packet+0x120>)
 8006fae:	2201      	movs	r2, #1
 8006fb0:	701a      	strb	r2, [r3, #0]
      
      if (uvc_frame_start_detected == 0)
 8006fb2:	4b1f      	ldr	r3, [pc, #124]	; (8007030 <video_stream_process_packet+0x13c>)
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d103      	bne.n	8006fc2 <video_stream_process_packet+0xce>
      {
        uvc_curr_frame_length = 0;
 8006fba:	4b1c      	ldr	r3, [pc, #112]	; (800702c <video_stream_process_packet+0x138>)
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	601a      	str	r2, [r3, #0]
        return; //Bad frame data
 8006fc0:	e01f      	b.n	8007002 <video_stream_process_packet+0x10e>
      }
      
      if (USBH_VIDEO_Target_Format == USBH_VIDEO_MJPEG)
 8006fc2:	4b1d      	ldr	r3, [pc, #116]	; (8007038 <video_stream_process_packet+0x144>)
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d108      	bne.n	8006fdc <video_stream_process_packet+0xe8>
      {
        uvc_parsing_enabled = 0;
 8006fca:	4b10      	ldr	r3, [pc, #64]	; (800700c <video_stream_process_packet+0x118>)
 8006fcc:	2200      	movs	r2, #0
 8006fce:	701a      	strb	r2, [r3, #0]
        video_stream_switch_buffers();
 8006fd0:	f000 f834 	bl	800703c <video_stream_switch_buffers>
 8006fd4:	e002      	b.n	8006fdc <video_stream_process_packet+0xe8>
      }      
    }
    else
    {
      uvc_prev_packet_eof = 0;
 8006fd6:	4b0f      	ldr	r3, [pc, #60]	; (8007014 <video_stream_process_packet+0x120>)
 8006fd8:	2200      	movs	r2, #0
 8006fda:	701a      	strb	r2, [r3, #0]
    }
    
    if ((USBH_VIDEO_Target_Format == USBH_VIDEO_YUY2) && 
 8006fdc:	4b16      	ldr	r3, [pc, #88]	; (8007038 <video_stream_process_packet+0x144>)
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d10e      	bne.n	8007002 <video_stream_process_packet+0x10e>
        (uvc_curr_frame_length >= UVC_UNCOMP_FRAME_SIZE))
 8006fe4:	4b11      	ldr	r3, [pc, #68]	; (800702c <video_stream_process_packet+0x138>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
    if ((USBH_VIDEO_Target_Format == USBH_VIDEO_YUY2) && 
 8006fe8:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
 8006fec:	d309      	bcc.n	8007002 <video_stream_process_packet+0x10e>
    {
      if (uvc_frame_start_detected == 0)
 8006fee:	4b10      	ldr	r3, [pc, #64]	; (8007030 <video_stream_process_packet+0x13c>)
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d004      	beq.n	8007000 <video_stream_process_packet+0x10c>
        return; //Bad frame data
      
      video_stream_switch_buffers();
 8006ff6:	f000 f821 	bl	800703c <video_stream_switch_buffers>
 8006ffa:	e002      	b.n	8007002 <video_stream_process_packet+0x10e>
    return; //error
 8006ffc:	bf00      	nop
 8006ffe:	e000      	b.n	8007002 <video_stream_process_packet+0x10e>
        return; //Bad frame data
 8007000:	bf00      	nop
    }
  }
}
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	2001c530 	.word	0x2001c530
 800700c:	2000003d 	.word	0x2000003d
 8007010:	2001c54c 	.word	0x2001c54c
 8007014:	2000003e 	.word	0x2000003e
 8007018:	2001c53c 	.word	0x2001c53c
 800701c:	2001c534 	.word	0x2001c534
 8007020:	2001c32c 	.word	0x2001c32c
 8007024:	2001c540 	.word	0x2001c540
 8007028:	2001c538 	.word	0x2001c538
 800702c:	2001c544 	.word	0x2001c544
 8007030:	2001c54e 	.word	0x2001c54e
 8007034:	2001c338 	.word	0x2001c338
 8007038:	2001c52c 	.word	0x2001c52c

0800703c <video_stream_switch_buffers>:

//Must be called when full fame is captured
uint8_t video_stream_switch_buffers(void)
{
 800703c:	b480      	push	{r7}
 800703e:	af00      	add	r7, sp, #0
  if (uvc_parsing_switch_ready == 1) //"ready" buffer can be switched
 8007040:	4b1a      	ldr	r3, [pc, #104]	; (80070ac <video_stream_switch_buffers+0x70>)
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d127      	bne.n	8007098 <video_stream_switch_buffers+0x5c>
  {
    uvc_ready_framebuffer_ptr = uvc_curr_framebuffer_ptr;
 8007048:	4b19      	ldr	r3, [pc, #100]	; (80070b0 <video_stream_switch_buffers+0x74>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a19      	ldr	r2, [pc, #100]	; (80070b4 <video_stream_switch_buffers+0x78>)
 800704e:	6013      	str	r3, [r2, #0]
    if (uvc_curr_framebuffer_ptr == uvc_framebuffer0_ptr)
 8007050:	4b17      	ldr	r3, [pc, #92]	; (80070b0 <video_stream_switch_buffers+0x74>)
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	4b18      	ldr	r3, [pc, #96]	; (80070b8 <video_stream_switch_buffers+0x7c>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	429a      	cmp	r2, r3
 800705a:	d104      	bne.n	8007066 <video_stream_switch_buffers+0x2a>
      uvc_curr_framebuffer_ptr = uvc_framebuffer1_ptr;
 800705c:	4b17      	ldr	r3, [pc, #92]	; (80070bc <video_stream_switch_buffers+0x80>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a13      	ldr	r2, [pc, #76]	; (80070b0 <video_stream_switch_buffers+0x74>)
 8007062:	6013      	str	r3, [r2, #0]
 8007064:	e003      	b.n	800706e <video_stream_switch_buffers+0x32>
    else
      uvc_curr_framebuffer_ptr = uvc_framebuffer0_ptr;
 8007066:	4b14      	ldr	r3, [pc, #80]	; (80070b8 <video_stream_switch_buffers+0x7c>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a11      	ldr	r2, [pc, #68]	; (80070b0 <video_stream_switch_buffers+0x74>)
 800706c:	6013      	str	r3, [r2, #0]
    
     uvc_parsing_new_frame_ready = 1;
 800706e:	4b14      	ldr	r3, [pc, #80]	; (80070c0 <video_stream_switch_buffers+0x84>)
 8007070:	2201      	movs	r2, #1
 8007072:	701a      	strb	r2, [r3, #0]
     uvc_parsing_switch_ready = 0;//waiting fo data to be processed by external software
 8007074:	4b0d      	ldr	r3, [pc, #52]	; (80070ac <video_stream_switch_buffers+0x70>)
 8007076:	2200      	movs	r2, #0
 8007078:	701a      	strb	r2, [r3, #0]
     uvc_parsing_enabled = 1;
 800707a:	4b12      	ldr	r3, [pc, #72]	; (80070c4 <video_stream_switch_buffers+0x88>)
 800707c:	2201      	movs	r2, #1
 800707e:	701a      	strb	r2, [r3, #0]
     uvc_frame_start_detected = 0;
 8007080:	4b11      	ldr	r3, [pc, #68]	; (80070c8 <video_stream_switch_buffers+0x8c>)
 8007082:	2200      	movs	r2, #0
 8007084:	701a      	strb	r2, [r3, #0]
     uvc_ready_frame_length = uvc_curr_frame_length;
 8007086:	4b11      	ldr	r3, [pc, #68]	; (80070cc <video_stream_switch_buffers+0x90>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a11      	ldr	r2, [pc, #68]	; (80070d0 <video_stream_switch_buffers+0x94>)
 800708c:	6013      	str	r3, [r2, #0]
     uvc_curr_frame_length = 0;
 800708e:	4b0f      	ldr	r3, [pc, #60]	; (80070cc <video_stream_switch_buffers+0x90>)
 8007090:	2200      	movs	r2, #0
 8007092:	601a      	str	r2, [r3, #0]
     return 1;
 8007094:	2301      	movs	r3, #1
 8007096:	e003      	b.n	80070a0 <video_stream_switch_buffers+0x64>
  }
  else
  {
    uvc_parsing_enabled = 0;
 8007098:	4b0a      	ldr	r3, [pc, #40]	; (80070c4 <video_stream_switch_buffers+0x88>)
 800709a:	2200      	movs	r2, #0
 800709c:	701a      	strb	r2, [r3, #0]
    // Waiting for external software to release "Ready" buffer
  }
  return 0;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	2000003c 	.word	0x2000003c
 80070b0:	2001c558 	.word	0x2001c558
 80070b4:	2001c55c 	.word	0x2001c55c
 80070b8:	2001c550 	.word	0x2001c550
 80070bc:	2001c554 	.word	0x2001c554
 80070c0:	2001c54d 	.word	0x2001c54d
 80070c4:	2000003d 	.word	0x2000003d
 80070c8:	2001c54e 	.word	0x2001c54e
 80070cc:	2001c544 	.word	0x2001c544
 80070d0:	2001c548 	.word	0x2001c548

080070d4 <video_stream_add_packet_data>:

//Add data from received packet to the image framebuffer
//buf - pointer to the data source
void video_stream_add_packet_data(uint8_t* buf, uint16_t data_size)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	460b      	mov	r3, r1
 80070de:	807b      	strh	r3, [r7, #2]
  if ((uvc_curr_frame_length + data_size) > UVC_UNCOMP_FRAME_SIZE)
 80070e0:	887a      	ldrh	r2, [r7, #2]
 80070e2:	4b0f      	ldr	r3, [pc, #60]	; (8007120 <video_stream_add_packet_data+0x4c>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4413      	add	r3, r2
 80070e8:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
 80070ec:	d904      	bls.n	80070f8 <video_stream_add_packet_data+0x24>
  {
    uvc_curr_frame_length = UVC_UNCOMP_FRAME_SIZE;
 80070ee:	4b0c      	ldr	r3, [pc, #48]	; (8007120 <video_stream_add_packet_data+0x4c>)
 80070f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80070f4:	601a      	str	r2, [r3, #0]
    return;
 80070f6:	e00f      	b.n	8007118 <video_stream_add_packet_data+0x44>
  }
  //Copy data to a current framebuffer
  memcpy((void*)&uvc_curr_framebuffer_ptr[uvc_curr_frame_length], buf, data_size);
 80070f8:	4b0a      	ldr	r3, [pc, #40]	; (8007124 <video_stream_add_packet_data+0x50>)
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	4b08      	ldr	r3, [pc, #32]	; (8007120 <video_stream_add_packet_data+0x4c>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4413      	add	r3, r2
 8007102:	887a      	ldrh	r2, [r7, #2]
 8007104:	6879      	ldr	r1, [r7, #4]
 8007106:	4618      	mov	r0, r3
 8007108:	f002 fded 	bl	8009ce6 <memcpy>
  uvc_curr_frame_length+= data_size;
 800710c:	887a      	ldrh	r2, [r7, #2]
 800710e:	4b04      	ldr	r3, [pc, #16]	; (8007120 <video_stream_add_packet_data+0x4c>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4413      	add	r3, r2
 8007114:	4a02      	ldr	r2, [pc, #8]	; (8007120 <video_stream_add_packet_data+0x4c>)
 8007116:	6013      	str	r3, [r2, #0]
}
 8007118:	3708      	adds	r7, #8
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	2001c544 	.word	0x2001c544
 8007124:	2001c558 	.word	0x2001c558

08007128 <video_stream_init_buffers>:

void video_stream_init_buffers(uint8_t* buffer0, uint8_t* buffer1)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  if ((buffer0 == NULL) || (buffer1 == NULL))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d01a      	beq.n	800716e <video_stream_init_buffers+0x46>
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d017      	beq.n	800716e <video_stream_init_buffers+0x46>
    return;
  
  uvc_framebuffer0_ptr = buffer0;
 800713e:	4a0f      	ldr	r2, [pc, #60]	; (800717c <video_stream_init_buffers+0x54>)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6013      	str	r3, [r2, #0]
  uvc_framebuffer1_ptr = buffer1;
 8007144:	4a0e      	ldr	r2, [pc, #56]	; (8007180 <video_stream_init_buffers+0x58>)
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	6013      	str	r3, [r2, #0]
  uvc_curr_framebuffer_ptr = uvc_framebuffer0_ptr;
 800714a:	4b0c      	ldr	r3, [pc, #48]	; (800717c <video_stream_init_buffers+0x54>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a0d      	ldr	r2, [pc, #52]	; (8007184 <video_stream_init_buffers+0x5c>)
 8007150:	6013      	str	r3, [r2, #0]
  uvc_ready_framebuffer_ptr = uvc_framebuffer1_ptr;
 8007152:	4b0b      	ldr	r3, [pc, #44]	; (8007180 <video_stream_init_buffers+0x58>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a0c      	ldr	r2, [pc, #48]	; (8007188 <video_stream_init_buffers+0x60>)
 8007158:	6013      	str	r3, [r2, #0]
  uvc_parsing_initialized = 1;
 800715a:	4b0c      	ldr	r3, [pc, #48]	; (800718c <video_stream_init_buffers+0x64>)
 800715c:	2201      	movs	r2, #1
 800715e:	701a      	strb	r2, [r3, #0]
  uvc_parsing_enabled = 1;
 8007160:	4b0b      	ldr	r3, [pc, #44]	; (8007190 <video_stream_init_buffers+0x68>)
 8007162:	2201      	movs	r2, #1
 8007164:	701a      	strb	r2, [r3, #0]
  uvc_parsing_switch_ready = 1;
 8007166:	4b0b      	ldr	r3, [pc, #44]	; (8007194 <video_stream_init_buffers+0x6c>)
 8007168:	2201      	movs	r2, #1
 800716a:	701a      	strb	r2, [r3, #0]
 800716c:	e000      	b.n	8007170 <video_stream_init_buffers+0x48>
    return;
 800716e:	bf00      	nop
}
 8007170:	370c      	adds	r7, #12
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	2001c550 	.word	0x2001c550
 8007180:	2001c554 	.word	0x2001c554
 8007184:	2001c558 	.word	0x2001c558
 8007188:	2001c55c 	.word	0x2001c55c
 800718c:	2001c54c 	.word	0x2001c54c
 8007190:	2000003d 	.word	0x2000003d
 8007194:	2000003c 	.word	0x2000003c

08007198 <video_stream_ready_update>:

// External software call this function after using all data from "uvc_ready_framebuffer_ptr"
void video_stream_ready_update(void)
{
 8007198:	b480      	push	{r7}
 800719a:	af00      	add	r7, sp, #0
  //"Ready" framebuffer is not used by exteranal software now
  uvc_parsing_switch_ready = 1;
 800719c:	4b03      	ldr	r3, [pc, #12]	; (80071ac <video_stream_ready_update+0x14>)
 800719e:	2201      	movs	r2, #1
 80071a0:	701a      	strb	r2, [r3, #0]
}
 80071a2:	bf00      	nop
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr
 80071ac:	2000003c 	.word	0x2000003c

080071b0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	4613      	mov	r3, r2
 80071bc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d10a      	bne.n	80071da <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 80071c4:	4826      	ldr	r0, [pc, #152]	; (8007260 <USBH_Init+0xb0>)
 80071c6:	f002 fc95 	bl	8009af4 <iprintf>
 80071ca:	4826      	ldr	r0, [pc, #152]	; (8007264 <USBH_Init+0xb4>)
 80071cc:	f002 fc92 	bl	8009af4 <iprintf>
 80071d0:	200a      	movs	r0, #10
 80071d2:	f002 fca1 	bl	8009b18 <putchar>
    return USBH_FAIL;
 80071d6:	2302      	movs	r3, #2
 80071d8:	e03d      	b.n	8007256 <USBH_Init+0xa6>
  }

  /* Set DRiver ID */
  phost->id = id;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071e0:	461a      	mov	r2, r3
 80071e2:	79fb      	ldrb	r3, [r7, #7]
 80071e4:	f882 3aa0 	strb.w	r3, [r2, #2720]	; 0xaa0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071ee:	461a      	mov	r2, r3
 80071f0:	2300      	movs	r3, #0
 80071f2:	f8c2 3a50 	str.w	r3, [r2, #2640]	; 0xa50
  phost->ClassNumber = 0U;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071fc:	461a      	mov	r2, r3
 80071fe:	2300      	movs	r3, #0
 8007200:	f8c2 3a54 	str.w	r3, [r2, #2644]	; 0xa54

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f000 f82f 	bl	8007268 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007210:	2200      	movs	r2, #0
 8007212:	f883 2823 	strb.w	r2, [r3, #2083]	; 0x823
  phost->device.is_connected = 0U;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800721c:	2200      	movs	r2, #0
 800721e:	f883 2820 	strb.w	r2, [r3, #2080]	; 0x820
  phost->device.is_disconnected = 0U;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007228:	2200      	movs	r2, #0
 800722a:	f883 2821 	strb.w	r2, [r3, #2081]	; 0x821
  phost->device.is_ReEnumerated = 0U;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007234:	2200      	movs	r2, #0
 8007236:	f883 2822 	strb.w	r2, [r3, #2082]	; 0x822

  /* Assign User process */
  if (pUsrFunc != NULL)
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d006      	beq.n	800724e <USBH_Init+0x9e>
  {
    phost->pUser = pUsrFunc;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007246:	461a      	mov	r2, r3
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	f8c2 3aa8 	str.w	r3, [r2, #2728]	; 0xaa8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f002 f8de 	bl	8009410 <USBH_LL_Init>

  return USBH_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	0800a8c0 	.word	0x0800a8c0
 8007264:	0800a8c8 	.word	0x0800a8c8

08007268 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007270:	2300      	movs	r3, #0
 8007272:	60fb      	str	r3, [r7, #12]
 8007274:	e009      	b.n	800728a <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	f202 6296 	addw	r2, r2, #1686	; 0x696
 800727e:	2100      	movs	r1, #0
 8007280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	3301      	adds	r3, #1
 8007288:	60fb      	str	r3, [r7, #12]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2b0f      	cmp	r3, #15
 800728e:	d9f2      	bls.n	8007276 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007290:	2300      	movs	r3, #0
 8007292:	60fb      	str	r3, [r7, #12]
 8007294:	e009      	b.n	80072aa <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	4413      	add	r3, r2
 800729c:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 80072a0:	2200      	movs	r2, #0
 80072a2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	3301      	adds	r3, #1
 80072a8:	60fb      	str	r3, [r7, #12]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072b0:	d3f1      	bcc.n	8007296 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2201      	movs	r2, #1
 80072c2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072ca:	461a      	mov	r2, r3
 80072cc:	2300      	movs	r3, #0
 80072ce:	f8c2 3a98 	str.w	r3, [r2, #2712]	; 0xa98

  phost->Control.state = CTRL_SETUP;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2201      	movs	r2, #1
 80072d6:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2240      	movs	r2, #64	; 0x40
 80072dc:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072ea:	2200      	movs	r2, #0
 80072ec:	f883 281c 	strb.w	r2, [r3, #2076]	; 0x81c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 281d 	strb.w	r2, [r3, #2077]	; 0x81d
  phost->device.RstCnt = 0U;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007302:	2200      	movs	r2, #0
 8007304:	f883 281f 	strb.w	r2, [r3, #2079]	; 0x81f
  phost->device.EnumCnt = 0U;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800730e:	2200      	movs	r2, #0
 8007310:	f883 281e 	strb.w	r2, [r3, #2078]	; 0x81e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	331c      	adds	r3, #28
 8007318:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800731c:	2100      	movs	r1, #0
 800731e:	4618      	mov	r0, r3
 8007320:	f002 fc55 	bl	8009bce <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 800732a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800732e:	2100      	movs	r1, #0
 8007330:	4618      	mov	r0, r3
 8007332:	f002 fc4c 	bl	8009bce <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 800733c:	3306      	adds	r3, #6
 800733e:	2212      	movs	r2, #18
 8007340:	2100      	movs	r1, #0
 8007342:	4618      	mov	r0, r3
 8007344:	f002 fc43 	bl	8009bce <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 800734e:	3318      	adds	r3, #24
 8007350:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8007354:	2100      	movs	r1, #0
 8007356:	4618      	mov	r0, r3
 8007358:	f002 fc39 	bl	8009bce <memset>

  return USBH_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
	...

08007368 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007372:	2300      	movs	r3, #0
 8007374:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d026      	beq.n	80073ca <USBH_RegisterClass+0x62>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007382:	f8d3 3a54 	ldr.w	r3, [r3, #2644]	; 0xa54
 8007386:	2b05      	cmp	r3, #5
 8007388:	d813      	bhi.n	80073b2 <USBH_RegisterClass+0x4a>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007390:	f8d3 3a54 	ldr.w	r3, [r3, #2644]	; 0xa54
 8007394:	1c5a      	adds	r2, r3, #1
 8007396:	6879      	ldr	r1, [r7, #4]
 8007398:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800739c:	f8c1 2a54 	str.w	r2, [r1, #2644]	; 0xa54
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	f203 638e 	addw	r3, r3, #1678	; 0x68e
 80073a6:	6839      	ldr	r1, [r7, #0]
 80073a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80073ac:	2300      	movs	r3, #0
 80073ae:	73fb      	strb	r3, [r7, #15]
 80073b0:	e016      	b.n	80073e0 <USBH_RegisterClass+0x78>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 80073b2:	480e      	ldr	r0, [pc, #56]	; (80073ec <USBH_RegisterClass+0x84>)
 80073b4:	f002 fb9e 	bl	8009af4 <iprintf>
 80073b8:	480d      	ldr	r0, [pc, #52]	; (80073f0 <USBH_RegisterClass+0x88>)
 80073ba:	f002 fb9b 	bl	8009af4 <iprintf>
 80073be:	200a      	movs	r0, #10
 80073c0:	f002 fbaa 	bl	8009b18 <putchar>
      status = USBH_FAIL;
 80073c4:	2302      	movs	r3, #2
 80073c6:	73fb      	strb	r3, [r7, #15]
 80073c8:	e00a      	b.n	80073e0 <USBH_RegisterClass+0x78>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 80073ca:	4808      	ldr	r0, [pc, #32]	; (80073ec <USBH_RegisterClass+0x84>)
 80073cc:	f002 fb92 	bl	8009af4 <iprintf>
 80073d0:	4808      	ldr	r0, [pc, #32]	; (80073f4 <USBH_RegisterClass+0x8c>)
 80073d2:	f002 fb8f 	bl	8009af4 <iprintf>
 80073d6:	200a      	movs	r0, #10
 80073d8:	f002 fb9e 	bl	8009b18 <putchar>
    status = USBH_FAIL;
 80073dc:	2302      	movs	r3, #2
 80073de:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	0800a8c0 	.word	0x0800a8c0
 80073f0:	0800a8dc 	.word	0x0800a8dc
 80073f4:	0800a8f8 	.word	0x0800a8f8

080073f8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b087      	sub	sp, #28
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	4608      	mov	r0, r1
 8007402:	4611      	mov	r1, r2
 8007404:	461a      	mov	r2, r3
 8007406:	4603      	mov	r3, r0
 8007408:	70fb      	strb	r3, [r7, #3]
 800740a:	460b      	mov	r3, r1
 800740c:	70bb      	strb	r3, [r7, #2]
 800740e:	4613      	mov	r3, r2
 8007410:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007412:	2300      	movs	r3, #0
 8007414:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007416:	2300      	movs	r3, #0
 8007418:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8007420:	3318      	adds	r3, #24
 8007422:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007424:	e025      	b.n	8007472 <USBH_FindInterface+0x7a>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007426:	7dfb      	ldrb	r3, [r7, #23]
 8007428:	2232      	movs	r2, #50	; 0x32
 800742a:	fb02 f303 	mul.w	r3, r2, r3
 800742e:	3308      	adds	r3, #8
 8007430:	68fa      	ldr	r2, [r7, #12]
 8007432:	4413      	add	r3, r2
 8007434:	3302      	adds	r3, #2
 8007436:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	795b      	ldrb	r3, [r3, #5]
 800743c:	78fa      	ldrb	r2, [r7, #3]
 800743e:	429a      	cmp	r2, r3
 8007440:	d002      	beq.n	8007448 <USBH_FindInterface+0x50>
 8007442:	78fb      	ldrb	r3, [r7, #3]
 8007444:	2bff      	cmp	r3, #255	; 0xff
 8007446:	d111      	bne.n	800746c <USBH_FindInterface+0x74>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800744c:	78ba      	ldrb	r2, [r7, #2]
 800744e:	429a      	cmp	r2, r3
 8007450:	d002      	beq.n	8007458 <USBH_FindInterface+0x60>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007452:	78bb      	ldrb	r3, [r7, #2]
 8007454:	2bff      	cmp	r3, #255	; 0xff
 8007456:	d109      	bne.n	800746c <USBH_FindInterface+0x74>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800745c:	787a      	ldrb	r2, [r7, #1]
 800745e:	429a      	cmp	r2, r3
 8007460:	d002      	beq.n	8007468 <USBH_FindInterface+0x70>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007462:	787b      	ldrb	r3, [r7, #1]
 8007464:	2bff      	cmp	r3, #255	; 0xff
 8007466:	d101      	bne.n	800746c <USBH_FindInterface+0x74>
    {
      return  if_ix;
 8007468:	7dfb      	ldrb	r3, [r7, #23]
 800746a:	e006      	b.n	800747a <USBH_FindInterface+0x82>
    }
    if_ix++;
 800746c:	7dfb      	ldrb	r3, [r7, #23]
 800746e:	3301      	adds	r3, #1
 8007470:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007472:	7dfb      	ldrb	r3, [r7, #23]
 8007474:	2b09      	cmp	r3, #9
 8007476:	d9d6      	bls.n	8007426 <USBH_FindInterface+0x2e>
  }
  return 0xFFU;
 8007478:	23ff      	movs	r3, #255	; 0xff
}
 800747a:	4618      	mov	r0, r3
 800747c:	371c      	adds	r7, #28
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr

08007486 <USBH_FindInterfaceIndex>:
  * @param  alt_settings    : alternate setting number
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterfaceIndex(USBH_HandleTypeDef *phost, uint8_t interface_number, uint8_t alt_settings)
{
 8007486:	b480      	push	{r7}
 8007488:	b087      	sub	sp, #28
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
 800748e:	460b      	mov	r3, r1
 8007490:	70fb      	strb	r3, [r7, #3]
 8007492:	4613      	mov	r3, r2
 8007494:	70bb      	strb	r3, [r7, #2]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007496:	2300      	movs	r3, #0
 8007498:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800749a:	2300      	movs	r3, #0
 800749c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 80074a4:	3318      	adds	r3, #24
 80074a6:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80074a8:	e017      	b.n	80074da <USBH_FindInterfaceIndex+0x54>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80074aa:	7dfb      	ldrb	r3, [r7, #23]
 80074ac:	2232      	movs	r2, #50	; 0x32
 80074ae:	fb02 f303 	mul.w	r3, r2, r3
 80074b2:	3308      	adds	r3, #8
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	4413      	add	r3, r2
 80074b8:	3302      	adds	r3, #2
 80074ba:	613b      	str	r3, [r7, #16]
    if ((pif->bInterfaceNumber == interface_number) && (pif->bAlternateSetting == alt_settings))
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	789b      	ldrb	r3, [r3, #2]
 80074c0:	78fa      	ldrb	r2, [r7, #3]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d106      	bne.n	80074d4 <USBH_FindInterfaceIndex+0x4e>
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	78db      	ldrb	r3, [r3, #3]
 80074ca:	78ba      	ldrb	r2, [r7, #2]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d101      	bne.n	80074d4 <USBH_FindInterfaceIndex+0x4e>
    {
      return  if_ix;
 80074d0:	7dfb      	ldrb	r3, [r7, #23]
 80074d2:	e006      	b.n	80074e2 <USBH_FindInterfaceIndex+0x5c>
    }
    if_ix++;
 80074d4:	7dfb      	ldrb	r3, [r7, #23]
 80074d6:	3301      	adds	r3, #1
 80074d8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80074da:	7dfb      	ldrb	r3, [r7, #23]
 80074dc:	2b09      	cmp	r3, #9
 80074de:	d9e4      	bls.n	80074aa <USBH_FindInterfaceIndex+0x24>
  }
  return 0xFFU;
 80074e0:	23ff      	movs	r3, #255	; 0xff
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	371c      	adds	r7, #28
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr

080074ee <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b082      	sub	sp, #8
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f001 ffd4 	bl	80094a4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80074fc:	2101      	movs	r1, #1
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f002 f8ff 	bl	8009702 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3708      	adds	r7, #8
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
	...

08007510 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b088      	sub	sp, #32
 8007514:	af04      	add	r7, sp, #16
 8007516:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007518:	2302      	movs	r3, #2
 800751a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800751c:	2300      	movs	r3, #0
 800751e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007526:	f893 3821 	ldrb.w	r3, [r3, #2081]	; 0x821
 800752a:	b2db      	uxtb	r3, r3
 800752c:	2b01      	cmp	r3, #1
 800752e:	d102      	bne.n	8007536 <USBH_Process+0x26>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2203      	movs	r2, #3
 8007534:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	b2db      	uxtb	r3, r3
 800753c:	2b0b      	cmp	r3, #11
 800753e:	f200 829a 	bhi.w	8007a76 <USBH_Process+0x566>
 8007542:	a201      	add	r2, pc, #4	; (adr r2, 8007548 <USBH_Process+0x38>)
 8007544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007548:	08007579 	.word	0x08007579
 800754c:	080075c5 	.word	0x080075c5
 8007550:	08007665 	.word	0x08007665
 8007554:	080079e3 	.word	0x080079e3
 8007558:	08007a77 	.word	0x08007a77
 800755c:	08007725 	.word	0x08007725
 8007560:	08007955 	.word	0x08007955
 8007564:	0800777b 	.word	0x0800777b
 8007568:	080077a3 	.word	0x080077a3
 800756c:	080077d3 	.word	0x080077d3
 8007570:	08007833 	.word	0x08007833
 8007574:	080079c3 	.word	0x080079c3
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800757e:	f893 3820 	ldrb.w	r3, [r3, #2080]	; 0x820
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 8278 	beq.w	8007a7a <USBH_Process+0x56a>
      {
        USBH_UsrLog("USB Device Connected");
 800758a:	48b6      	ldr	r0, [pc, #728]	; (8007864 <USBH_Process+0x354>)
 800758c:	f002 fab2 	bl	8009af4 <iprintf>
 8007590:	200a      	movs	r0, #10
 8007592:	f002 fac1 	bl	8009b18 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2201      	movs	r2, #1
 800759a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800759c:	20c8      	movs	r0, #200	; 0xc8
 800759e:	f002 f8f3 	bl	8009788 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f001 ffe1 	bl	800956a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 281c 	strb.w	r2, [r3, #2076]	; 0x81c
        phost->Timeout = 0U;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ba:	461a      	mov	r2, r3
 80075bc:	2300      	movs	r3, #0
 80075be:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80075c2:	e25a      	b.n	8007a7a <USBH_Process+0x56a>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ca:	f893 3823 	ldrb.w	r3, [r3, #2083]	; 0x823
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d10f      	bne.n	80075f4 <USBH_Process+0xe4>
      {
        USBH_UsrLog("USB Device Reset Completed");
 80075d4:	48a4      	ldr	r0, [pc, #656]	; (8007868 <USBH_Process+0x358>)
 80075d6:	f002 fa8d 	bl	8009af4 <iprintf>
 80075da:	200a      	movs	r0, #10
 80075dc:	f002 fa9c 	bl	8009b18 <putchar>
        phost->device.RstCnt = 0U;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075e6:	2200      	movs	r2, #0
 80075e8:	f883 281f 	strb.w	r2, [r3, #2079]	; 0x81f
        phost->gState = HOST_DEV_ATTACHED;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2202      	movs	r2, #2
 80075f0:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80075f2:	e24f      	b.n	8007a94 <USBH_Process+0x584>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075fa:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 80075fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007602:	d920      	bls.n	8007646 <USBH_Process+0x136>
          phost->device.RstCnt++;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800760a:	f893 381f 	ldrb.w	r3, [r3, #2079]	; 0x81f
 800760e:	3301      	adds	r3, #1
 8007610:	b2da      	uxtb	r2, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007618:	f883 281f 	strb.w	r2, [r3, #2079]	; 0x81f
          if (phost->device.RstCnt > 3U)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007622:	f893 381f 	ldrb.w	r3, [r3, #2079]	; 0x81f
 8007626:	2b03      	cmp	r3, #3
 8007628:	d909      	bls.n	800763e <USBH_Process+0x12e>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 800762a:	4890      	ldr	r0, [pc, #576]	; (800786c <USBH_Process+0x35c>)
 800762c:	f002 fa62 	bl	8009af4 <iprintf>
 8007630:	200a      	movs	r0, #10
 8007632:	f002 fa71 	bl	8009b18 <putchar>
            phost->gState = HOST_ABORT_STATE;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	220d      	movs	r2, #13
 800763a:	701a      	strb	r2, [r3, #0]
      break;
 800763c:	e22a      	b.n	8007a94 <USBH_Process+0x584>
            phost->gState = HOST_IDLE;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	701a      	strb	r2, [r3, #0]
      break;
 8007644:	e226      	b.n	8007a94 <USBH_Process+0x584>
          phost->Timeout += 10U;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800764c:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 8007650:	330a      	adds	r3, #10
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007658:	f8c2 3a9c 	str.w	r3, [r2, #2716]	; 0xa9c
          USBH_Delay(10U);
 800765c:	200a      	movs	r0, #10
 800765e:	f002 f893 	bl	8009788 <USBH_Delay>
      break;
 8007662:	e217      	b.n	8007a94 <USBH_Process+0x584>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800766a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800766e:	2b00      	cmp	r3, #0
 8007670:	d007      	beq.n	8007682 <USBH_Process+0x172>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007678:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800767c:	2104      	movs	r1, #4
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007682:	2064      	movs	r0, #100	; 0x64
 8007684:	f002 f880 	bl	8009788 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f001 ff45 	bl	8009518 <USBH_LL_GetSpeed>
 800768e:	4603      	mov	r3, r0
 8007690:	461a      	mov	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007698:	f883 281d 	strb.w	r2, [r3, #2077]	; 0x81d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2205      	movs	r2, #5
 80076a0:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80076a2:	2100      	movs	r1, #0
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f001 fc80 	bl	8008faa <USBH_AllocPipe>
 80076aa:	4603      	mov	r3, r0
 80076ac:	461a      	mov	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80076b2:	2180      	movs	r1, #128	; 0x80
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f001 fc78 	bl	8008faa <USBH_AllocPipe>
 80076ba:	4603      	mov	r3, r0
 80076bc:	461a      	mov	r2, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	7919      	ldrb	r1, [r3, #4]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076cc:	f893 081c 	ldrb.w	r0, [r3, #2076]	; 0x81c
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076d6:	f893 381d 	ldrb.w	r3, [r3, #2077]	; 0x81d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80076de:	b292      	uxth	r2, r2
 80076e0:	9202      	str	r2, [sp, #8]
 80076e2:	2200      	movs	r2, #0
 80076e4:	9201      	str	r2, [sp, #4]
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	4603      	mov	r3, r0
 80076ea:	2280      	movs	r2, #128	; 0x80
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f001 fc2d 	bl	8008f4c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	7959      	ldrb	r1, [r3, #5]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076fc:	f893 081c 	ldrb.w	r0, [r3, #2076]	; 0x81c
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007706:	f893 381d 	ldrb.w	r3, [r3, #2077]	; 0x81d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800770e:	b292      	uxth	r2, r2
 8007710:	9202      	str	r2, [sp, #8]
 8007712:	2200      	movs	r2, #0
 8007714:	9201      	str	r2, [sp, #4]
 8007716:	9300      	str	r3, [sp, #0]
 8007718:	4603      	mov	r3, r0
 800771a:	2200      	movs	r2, #0
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f001 fc15 	bl	8008f4c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007722:	e1b7      	b.n	8007a94 <USBH_Process+0x584>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 f9c9 	bl	8007abc <USBH_HandleEnum>
 800772a:	4603      	mov	r3, r0
 800772c:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800772e:	7bbb      	ldrb	r3, [r7, #14]
 8007730:	b2db      	uxtb	r3, r3
 8007732:	2b00      	cmp	r3, #0
 8007734:	f040 81a3 	bne.w	8007a7e <USBH_Process+0x56e>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 8007738:	484d      	ldr	r0, [pc, #308]	; (8007870 <USBH_Process+0x360>)
 800773a:	f002 f9db 	bl	8009af4 <iprintf>
 800773e:	200a      	movs	r0, #10
 8007740:	f002 f9ea 	bl	8009b18 <putchar>

        phost->device.current_interface = 0U;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800774a:	2200      	movs	r2, #0
 800774c:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007756:	f893 3837 	ldrb.w	r3, [r3, #2103]	; 0x837
 800775a:	2b01      	cmp	r3, #1
 800775c:	d109      	bne.n	8007772 <USBH_Process+0x262>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 800775e:	4845      	ldr	r0, [pc, #276]	; (8007874 <USBH_Process+0x364>)
 8007760:	f002 f9c8 	bl	8009af4 <iprintf>
 8007764:	200a      	movs	r0, #10
 8007766:	f002 f9d7 	bl	8009b18 <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2208      	movs	r2, #8
 800776e:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8007770:	e185      	b.n	8007a7e <USBH_Process+0x56e>
          phost->gState = HOST_INPUT;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2207      	movs	r2, #7
 8007776:	701a      	strb	r2, [r3, #0]
      break;
 8007778:	e181      	b.n	8007a7e <USBH_Process+0x56e>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007780:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8007784:	2b00      	cmp	r3, #0
 8007786:	f000 817c 	beq.w	8007a82 <USBH_Process+0x572>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007790:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8007794:	2101      	movs	r1, #1
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2208      	movs	r2, #8
 800779e:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 80077a0:	e16f      	b.n	8007a82 <USBH_Process+0x572>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077a8:	f893 383d 	ldrb.w	r3, [r3, #2109]	; 0x83d
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	4619      	mov	r1, r3
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 fe36 	bl	8008422 <USBH_SetCfg>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f040 8164 	bne.w	8007a86 <USBH_Process+0x576>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2209      	movs	r2, #9
 80077c2:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 80077c4:	482c      	ldr	r0, [pc, #176]	; (8007878 <USBH_Process+0x368>)
 80077c6:	f002 f995 	bl	8009af4 <iprintf>
 80077ca:	200a      	movs	r0, #10
 80077cc:	f002 f9a4 	bl	8009b18 <putchar>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80077d0:	e159      	b.n	8007a86 <USBH_Process+0x576>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077d8:	f893 383f 	ldrb.w	r3, [r3, #2111]	; 0x83f
 80077dc:	f003 0320 	and.w	r3, r3, #32
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d022      	beq.n	800782a <USBH_Process+0x31a>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80077e4:	2101      	movs	r1, #1
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fe65 	bl	80084b6 <USBH_SetFeature>
 80077ec:	4603      	mov	r3, r0
 80077ee:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80077f0:	7bbb      	ldrb	r3, [r7, #14]
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d109      	bne.n	800780c <USBH_Process+0x2fc>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 80077f8:	4820      	ldr	r0, [pc, #128]	; (800787c <USBH_Process+0x36c>)
 80077fa:	f002 f97b 	bl	8009af4 <iprintf>
 80077fe:	200a      	movs	r0, #10
 8007800:	f002 f98a 	bl	8009b18 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	220a      	movs	r2, #10
 8007808:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800780a:	e13e      	b.n	8007a8a <USBH_Process+0x57a>
        else if (status == USBH_NOT_SUPPORTED)
 800780c:	7bbb      	ldrb	r3, [r7, #14]
 800780e:	b2db      	uxtb	r3, r3
 8007810:	2b03      	cmp	r3, #3
 8007812:	f040 813a 	bne.w	8007a8a <USBH_Process+0x57a>
          USBH_UsrLog("Remote wakeup not supported by the device");
 8007816:	481a      	ldr	r0, [pc, #104]	; (8007880 <USBH_Process+0x370>)
 8007818:	f002 f96c 	bl	8009af4 <iprintf>
 800781c:	200a      	movs	r0, #10
 800781e:	f002 f97b 	bl	8009b18 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	220a      	movs	r2, #10
 8007826:	701a      	strb	r2, [r3, #0]
      break;
 8007828:	e12f      	b.n	8007a8a <USBH_Process+0x57a>
        phost->gState = HOST_CHECK_CLASS;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	220a      	movs	r2, #10
 800782e:	701a      	strb	r2, [r3, #0]
      break;
 8007830:	e12b      	b.n	8007a8a <USBH_Process+0x57a>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007838:	f8d3 3a54 	ldr.w	r3, [r3, #2644]	; 0xa54
 800783c:	2b00      	cmp	r3, #0
 800783e:	d106      	bne.n	800784e <USBH_Process+0x33e>
      {
        USBH_UsrLog("No Class has been registered.");
 8007840:	4810      	ldr	r0, [pc, #64]	; (8007884 <USBH_Process+0x374>)
 8007842:	f002 f957 	bl	8009af4 <iprintf>
 8007846:	200a      	movs	r0, #10
 8007848:	f002 f966 	bl	8009b18 <putchar>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800784c:	e122      	b.n	8007a94 <USBH_Process+0x584>
        phost->pActiveClass = NULL;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007854:	461a      	mov	r2, r3
 8007856:	2300      	movs	r3, #0
 8007858:	f8c2 3a50 	str.w	r3, [r2, #2640]	; 0xa50
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800785c:	2300      	movs	r3, #0
 800785e:	73fb      	strb	r3, [r7, #15]
 8007860:	e02f      	b.n	80078c2 <USBH_Process+0x3b2>
 8007862:	bf00      	nop
 8007864:	0800a980 	.word	0x0800a980
 8007868:	0800a998 	.word	0x0800a998
 800786c:	0800a9b4 	.word	0x0800a9b4
 8007870:	0800a9e0 	.word	0x0800a9e0
 8007874:	0800a9f4 	.word	0x0800a9f4
 8007878:	0800aa1c 	.word	0x0800aa1c
 800787c:	0800aa38 	.word	0x0800aa38
 8007880:	0800aa58 	.word	0x0800aa58
 8007884:	0800aa84 	.word	0x0800aa84
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007888:	7bfa      	ldrb	r2, [r7, #15]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f202 628e 	addw	r2, r2, #1678	; 0x68e
 8007890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007894:	791a      	ldrb	r2, [r3, #4]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800789c:	f893 3847 	ldrb.w	r3, [r3, #2119]	; 0x847
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d10b      	bne.n	80078bc <USBH_Process+0x3ac>
            phost->pActiveClass = phost->pClass[idx];
 80078a4:	7bfa      	ldrb	r2, [r7, #15]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f202 628e 	addw	r2, r2, #1678	; 0x68e
 80078ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80078b6:	f8c2 3a50 	str.w	r3, [r2, #2640]	; 0xa50
            break;
 80078ba:	e005      	b.n	80078c8 <USBH_Process+0x3b8>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80078bc:	7bfb      	ldrb	r3, [r7, #15]
 80078be:	3301      	adds	r3, #1
 80078c0:	73fb      	strb	r3, [r7, #15]
 80078c2:	7bfb      	ldrb	r3, [r7, #15]
 80078c4:	2b05      	cmp	r3, #5
 80078c6:	d9df      	bls.n	8007888 <USBH_Process+0x378>
        if (phost->pActiveClass != NULL)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078ce:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d034      	beq.n	8007940 <USBH_Process+0x430>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078dc:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	4798      	blx	r3
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d118      	bne.n	800791e <USBH_Process+0x40e>
            phost->gState = HOST_CLASS_REQUEST;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2206      	movs	r2, #6
 80078f0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078f8:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4619      	mov	r1, r3
 8007900:	4867      	ldr	r0, [pc, #412]	; (8007aa0 <USBH_Process+0x590>)
 8007902:	f002 f8f7 	bl	8009af4 <iprintf>
 8007906:	200a      	movs	r0, #10
 8007908:	f002 f906 	bl	8009b18 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007912:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8007916:	2103      	movs	r1, #3
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	4798      	blx	r3
      break;
 800791c:	e0ba      	b.n	8007a94 <USBH_Process+0x584>
            phost->gState = HOST_ABORT_STATE;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	220d      	movs	r2, #13
 8007922:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800792a:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4619      	mov	r1, r3
 8007932:	485c      	ldr	r0, [pc, #368]	; (8007aa4 <USBH_Process+0x594>)
 8007934:	f002 f8de 	bl	8009af4 <iprintf>
 8007938:	200a      	movs	r0, #10
 800793a:	f002 f8ed 	bl	8009b18 <putchar>
      break;
 800793e:	e0a9      	b.n	8007a94 <USBH_Process+0x584>
          phost->gState = HOST_ABORT_STATE;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	220d      	movs	r2, #13
 8007944:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 8007946:	4858      	ldr	r0, [pc, #352]	; (8007aa8 <USBH_Process+0x598>)
 8007948:	f002 f8d4 	bl	8009af4 <iprintf>
 800794c:	200a      	movs	r0, #10
 800794e:	f002 f8e3 	bl	8009b18 <putchar>
      break;
 8007952:	e09f      	b.n	8007a94 <USBH_Process+0x584>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800795a:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 800795e:	2b00      	cmp	r3, #0
 8007960:	d022      	beq.n	80079a8 <USBH_Process+0x498>
      {
        status = phost->pActiveClass->Requests(phost);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007968:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	4798      	blx	r3
 8007972:	4603      	mov	r3, r0
 8007974:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007976:	7bbb      	ldrb	r3, [r7, #14]
 8007978:	b2db      	uxtb	r3, r3
 800797a:	2b00      	cmp	r3, #0
 800797c:	d103      	bne.n	8007986 <USBH_Process+0x476>
        {
          phost->gState = HOST_CLASS;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	220b      	movs	r2, #11
 8007982:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007984:	e083      	b.n	8007a8e <USBH_Process+0x57e>
        else if (status == USBH_FAIL)
 8007986:	7bbb      	ldrb	r3, [r7, #14]
 8007988:	b2db      	uxtb	r3, r3
 800798a:	2b02      	cmp	r3, #2
 800798c:	d17f      	bne.n	8007a8e <USBH_Process+0x57e>
          phost->gState = HOST_ABORT_STATE;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	220d      	movs	r2, #13
 8007992:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 8007994:	4845      	ldr	r0, [pc, #276]	; (8007aac <USBH_Process+0x59c>)
 8007996:	f002 f8ad 	bl	8009af4 <iprintf>
 800799a:	4845      	ldr	r0, [pc, #276]	; (8007ab0 <USBH_Process+0x5a0>)
 800799c:	f002 f8aa 	bl	8009af4 <iprintf>
 80079a0:	200a      	movs	r0, #10
 80079a2:	f002 f8b9 	bl	8009b18 <putchar>
      break;
 80079a6:	e072      	b.n	8007a8e <USBH_Process+0x57e>
        phost->gState = HOST_ABORT_STATE;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	220d      	movs	r2, #13
 80079ac:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 80079ae:	483f      	ldr	r0, [pc, #252]	; (8007aac <USBH_Process+0x59c>)
 80079b0:	f002 f8a0 	bl	8009af4 <iprintf>
 80079b4:	483f      	ldr	r0, [pc, #252]	; (8007ab4 <USBH_Process+0x5a4>)
 80079b6:	f002 f89d 	bl	8009af4 <iprintf>
 80079ba:	200a      	movs	r0, #10
 80079bc:	f002 f8ac 	bl	8009b18 <putchar>
      break;
 80079c0:	e065      	b.n	8007a8e <USBH_Process+0x57e>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079c8:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d060      	beq.n	8007a92 <USBH_Process+0x582>
      {
        phost->pActiveClass->BgndProcess(phost);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079d6:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 80079da:	695b      	ldr	r3, [r3, #20]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	4798      	blx	r3
      }
      break;
 80079e0:	e057      	b.n	8007a92 <USBH_Process+0x582>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 2821 	strb.w	r2, [r3, #2081]	; 0x821

      (void)DeInitStateMachine(phost);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f7ff fc3a 	bl	8007268 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079fa:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00e      	beq.n	8007a20 <USBH_Process+0x510>
      {
        phost->pActiveClass->DeInit(phost);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a08:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a18:	461a      	mov	r2, r3
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	f8c2 3a50 	str.w	r3, [r2, #2640]	; 0xa50
      }

      if (phost->pUser != NULL)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a26:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d007      	beq.n	8007a3e <USBH_Process+0x52e>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a34:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8007a38:	2105      	movs	r1, #5
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 8007a3e:	481e      	ldr	r0, [pc, #120]	; (8007ab8 <USBH_Process+0x5a8>)
 8007a40:	f002 f858 	bl	8009af4 <iprintf>
 8007a44:	200a      	movs	r0, #10
 8007a46:	f002 f867 	bl	8009b18 <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a50:	f893 3822 	ldrb.w	r3, [r3, #2082]	; 0x822
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d109      	bne.n	8007a6e <USBH_Process+0x55e>
      {
        phost->device.is_ReEnumerated = 0U;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 2822 	strb.w	r2, [r3, #2082]	; 0x822

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7ff fd41 	bl	80074ee <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007a6c:	e012      	b.n	8007a94 <USBH_Process+0x584>
        (void)USBH_LL_Start(phost);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f001 fd18 	bl	80094a4 <USBH_LL_Start>
      break;
 8007a74:	e00e      	b.n	8007a94 <USBH_Process+0x584>

    case HOST_ABORT_STATE:
    default :
      break;
 8007a76:	bf00      	nop
 8007a78:	e00c      	b.n	8007a94 <USBH_Process+0x584>
      break;
 8007a7a:	bf00      	nop
 8007a7c:	e00a      	b.n	8007a94 <USBH_Process+0x584>
      break;
 8007a7e:	bf00      	nop
 8007a80:	e008      	b.n	8007a94 <USBH_Process+0x584>
    break;
 8007a82:	bf00      	nop
 8007a84:	e006      	b.n	8007a94 <USBH_Process+0x584>
      break;
 8007a86:	bf00      	nop
 8007a88:	e004      	b.n	8007a94 <USBH_Process+0x584>
      break;
 8007a8a:	bf00      	nop
 8007a8c:	e002      	b.n	8007a94 <USBH_Process+0x584>
      break;
 8007a8e:	bf00      	nop
 8007a90:	e000      	b.n	8007a94 <USBH_Process+0x584>
      break;
 8007a92:	bf00      	nop
  }
  return USBH_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	0800aaa4 	.word	0x0800aaa4
 8007aa4:	0800aab8 	.word	0x0800aab8
 8007aa8:	0800aad8 	.word	0x0800aad8
 8007aac:	0800a8c0 	.word	0x0800a8c0
 8007ab0:	0800ab00 	.word	0x0800ab00
 8007ab4:	0800ab28 	.word	0x0800ab28
 8007ab8:	0800ab40 	.word	0x0800ab40

08007abc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b088      	sub	sp, #32
 8007ac0:	af04      	add	r7, sp, #16
 8007ac2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	785b      	ldrb	r3, [r3, #1]
 8007ad0:	2b07      	cmp	r3, #7
 8007ad2:	f200 82bf 	bhi.w	8008054 <USBH_HandleEnum+0x598>
 8007ad6:	a201      	add	r2, pc, #4	; (adr r2, 8007adc <USBH_HandleEnum+0x20>)
 8007ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007adc:	08007afd 	.word	0x08007afd
 8007ae0:	08007bf9 	.word	0x08007bf9
 8007ae4:	08007cbd 	.word	0x08007cbd
 8007ae8:	08007d95 	.word	0x08007d95
 8007aec:	08007e29 	.word	0x08007e29
 8007af0:	08007eeb 	.word	0x08007eeb
 8007af4:	08007f67 	.word	0x08007f67
 8007af8:	08007fe1 	.word	0x08007fe1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007afc:	2108      	movs	r1, #8
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fb82 	bl	8008208 <USBH_Get_DevDesc>
 8007b04:	4603      	mov	r3, r0
 8007b06:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b08:	7bbb      	ldrb	r3, [r7, #14]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d13a      	bne.n	8007b84 <USBH_HandleEnum+0xc8>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b14:	f893 282d 	ldrb.w	r2, [r3, #2093]	; 0x82d
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	7919      	ldrb	r1, [r3, #4]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b2c:	f893 081c 	ldrb.w	r0, [r3, #2076]	; 0x81c
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b36:	f893 381d 	ldrb.w	r3, [r3, #2077]	; 0x81d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007b3e:	b292      	uxth	r2, r2
 8007b40:	9202      	str	r2, [sp, #8]
 8007b42:	2200      	movs	r2, #0
 8007b44:	9201      	str	r2, [sp, #4]
 8007b46:	9300      	str	r3, [sp, #0]
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2280      	movs	r2, #128	; 0x80
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f001 f9fd 	bl	8008f4c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	7959      	ldrb	r1, [r3, #5]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b5c:	f893 081c 	ldrb.w	r0, [r3, #2076]	; 0x81c
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b66:	f893 381d 	ldrb.w	r3, [r3, #2077]	; 0x81d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b6e:	b292      	uxth	r2, r2
 8007b70:	9202      	str	r2, [sp, #8]
 8007b72:	2200      	movs	r2, #0
 8007b74:	9201      	str	r2, [sp, #4]
 8007b76:	9300      	str	r3, [sp, #0]
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f001 f9e5 	bl	8008f4c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007b82:	e269      	b.n	8008058 <USBH_HandleEnum+0x59c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b84:	7bbb      	ldrb	r3, [r7, #14]
 8007b86:	2b03      	cmp	r3, #3
 8007b88:	f040 8266 	bne.w	8008058 <USBH_HandleEnum+0x59c>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 8007b8c:	48af      	ldr	r0, [pc, #700]	; (8007e4c <USBH_HandleEnum+0x390>)
 8007b8e:	f001 ffb1 	bl	8009af4 <iprintf>
 8007b92:	48af      	ldr	r0, [pc, #700]	; (8007e50 <USBH_HandleEnum+0x394>)
 8007b94:	f001 ffae 	bl	8009af4 <iprintf>
 8007b98:	200a      	movs	r0, #10
 8007b9a:	f001 ffbd 	bl	8009b18 <putchar>
        phost->device.EnumCnt++;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ba4:	f893 381e 	ldrb.w	r3, [r3, #2078]	; 0x81e
 8007ba8:	3301      	adds	r3, #1
 8007baa:	b2da      	uxtb	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bb2:	f883 281e 	strb.w	r2, [r3, #2078]	; 0x81e
        if (phost->device.EnumCnt > 3U)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bbc:	f893 381e 	ldrb.w	r3, [r3, #2078]	; 0x81e
 8007bc0:	2b03      	cmp	r3, #3
 8007bc2:	d909      	bls.n	8007bd8 <USBH_HandleEnum+0x11c>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8007bc4:	48a3      	ldr	r0, [pc, #652]	; (8007e54 <USBH_HandleEnum+0x398>)
 8007bc6:	f001 ff95 	bl	8009af4 <iprintf>
 8007bca:	200a      	movs	r0, #10
 8007bcc:	f001 ffa4 	bl	8009b18 <putchar>
          phost->gState = HOST_ABORT_STATE;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	220d      	movs	r2, #13
 8007bd4:	701a      	strb	r2, [r3, #0]
      break;
 8007bd6:	e23f      	b.n	8008058 <USBH_HandleEnum+0x59c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	795b      	ldrb	r3, [r3, #5]
 8007bdc:	4619      	mov	r1, r3
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f001 fa04 	bl	8008fec <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	791b      	ldrb	r3, [r3, #4]
 8007be8:	4619      	mov	r1, r3
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f001 f9fe 	bl	8008fec <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	701a      	strb	r2, [r3, #0]
      break;
 8007bf6:	e22f      	b.n	8008058 <USBH_HandleEnum+0x59c>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007bf8:	2112      	movs	r1, #18
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 fb04 	bl	8008208 <USBH_Get_DevDesc>
 8007c00:	4603      	mov	r3, r0
 8007c02:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c04:	7bbb      	ldrb	r3, [r7, #14]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d11b      	bne.n	8007c42 <USBH_HandleEnum+0x186>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c10:	f8b3 3830 	ldrh.w	r3, [r3, #2096]	; 0x830
 8007c14:	4619      	mov	r1, r3
 8007c16:	4890      	ldr	r0, [pc, #576]	; (8007e58 <USBH_HandleEnum+0x39c>)
 8007c18:	f001 ff6c 	bl	8009af4 <iprintf>
 8007c1c:	200a      	movs	r0, #10
 8007c1e:	f001 ff7b 	bl	8009b18 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c28:	f8b3 382e 	ldrh.w	r3, [r3, #2094]	; 0x82e
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	488b      	ldr	r0, [pc, #556]	; (8007e5c <USBH_HandleEnum+0x3a0>)
 8007c30:	f001 ff60 	bl	8009af4 <iprintf>
 8007c34:	200a      	movs	r0, #10
 8007c36:	f001 ff6f 	bl	8009b18 <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2202      	movs	r2, #2
 8007c3e:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007c40:	e20c      	b.n	800805c <USBH_HandleEnum+0x5a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c42:	7bbb      	ldrb	r3, [r7, #14]
 8007c44:	2b03      	cmp	r3, #3
 8007c46:	f040 8209 	bne.w	800805c <USBH_HandleEnum+0x5a0>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 8007c4a:	4880      	ldr	r0, [pc, #512]	; (8007e4c <USBH_HandleEnum+0x390>)
 8007c4c:	f001 ff52 	bl	8009af4 <iprintf>
 8007c50:	4883      	ldr	r0, [pc, #524]	; (8007e60 <USBH_HandleEnum+0x3a4>)
 8007c52:	f001 ff4f 	bl	8009af4 <iprintf>
 8007c56:	200a      	movs	r0, #10
 8007c58:	f001 ff5e 	bl	8009b18 <putchar>
        phost->device.EnumCnt++;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c62:	f893 381e 	ldrb.w	r3, [r3, #2078]	; 0x81e
 8007c66:	3301      	adds	r3, #1
 8007c68:	b2da      	uxtb	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c70:	f883 281e 	strb.w	r2, [r3, #2078]	; 0x81e
        if (phost->device.EnumCnt > 3U)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c7a:	f893 381e 	ldrb.w	r3, [r3, #2078]	; 0x81e
 8007c7e:	2b03      	cmp	r3, #3
 8007c80:	d909      	bls.n	8007c96 <USBH_HandleEnum+0x1da>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8007c82:	4874      	ldr	r0, [pc, #464]	; (8007e54 <USBH_HandleEnum+0x398>)
 8007c84:	f001 ff36 	bl	8009af4 <iprintf>
 8007c88:	200a      	movs	r0, #10
 8007c8a:	f001 ff45 	bl	8009b18 <putchar>
          phost->gState = HOST_ABORT_STATE;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	220d      	movs	r2, #13
 8007c92:	701a      	strb	r2, [r3, #0]
      break;
 8007c94:	e1e2      	b.n	800805c <USBH_HandleEnum+0x5a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	795b      	ldrb	r3, [r3, #5]
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f001 f9a5 	bl	8008fec <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	791b      	ldrb	r3, [r3, #4]
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f001 f99f 	bl	8008fec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	701a      	strb	r2, [r3, #0]
      break;
 8007cba:	e1cf      	b.n	800805c <USBH_HandleEnum+0x5a0>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007cbc:	2101      	movs	r1, #1
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 fb8b 	bl	80083da <USBH_SetAddress>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007cc8:	7bbb      	ldrb	r3, [r7, #14]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d148      	bne.n	8007d60 <USBH_HandleEnum+0x2a4>
      {
        USBH_Delay(2U);
 8007cce:	2002      	movs	r0, #2
 8007cd0:	f001 fd5a 	bl	8009788 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 281c 	strb.w	r2, [r3, #2076]	; 0x81c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ce6:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 8007cea:	4619      	mov	r1, r3
 8007cec:	485d      	ldr	r0, [pc, #372]	; (8007e64 <USBH_HandleEnum+0x3a8>)
 8007cee:	f001 ff01 	bl	8009af4 <iprintf>
 8007cf2:	200a      	movs	r0, #10
 8007cf4:	f001 ff10 	bl	8009b18 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2203      	movs	r2, #3
 8007cfc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	7919      	ldrb	r1, [r3, #4]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d08:	f893 081c 	ldrb.w	r0, [r3, #2076]	; 0x81c
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d12:	f893 381d 	ldrb.w	r3, [r3, #2077]	; 0x81d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007d1a:	b292      	uxth	r2, r2
 8007d1c:	9202      	str	r2, [sp, #8]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	9201      	str	r2, [sp, #4]
 8007d22:	9300      	str	r3, [sp, #0]
 8007d24:	4603      	mov	r3, r0
 8007d26:	2280      	movs	r2, #128	; 0x80
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f001 f90f 	bl	8008f4c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	7959      	ldrb	r1, [r3, #5]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d38:	f893 081c 	ldrb.w	r0, [r3, #2076]	; 0x81c
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d42:	f893 381d 	ldrb.w	r3, [r3, #2077]	; 0x81d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007d4a:	b292      	uxth	r2, r2
 8007d4c:	9202      	str	r2, [sp, #8]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	9201      	str	r2, [sp, #4]
 8007d52:	9300      	str	r3, [sp, #0]
 8007d54:	4603      	mov	r3, r0
 8007d56:	2200      	movs	r2, #0
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f001 f8f7 	bl	8008f4c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007d5e:	e17f      	b.n	8008060 <USBH_HandleEnum+0x5a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d60:	7bbb      	ldrb	r3, [r7, #14]
 8007d62:	2b03      	cmp	r3, #3
 8007d64:	f040 817c 	bne.w	8008060 <USBH_HandleEnum+0x5a4>
        USBH_ErrLog("Control error: Device Set Address request failed");
 8007d68:	4838      	ldr	r0, [pc, #224]	; (8007e4c <USBH_HandleEnum+0x390>)
 8007d6a:	f001 fec3 	bl	8009af4 <iprintf>
 8007d6e:	483e      	ldr	r0, [pc, #248]	; (8007e68 <USBH_HandleEnum+0x3ac>)
 8007d70:	f001 fec0 	bl	8009af4 <iprintf>
 8007d74:	200a      	movs	r0, #10
 8007d76:	f001 fecf 	bl	8009b18 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8007d7a:	4836      	ldr	r0, [pc, #216]	; (8007e54 <USBH_HandleEnum+0x398>)
 8007d7c:	f001 feba 	bl	8009af4 <iprintf>
 8007d80:	200a      	movs	r0, #10
 8007d82:	f001 fec9 	bl	8009b18 <putchar>
        phost->gState = HOST_ABORT_STATE;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	220d      	movs	r2, #13
 8007d8a:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	705a      	strb	r2, [r3, #1]
      break;
 8007d92:	e165      	b.n	8008060 <USBH_HandleEnum+0x5a4>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007d94:	2109      	movs	r1, #9
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fa70 	bl	800827c <USBH_Get_CfgDesc>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007da0:	7bbb      	ldrb	r3, [r7, #14]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d103      	bne.n	8007dae <USBH_HandleEnum+0x2f2>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2204      	movs	r2, #4
 8007daa:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007dac:	e15a      	b.n	8008064 <USBH_HandleEnum+0x5a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007dae:	7bbb      	ldrb	r3, [r7, #14]
 8007db0:	2b03      	cmp	r3, #3
 8007db2:	f040 8157 	bne.w	8008064 <USBH_HandleEnum+0x5a8>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 8007db6:	4825      	ldr	r0, [pc, #148]	; (8007e4c <USBH_HandleEnum+0x390>)
 8007db8:	f001 fe9c 	bl	8009af4 <iprintf>
 8007dbc:	482b      	ldr	r0, [pc, #172]	; (8007e6c <USBH_HandleEnum+0x3b0>)
 8007dbe:	f001 fe99 	bl	8009af4 <iprintf>
 8007dc2:	200a      	movs	r0, #10
 8007dc4:	f001 fea8 	bl	8009b18 <putchar>
        phost->device.EnumCnt++;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dce:	f893 381e 	ldrb.w	r3, [r3, #2078]	; 0x81e
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	b2da      	uxtb	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ddc:	f883 281e 	strb.w	r2, [r3, #2078]	; 0x81e
        if (phost->device.EnumCnt > 3U)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007de6:	f893 381e 	ldrb.w	r3, [r3, #2078]	; 0x81e
 8007dea:	2b03      	cmp	r3, #3
 8007dec:	d909      	bls.n	8007e02 <USBH_HandleEnum+0x346>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8007dee:	4819      	ldr	r0, [pc, #100]	; (8007e54 <USBH_HandleEnum+0x398>)
 8007df0:	f001 fe80 	bl	8009af4 <iprintf>
 8007df4:	200a      	movs	r0, #10
 8007df6:	f001 fe8f 	bl	8009b18 <putchar>
          phost->gState = HOST_ABORT_STATE;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	220d      	movs	r2, #13
 8007dfe:	701a      	strb	r2, [r3, #0]
      break;
 8007e00:	e130      	b.n	8008064 <USBH_HandleEnum+0x5a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	795b      	ldrb	r3, [r3, #5]
 8007e06:	4619      	mov	r1, r3
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f001 f8ef 	bl	8008fec <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	791b      	ldrb	r3, [r3, #4]
 8007e12:	4619      	mov	r1, r3
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f001 f8e9 	bl	8008fec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	701a      	strb	r2, [r3, #0]
      break;
 8007e26:	e11d      	b.n	8008064 <USBH_HandleEnum+0x5a8>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e2e:	f8b3 383a 	ldrh.w	r3, [r3, #2106]	; 0x83a
 8007e32:	4619      	mov	r1, r3
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 fa21 	bl	800827c <USBH_Get_CfgDesc>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e3e:	7bbb      	ldrb	r3, [r7, #14]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d115      	bne.n	8007e70 <USBH_HandleEnum+0x3b4>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2205      	movs	r2, #5
 8007e48:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007e4a:	e10d      	b.n	8008068 <USBH_HandleEnum+0x5ac>
 8007e4c:	0800a8c0 	.word	0x0800a8c0
 8007e50:	0800ab58 	.word	0x0800ab58
 8007e54:	0800ab8c 	.word	0x0800ab8c
 8007e58:	0800abcc 	.word	0x0800abcc
 8007e5c:	0800abd8 	.word	0x0800abd8
 8007e60:	0800abe4 	.word	0x0800abe4
 8007e64:	0800ac20 	.word	0x0800ac20
 8007e68:	0800ac38 	.word	0x0800ac38
 8007e6c:	0800ac6c 	.word	0x0800ac6c
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e70:	7bbb      	ldrb	r3, [r7, #14]
 8007e72:	2b03      	cmp	r3, #3
 8007e74:	f040 80f8 	bne.w	8008068 <USBH_HandleEnum+0x5ac>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 8007e78:	4881      	ldr	r0, [pc, #516]	; (8008080 <USBH_HandleEnum+0x5c4>)
 8007e7a:	f001 fe3b 	bl	8009af4 <iprintf>
 8007e7e:	4881      	ldr	r0, [pc, #516]	; (8008084 <USBH_HandleEnum+0x5c8>)
 8007e80:	f001 fe38 	bl	8009af4 <iprintf>
 8007e84:	200a      	movs	r0, #10
 8007e86:	f001 fe47 	bl	8009b18 <putchar>
        phost->device.EnumCnt++;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e90:	f893 381e 	ldrb.w	r3, [r3, #2078]	; 0x81e
 8007e94:	3301      	adds	r3, #1
 8007e96:	b2da      	uxtb	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e9e:	f883 281e 	strb.w	r2, [r3, #2078]	; 0x81e
        if (phost->device.EnumCnt > 3U)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ea8:	f893 381e 	ldrb.w	r3, [r3, #2078]	; 0x81e
 8007eac:	2b03      	cmp	r3, #3
 8007eae:	d909      	bls.n	8007ec4 <USBH_HandleEnum+0x408>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8007eb0:	4875      	ldr	r0, [pc, #468]	; (8008088 <USBH_HandleEnum+0x5cc>)
 8007eb2:	f001 fe1f 	bl	8009af4 <iprintf>
 8007eb6:	200a      	movs	r0, #10
 8007eb8:	f001 fe2e 	bl	8009b18 <putchar>
          phost->gState = HOST_ABORT_STATE;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	220d      	movs	r2, #13
 8007ec0:	701a      	strb	r2, [r3, #0]
      break;
 8007ec2:	e0d1      	b.n	8008068 <USBH_HandleEnum+0x5ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	795b      	ldrb	r3, [r3, #5]
 8007ec8:	4619      	mov	r1, r3
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f001 f88e 	bl	8008fec <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	791b      	ldrb	r3, [r3, #4]
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f001 f888 	bl	8008fec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	701a      	strb	r2, [r3, #0]
      break;
 8007ee8:	e0be      	b.n	8008068 <USBH_HandleEnum+0x5ac>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ef0:	f893 3834 	ldrb.w	r3, [r3, #2100]	; 0x834
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d02c      	beq.n	8007f52 <USBH_HandleEnum+0x496>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007efe:	f893 1834 	ldrb.w	r1, [r3, #2100]	; 0x834
                                        phost->device.Data, 0xFFU);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f603 021c 	addw	r2, r3, #2076	; 0x81c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007f08:	23ff      	movs	r3, #255	; 0xff
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 f9ee 	bl	80082ec <USBH_Get_StringDesc>
 8007f10:	4603      	mov	r3, r0
 8007f12:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007f14:	7bbb      	ldrb	r3, [r7, #14]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d10d      	bne.n	8007f36 <USBH_HandleEnum+0x47a>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8007f20:	4619      	mov	r1, r3
 8007f22:	485a      	ldr	r0, [pc, #360]	; (800808c <USBH_HandleEnum+0x5d0>)
 8007f24:	f001 fde6 	bl	8009af4 <iprintf>
 8007f28:	200a      	movs	r0, #10
 8007f2a:	f001 fdf5 	bl	8009b18 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2206      	movs	r2, #6
 8007f32:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8007f34:	e09a      	b.n	800806c <USBH_HandleEnum+0x5b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f36:	7bbb      	ldrb	r3, [r7, #14]
 8007f38:	2b03      	cmp	r3, #3
 8007f3a:	f040 8097 	bne.w	800806c <USBH_HandleEnum+0x5b0>
          USBH_UsrLog("Manufacturer : N/A");
 8007f3e:	4854      	ldr	r0, [pc, #336]	; (8008090 <USBH_HandleEnum+0x5d4>)
 8007f40:	f001 fdd8 	bl	8009af4 <iprintf>
 8007f44:	200a      	movs	r0, #10
 8007f46:	f001 fde7 	bl	8009b18 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2206      	movs	r2, #6
 8007f4e:	705a      	strb	r2, [r3, #1]
      break;
 8007f50:	e08c      	b.n	800806c <USBH_HandleEnum+0x5b0>
        USBH_UsrLog("Manufacturer : N/A");
 8007f52:	484f      	ldr	r0, [pc, #316]	; (8008090 <USBH_HandleEnum+0x5d4>)
 8007f54:	f001 fdce 	bl	8009af4 <iprintf>
 8007f58:	200a      	movs	r0, #10
 8007f5a:	f001 fddd 	bl	8009b18 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2206      	movs	r2, #6
 8007f62:	705a      	strb	r2, [r3, #1]
      break;
 8007f64:	e082      	b.n	800806c <USBH_HandleEnum+0x5b0>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f6c:	f893 3835 	ldrb.w	r3, [r3, #2101]	; 0x835
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d02b      	beq.n	8007fcc <USBH_HandleEnum+0x510>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f7a:	f893 1835 	ldrb.w	r1, [r3, #2101]	; 0x835
                                        phost->device.Data, 0xFFU);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f603 021c 	addw	r2, r3, #2076	; 0x81c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007f84:	23ff      	movs	r3, #255	; 0xff
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 f9b0 	bl	80082ec <USBH_Get_StringDesc>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007f90:	7bbb      	ldrb	r3, [r7, #14]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d10d      	bne.n	8007fb2 <USBH_HandleEnum+0x4f6>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	483d      	ldr	r0, [pc, #244]	; (8008094 <USBH_HandleEnum+0x5d8>)
 8007fa0:	f001 fda8 	bl	8009af4 <iprintf>
 8007fa4:	200a      	movs	r0, #10
 8007fa6:	f001 fdb7 	bl	8009b18 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2207      	movs	r2, #7
 8007fae:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8007fb0:	e05e      	b.n	8008070 <USBH_HandleEnum+0x5b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007fb2:	7bbb      	ldrb	r3, [r7, #14]
 8007fb4:	2b03      	cmp	r3, #3
 8007fb6:	d15b      	bne.n	8008070 <USBH_HandleEnum+0x5b4>
          USBH_UsrLog("Product : N/A");
 8007fb8:	4837      	ldr	r0, [pc, #220]	; (8008098 <USBH_HandleEnum+0x5dc>)
 8007fba:	f001 fd9b 	bl	8009af4 <iprintf>
 8007fbe:	200a      	movs	r0, #10
 8007fc0:	f001 fdaa 	bl	8009b18 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2207      	movs	r2, #7
 8007fc8:	705a      	strb	r2, [r3, #1]
      break;
 8007fca:	e051      	b.n	8008070 <USBH_HandleEnum+0x5b4>
        USBH_UsrLog("Product : N/A");
 8007fcc:	4832      	ldr	r0, [pc, #200]	; (8008098 <USBH_HandleEnum+0x5dc>)
 8007fce:	f001 fd91 	bl	8009af4 <iprintf>
 8007fd2:	200a      	movs	r0, #10
 8007fd4:	f001 fda0 	bl	8009b18 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2207      	movs	r2, #7
 8007fdc:	705a      	strb	r2, [r3, #1]
      break;
 8007fde:	e047      	b.n	8008070 <USBH_HandleEnum+0x5b4>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fe6:	f893 3836 	ldrb.w	r3, [r3, #2102]	; 0x836
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d029      	beq.n	8008042 <USBH_HandleEnum+0x586>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ff4:	f893 1836 	ldrb.w	r1, [r3, #2102]	; 0x836
                                        phost->device.Data, 0xFFU);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f603 021c 	addw	r2, r3, #2076	; 0x81c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007ffe:	23ff      	movs	r3, #255	; 0xff
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f973 	bl	80082ec <USBH_Get_StringDesc>
 8008006:	4603      	mov	r3, r0
 8008008:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800800a:	7bbb      	ldrb	r3, [r7, #14]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d10c      	bne.n	800802a <USBH_HandleEnum+0x56e>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8008016:	4619      	mov	r1, r3
 8008018:	4820      	ldr	r0, [pc, #128]	; (800809c <USBH_HandleEnum+0x5e0>)
 800801a:	f001 fd6b 	bl	8009af4 <iprintf>
 800801e:	200a      	movs	r0, #10
 8008020:	f001 fd7a 	bl	8009b18 <putchar>
          Status = USBH_OK;
 8008024:	2300      	movs	r3, #0
 8008026:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008028:	e024      	b.n	8008074 <USBH_HandleEnum+0x5b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800802a:	7bbb      	ldrb	r3, [r7, #14]
 800802c:	2b03      	cmp	r3, #3
 800802e:	d121      	bne.n	8008074 <USBH_HandleEnum+0x5b8>
          USBH_UsrLog("Serial Number : N/A");
 8008030:	481b      	ldr	r0, [pc, #108]	; (80080a0 <USBH_HandleEnum+0x5e4>)
 8008032:	f001 fd5f 	bl	8009af4 <iprintf>
 8008036:	200a      	movs	r0, #10
 8008038:	f001 fd6e 	bl	8009b18 <putchar>
          Status = USBH_OK;
 800803c:	2300      	movs	r3, #0
 800803e:	73fb      	strb	r3, [r7, #15]
      break;
 8008040:	e018      	b.n	8008074 <USBH_HandleEnum+0x5b8>
        USBH_UsrLog("Serial Number : N/A");
 8008042:	4817      	ldr	r0, [pc, #92]	; (80080a0 <USBH_HandleEnum+0x5e4>)
 8008044:	f001 fd56 	bl	8009af4 <iprintf>
 8008048:	200a      	movs	r0, #10
 800804a:	f001 fd65 	bl	8009b18 <putchar>
        Status = USBH_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	73fb      	strb	r3, [r7, #15]
      break;
 8008052:	e00f      	b.n	8008074 <USBH_HandleEnum+0x5b8>

    default:
      break;
 8008054:	bf00      	nop
 8008056:	e00e      	b.n	8008076 <USBH_HandleEnum+0x5ba>
      break;
 8008058:	bf00      	nop
 800805a:	e00c      	b.n	8008076 <USBH_HandleEnum+0x5ba>
      break;
 800805c:	bf00      	nop
 800805e:	e00a      	b.n	8008076 <USBH_HandleEnum+0x5ba>
      break;
 8008060:	bf00      	nop
 8008062:	e008      	b.n	8008076 <USBH_HandleEnum+0x5ba>
      break;
 8008064:	bf00      	nop
 8008066:	e006      	b.n	8008076 <USBH_HandleEnum+0x5ba>
      break;
 8008068:	bf00      	nop
 800806a:	e004      	b.n	8008076 <USBH_HandleEnum+0x5ba>
      break;
 800806c:	bf00      	nop
 800806e:	e002      	b.n	8008076 <USBH_HandleEnum+0x5ba>
      break;
 8008070:	bf00      	nop
 8008072:	e000      	b.n	8008076 <USBH_HandleEnum+0x5ba>
      break;
 8008074:	bf00      	nop
  }
  return Status;
 8008076:	7bfb      	ldrb	r3, [r7, #15]
}
 8008078:	4618      	mov	r0, r3
 800807a:	3710      	adds	r7, #16
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}
 8008080:	0800a8c0 	.word	0x0800a8c0
 8008084:	0800ac6c 	.word	0x0800ac6c
 8008088:	0800ab8c 	.word	0x0800ab8c
 800808c:	0800acb0 	.word	0x0800acb0
 8008090:	0800acc4 	.word	0x0800acc4
 8008094:	0800acd8 	.word	0x0800acd8
 8008098:	0800ace8 	.word	0x0800ace8
 800809c:	0800acf8 	.word	0x0800acf8
 80080a0:	0800ad0c 	.word	0x0800ad0c

080080a4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080b4:	461a      	mov	r2, r3
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	f8c2 3a98 	str.w	r3, [r2, #2712]	; 0xa98
}
 80080bc:	bf00      	nop
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080d6:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 80080da:	3301      	adds	r3, #1
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80080e2:	f8c2 3a98 	str.w	r3, [r2, #2712]	; 0xa98
  USBH_HandleSof(phost);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f804 	bl	80080f4 <USBH_HandleSof>
}
 80080ec:	bf00      	nop
 80080ee:	3708      	adds	r7, #8
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	b2db      	uxtb	r3, r3
 8008102:	2b0b      	cmp	r3, #11
 8008104:	d10e      	bne.n	8008124 <USBH_HandleSof+0x30>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800810c:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 8008110:	2b00      	cmp	r3, #0
 8008112:	d007      	beq.n	8008124 <USBH_HandleSof+0x30>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800811a:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 800811e:	699b      	ldr	r3, [r3, #24]
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	4798      	blx	r3
  }
}
 8008124:	bf00      	nop
 8008126:	3708      	adds	r7, #8
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800813a:	2201      	movs	r2, #1
 800813c:	f883 2823 	strb.w	r2, [r3, #2083]	; 0x823

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 8008140:	bf00      	nop
}
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800815a:	2200      	movs	r2, #0
 800815c:	f883 2823 	strb.w	r2, [r3, #2083]	; 0x823
  phost->device.is_disconnected = 1U;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008166:	2201      	movs	r2, #1
 8008168:	f883 2821 	strb.w	r2, [r3, #2081]	; 0x821

  return;
 800816c:	bf00      	nop
}
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008186:	2201      	movs	r2, #1
 8008188:	f883 2820 	strb.w	r2, [r3, #2080]	; 0x820
  phost->device.is_disconnected = 0U;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008192:	2200      	movs	r2, #0
 8008194:	f883 2821 	strb.w	r2, [r3, #2081]	; 0x821
  phost->device.is_ReEnumerated = 0U;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800819e:	2200      	movs	r2, #0
 80081a0:	f883 2822 	strb.w	r2, [r3, #2082]	; 0x822

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	370c      	adds	r7, #12
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr

080081b2 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b082      	sub	sp, #8
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081c0:	2201      	movs	r2, #1
 80081c2:	f883 2821 	strb.w	r2, [r3, #2081]	; 0x821
  phost->device.is_connected = 0U;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081cc:	2200      	movs	r2, #0
 80081ce:	f883 2820 	strb.w	r2, [r3, #2080]	; 0x820
  phost->device.PortEnabled = 0U;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081d8:	2200      	movs	r2, #0
 80081da:	f883 2823 	strb.w	r2, [r3, #2083]	; 0x823

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f001 f97d 	bl	80094de <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	791b      	ldrb	r3, [r3, #4]
 80081e8:	4619      	mov	r1, r3
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 fefe 	bl	8008fec <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	795b      	ldrb	r3, [r3, #5]
 80081f4:	4619      	mov	r1, r3
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 fef8 	bl	8008fec <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3708      	adds	r7, #8
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
	...

08008208 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b086      	sub	sp, #24
 800820c:	af02      	add	r7, sp, #8
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	460b      	mov	r3, r1
 8008212:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008214:	887b      	ldrh	r3, [r7, #2]
 8008216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800821a:	d90a      	bls.n	8008232 <USBH_Get_DevDesc+0x2a>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
 800821c:	4815      	ldr	r0, [pc, #84]	; (8008274 <USBH_Get_DevDesc+0x6c>)
 800821e:	f001 fc69 	bl	8009af4 <iprintf>
 8008222:	4815      	ldr	r0, [pc, #84]	; (8008278 <USBH_Get_DevDesc+0x70>)
 8008224:	f001 fc66 	bl	8009af4 <iprintf>
 8008228:	200a      	movs	r0, #10
 800822a:	f001 fc75 	bl	8009b18 <putchar>
    return USBH_NOT_SUPPORTED;
 800822e:	2303      	movs	r3, #3
 8008230:	e01b      	b.n	800826a <USBH_Get_DevDesc+0x62>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f603 021c 	addw	r2, r3, #2076	; 0x81c
  status = USBH_GetDescriptor(phost,
 8008238:	887b      	ldrh	r3, [r7, #2]
 800823a:	9300      	str	r3, [sp, #0]
 800823c:	4613      	mov	r3, r2
 800823e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008242:	2100      	movs	r1, #0
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 f893 	bl	8008370 <USBH_GetDescriptor>
 800824a:	4603      	mov	r3, r0
 800824c:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800824e:	7bfb      	ldrb	r3, [r7, #15]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d109      	bne.n	8008268 <USBH_Get_DevDesc+0x60>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 800825a:	887a      	ldrh	r2, [r7, #2]
 800825c:	4619      	mov	r1, r3
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f94e 	bl	8008500 <USBH_ParseDevDesc>
 8008264:	4603      	mov	r3, r0
 8008266:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008268:	7bfb      	ldrb	r3, [r7, #15]
}
 800826a:	4618      	mov	r0, r3
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	0800ad20 	.word	0x0800ad20
 8008278:	0800ad28 	.word	0x0800ad28

0800827c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b086      	sub	sp, #24
 8008280:	af02      	add	r7, sp, #8
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	460b      	mov	r3, r1
 8008286:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	331c      	adds	r3, #28
 800828c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800828e:	887b      	ldrh	r3, [r7, #2]
 8008290:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008294:	d90a      	bls.n	80082ac <USBH_Get_CfgDesc+0x30>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
 8008296:	4813      	ldr	r0, [pc, #76]	; (80082e4 <USBH_Get_CfgDesc+0x68>)
 8008298:	f001 fc2c 	bl	8009af4 <iprintf>
 800829c:	4812      	ldr	r0, [pc, #72]	; (80082e8 <USBH_Get_CfgDesc+0x6c>)
 800829e:	f001 fc29 	bl	8009af4 <iprintf>
 80082a2:	200a      	movs	r0, #10
 80082a4:	f001 fc38 	bl	8009b18 <putchar>
    return USBH_NOT_SUPPORTED;
 80082a8:	2303      	movs	r3, #3
 80082aa:	e016      	b.n	80082da <USBH_Get_CfgDesc+0x5e>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80082ac:	887b      	ldrh	r3, [r7, #2]
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082b6:	2100      	movs	r1, #0
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 f859 	bl	8008370 <USBH_GetDescriptor>
 80082be:	4603      	mov	r3, r0
 80082c0:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80082c2:	7bfb      	ldrb	r3, [r7, #15]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d107      	bne.n	80082d8 <USBH_Get_CfgDesc+0x5c>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80082c8:	887b      	ldrh	r3, [r7, #2]
 80082ca:	461a      	mov	r2, r3
 80082cc:	68b9      	ldr	r1, [r7, #8]
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 f9d0 	bl	8008674 <USBH_ParseCfgDesc>
 80082d4:	4603      	mov	r3, r0
 80082d6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80082d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	0800ad20 	.word	0x0800ad20
 80082e8:	0800ad6c 	.word	0x0800ad6c

080082ec <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b088      	sub	sp, #32
 80082f0:	af02      	add	r7, sp, #8
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	607a      	str	r2, [r7, #4]
 80082f6:	461a      	mov	r2, r3
 80082f8:	460b      	mov	r3, r1
 80082fa:	72fb      	strb	r3, [r7, #11]
 80082fc:	4613      	mov	r3, r2
 80082fe:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008300:	893b      	ldrh	r3, [r7, #8]
 8008302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008306:	d802      	bhi.n	800830e <USBH_Get_StringDesc+0x22>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d10a      	bne.n	8008324 <USBH_Get_StringDesc+0x38>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
 800830e:	4816      	ldr	r0, [pc, #88]	; (8008368 <USBH_Get_StringDesc+0x7c>)
 8008310:	f001 fbf0 	bl	8009af4 <iprintf>
 8008314:	4815      	ldr	r0, [pc, #84]	; (800836c <USBH_Get_StringDesc+0x80>)
 8008316:	f001 fbed 	bl	8009af4 <iprintf>
 800831a:	200a      	movs	r0, #10
 800831c:	f001 fbfc 	bl	8009b18 <putchar>
    return USBH_NOT_SUPPORTED;
 8008320:	2303      	movs	r3, #3
 8008322:	e01c      	b.n	800835e <USBH_Get_StringDesc+0x72>
  }

  status = USBH_GetDescriptor(phost,
 8008324:	7afb      	ldrb	r3, [r7, #11]
 8008326:	b29b      	uxth	r3, r3
 8008328:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800832c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f603 011c 	addw	r1, r3, #2076	; 0x81c
  status = USBH_GetDescriptor(phost,
 8008334:	893b      	ldrh	r3, [r7, #8]
 8008336:	9300      	str	r3, [sp, #0]
 8008338:	460b      	mov	r3, r1
 800833a:	2100      	movs	r1, #0
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f000 f817 	bl	8008370 <USBH_GetDescriptor>
 8008342:	4603      	mov	r3, r0
 8008344:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008346:	7dfb      	ldrb	r3, [r7, #23]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d107      	bne.n	800835c <USBH_Get_StringDesc+0x70>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8008352:	893a      	ldrh	r2, [r7, #8]
 8008354:	6879      	ldr	r1, [r7, #4]
 8008356:	4618      	mov	r0, r3
 8008358:	f000 fb67 	bl	8008a2a <USBH_ParseStringDesc>
  }

  return status;
 800835c:	7dfb      	ldrb	r3, [r7, #23]
}
 800835e:	4618      	mov	r0, r3
 8008360:	3718      	adds	r7, #24
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	0800ad20 	.word	0x0800ad20
 800836c:	0800adb8 	.word	0x0800adb8

08008370 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	607b      	str	r3, [r7, #4]
 800837a:	460b      	mov	r3, r1
 800837c:	72fb      	strb	r3, [r7, #11]
 800837e:	4613      	mov	r3, r2
 8008380:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	789b      	ldrb	r3, [r3, #2]
 8008386:	2b01      	cmp	r3, #1
 8008388:	d11c      	bne.n	80083c4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800838a:	7afb      	ldrb	r3, [r7, #11]
 800838c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008390:	b2da      	uxtb	r2, r3
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2206      	movs	r2, #6
 800839a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	893a      	ldrh	r2, [r7, #8]
 80083a0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80083a2:	893b      	ldrh	r3, [r7, #8]
 80083a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80083a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083ac:	d104      	bne.n	80083b8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f240 4209 	movw	r2, #1033	; 0x409
 80083b4:	829a      	strh	r2, [r3, #20]
 80083b6:	e002      	b.n	80083be <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2200      	movs	r2, #0
 80083bc:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	8b3a      	ldrh	r2, [r7, #24]
 80083c2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80083c4:	8b3b      	ldrh	r3, [r7, #24]
 80083c6:	461a      	mov	r2, r3
 80083c8:	6879      	ldr	r1, [r7, #4]
 80083ca:	68f8      	ldr	r0, [r7, #12]
 80083cc:	f000 fb7b 	bl	8008ac6 <USBH_CtlReq>
 80083d0:	4603      	mov	r3, r0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b082      	sub	sp, #8
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
 80083e2:	460b      	mov	r3, r1
 80083e4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	789b      	ldrb	r3, [r3, #2]
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d10f      	bne.n	800840e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2205      	movs	r2, #5
 80083f8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80083fa:	78fb      	ldrb	r3, [r7, #3]
 80083fc:	b29a      	uxth	r2, r3
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2200      	movs	r2, #0
 8008406:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800840e:	2200      	movs	r2, #0
 8008410:	2100      	movs	r1, #0
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 fb57 	bl	8008ac6 <USBH_CtlReq>
 8008418:	4603      	mov	r3, r0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b082      	sub	sp, #8
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
 800842a:	460b      	mov	r3, r1
 800842c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	789b      	ldrb	r3, [r3, #2]
 8008432:	2b01      	cmp	r3, #1
 8008434:	d10e      	bne.n	8008454 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2209      	movs	r2, #9
 8008440:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	887a      	ldrh	r2, [r7, #2]
 8008446:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008454:	2200      	movs	r2, #0
 8008456:	2100      	movs	r1, #0
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 fb34 	bl	8008ac6 <USBH_CtlReq>
 800845e:	4603      	mov	r3, r0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <USBH_SetInterface>:
  * @param  phost: Host Handle
  * @param  altSetting: Interface value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetInterface(USBH_HandleTypeDef *phost, uint8_t ep_num, uint8_t altSetting)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	460b      	mov	r3, r1
 8008472:	70fb      	strb	r3, [r7, #3]
 8008474:	4613      	mov	r3, r2
 8008476:	70bb      	strb	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	789b      	ldrb	r3, [r3, #2]
 800847c:	2b01      	cmp	r3, #1
 800847e:	d110      	bne.n	80084a2 <USBH_SetInterface+0x3a>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_INTERFACE;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	220b      	movs	r2, #11
 800848a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = altSetting;
 800848c:	78bb      	ldrb	r3, [r7, #2]
 800848e:	b29a      	uxth	r2, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008494:	78fb      	ldrb	r3, [r7, #3]
 8008496:	b29a      	uxth	r2, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80084a2:	2200      	movs	r2, #0
 80084a4:	2100      	movs	r1, #0
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fb0d 	bl	8008ac6 <USBH_CtlReq>
 80084ac:	4603      	mov	r3, r0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b082      	sub	sp, #8
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
 80084be:	460b      	mov	r3, r1
 80084c0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	789b      	ldrb	r3, [r3, #2]
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d10f      	bne.n	80084ea <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2203      	movs	r2, #3
 80084d4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80084d6:	78fb      	ldrb	r3, [r7, #3]
 80084d8:	b29a      	uxth	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80084ea:	2200      	movs	r2, #0
 80084ec:	2100      	movs	r1, #0
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fae9 	bl	8008ac6 <USBH_CtlReq>
 80084f4:	4603      	mov	r3, r0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3708      	adds	r7, #8
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
	...

08008500 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008500:	b480      	push	{r7}
 8008502:	b087      	sub	sp, #28
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	4613      	mov	r3, r2
 800850c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8008514:	3306      	adds	r3, #6
 8008516:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008518:	2300      	movs	r3, #0
 800851a:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d101      	bne.n	8008526 <USBH_ParseDevDesc+0x26>
  {
    return USBH_FAIL;
 8008522:	2302      	movs	r3, #2
 8008524:	e09e      	b.n	8008664 <USBH_ParseDevDesc+0x164>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	781a      	ldrb	r2, [r3, #0]
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	785a      	ldrb	r2, [r3, #1]
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	3302      	adds	r3, #2
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	b29a      	uxth	r2, r3
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	3303      	adds	r3, #3
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	b29b      	uxth	r3, r3
 8008546:	021b      	lsls	r3, r3, #8
 8008548:	b29b      	uxth	r3, r3
 800854a:	4313      	orrs	r3, r2
 800854c:	b29a      	uxth	r2, r3
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	791a      	ldrb	r2, [r3, #4]
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	795a      	ldrb	r2, [r3, #5]
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	799a      	ldrb	r2, [r3, #6]
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	79da      	ldrb	r2, [r3, #7]
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008578:	f893 381d 	ldrb.w	r3, [r3, #2077]	; 0x81d
 800857c:	2b00      	cmp	r3, #0
 800857e:	d006      	beq.n	800858e <USBH_ParseDevDesc+0x8e>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008586:	f893 381d 	ldrb.w	r3, [r3, #2077]	; 0x81d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800858a:	2b01      	cmp	r3, #1
 800858c:	d11b      	bne.n	80085c6 <USBH_ParseDevDesc+0xc6>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	79db      	ldrb	r3, [r3, #7]
 8008592:	2b20      	cmp	r3, #32
 8008594:	dc0f      	bgt.n	80085b6 <USBH_ParseDevDesc+0xb6>
 8008596:	2b08      	cmp	r3, #8
 8008598:	db0f      	blt.n	80085ba <USBH_ParseDevDesc+0xba>
 800859a:	3b08      	subs	r3, #8
 800859c:	4a34      	ldr	r2, [pc, #208]	; (8008670 <USBH_ParseDevDesc+0x170>)
 800859e:	fa22 f303 	lsr.w	r3, r2, r3
 80085a2:	f003 0301 	and.w	r3, r3, #1
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	bf14      	ite	ne
 80085aa:	2301      	movne	r3, #1
 80085ac:	2300      	moveq	r3, #0
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d106      	bne.n	80085c2 <USBH_ParseDevDesc+0xc2>
 80085b4:	e001      	b.n	80085ba <USBH_ParseDevDesc+0xba>
 80085b6:	2b40      	cmp	r3, #64	; 0x40
 80085b8:	d003      	beq.n	80085c2 <USBH_ParseDevDesc+0xc2>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	2208      	movs	r2, #8
 80085be:	71da      	strb	r2, [r3, #7]
        break;
 80085c0:	e000      	b.n	80085c4 <USBH_ParseDevDesc+0xc4>
        break;
 80085c2:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80085c4:	e010      	b.n	80085e8 <USBH_ParseDevDesc+0xe8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085cc:	f893 381d 	ldrb.w	r3, [r3, #2077]	; 0x81d
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	d107      	bne.n	80085e4 <USBH_ParseDevDesc+0xe4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	79db      	ldrb	r3, [r3, #7]
 80085d8:	2b08      	cmp	r3, #8
 80085da:	d005      	beq.n	80085e8 <USBH_ParseDevDesc+0xe8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	2208      	movs	r2, #8
 80085e0:	71da      	strb	r2, [r3, #7]
 80085e2:	e001      	b.n	80085e8 <USBH_ParseDevDesc+0xe8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80085e4:	2303      	movs	r3, #3
 80085e6:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80085e8:	88fb      	ldrh	r3, [r7, #6]
 80085ea:	2b08      	cmp	r3, #8
 80085ec:	d939      	bls.n	8008662 <USBH_ParseDevDesc+0x162>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	3308      	adds	r3, #8
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	b29a      	uxth	r2, r3
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	3309      	adds	r3, #9
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	021b      	lsls	r3, r3, #8
 8008600:	b29b      	uxth	r3, r3
 8008602:	4313      	orrs	r3, r2
 8008604:	b29a      	uxth	r2, r3
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	330a      	adds	r3, #10
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	b29a      	uxth	r2, r3
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	330b      	adds	r3, #11
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	b29b      	uxth	r3, r3
 800861a:	021b      	lsls	r3, r3, #8
 800861c:	b29b      	uxth	r3, r3
 800861e:	4313      	orrs	r3, r2
 8008620:	b29a      	uxth	r2, r3
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	330c      	adds	r3, #12
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	b29a      	uxth	r2, r3
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	330d      	adds	r3, #13
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	b29b      	uxth	r3, r3
 8008636:	021b      	lsls	r3, r3, #8
 8008638:	b29b      	uxth	r3, r3
 800863a:	4313      	orrs	r3, r2
 800863c:	b29a      	uxth	r2, r3
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	7b9a      	ldrb	r2, [r3, #14]
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	7bda      	ldrb	r2, [r3, #15]
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	7c1a      	ldrb	r2, [r3, #16]
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	7c5a      	ldrb	r2, [r3, #17]
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008662:	7dfb      	ldrb	r3, [r7, #23]
}
 8008664:	4618      	mov	r0, r3
 8008666:	371c      	adds	r7, #28
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr
 8008670:	01000101 	.word	0x01000101

08008674 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b08c      	sub	sp, #48	; 0x30
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	4613      	mov	r3, r2
 8008680:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f503 53c1 	add.w	r3, r3, #6176	; 0x1820
 8008688:	3318      	adds	r3, #24
 800868a:	627b      	str	r3, [r7, #36]	; 0x24
  USBH_StatusTypeDef           status = USBH_OK;
 800868c:	2300      	movs	r3, #0
 800868e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008692:	2300      	movs	r3, #0
 8008694:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t                      ep_ix = 0U;
 8008698:	2300      	movs	r3, #0
 800869a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

  if (buf == NULL)
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d101      	bne.n	80086a8 <USBH_ParseCfgDesc+0x34>
  {
    return USBH_FAIL;
 80086a4:	2302      	movs	r3, #2
 80086a6:	e09e      	b.n	80087e6 <USBH_ParseCfgDesc+0x172>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80086ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	2b09      	cmp	r3, #9
 80086b2:	d002      	beq.n	80086ba <USBH_ParseCfgDesc+0x46>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80086b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b6:	2209      	movs	r2, #9
 80086b8:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	781a      	ldrb	r2, [r3, #0]
 80086be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c0:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	785a      	ldrb	r2, [r3, #1]
 80086c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c8:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	3302      	adds	r3, #2
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	b29a      	uxth	r2, r3
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	3303      	adds	r3, #3
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	b29b      	uxth	r3, r3
 80086da:	021b      	lsls	r3, r3, #8
 80086dc:	b29b      	uxth	r3, r3
 80086de:	4313      	orrs	r3, r2
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086e6:	bf28      	it	cs
 80086e8:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	791a      	ldrb	r2, [r3, #4]
 80086f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	795a      	ldrb	r2, [r3, #5]
 80086fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008700:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	799a      	ldrb	r2, [r3, #6]
 8008706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008708:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	79da      	ldrb	r2, [r3, #7]
 800870e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008710:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	7a1a      	ldrb	r2, [r3, #8]
 8008716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008718:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800871a:	88fb      	ldrh	r3, [r7, #6]
 800871c:	2b09      	cmp	r3, #9
 800871e:	d960      	bls.n	80087e2 <USBH_ParseCfgDesc+0x16e>
  {
    ptr = USB_LEN_CFG_DESC;
 8008720:	2309      	movs	r3, #9
 8008722:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008724:	2300      	movs	r3, #0
 8008726:	61fb      	str	r3, [r7, #28]
    while ((if_ix < USBH_MAX_NUM_INTERFACES ) && (ptr < cfg_desc->wTotalLength))
 8008728:	e052      	b.n	80087d0 <USBH_ParseCfgDesc+0x15c>
	{
	  pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 800872a:	f107 0316 	add.w	r3, r7, #22
 800872e:	4619      	mov	r1, r3
 8008730:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008732:	f000 f9ad 	bl	8008a90 <USBH_GetNextDesc>
 8008736:	62f8      	str	r0, [r7, #44]	; 0x2c
	  if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800873a:	785b      	ldrb	r3, [r3, #1]
 800873c:	2b04      	cmp	r3, #4
 800873e:	d147      	bne.n	80087d0 <USBH_ParseCfgDesc+0x15c>
	  {
		pif = &cfg_desc->Itf_Desc[if_ix];
 8008740:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008744:	2232      	movs	r2, #50	; 0x32
 8008746:	fb02 f303 	mul.w	r3, r2, r3
 800874a:	3308      	adds	r3, #8
 800874c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800874e:	4413      	add	r3, r2
 8008750:	3302      	adds	r3, #2
 8008752:	61fb      	str	r3, [r7, #28]
		USBH_ParseInterfaceDesc (pif, (uint8_t *)pdesc);
 8008754:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008756:	69f8      	ldr	r0, [r7, #28]
 8008758:	f000 f849 	bl	80087ee <USBH_ParseInterfaceDesc>

		ep_ix = 0;
 800875c:	2300      	movs	r3, #0
 800875e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		pep = (USBH_EpDescTypeDef *)0;
 8008762:	2300      	movs	r3, #0
 8008764:	61bb      	str	r3, [r7, #24]
		while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008766:	e023      	b.n	80087b0 <USBH_ParseCfgDesc+0x13c>
		{
		  pdesc = USBH_GetNextDesc((uint8_t*) pdesc, &ptr);
 8008768:	f107 0316 	add.w	r3, r7, #22
 800876c:	4619      	mov	r1, r3
 800876e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008770:	f000 f98e 	bl	8008a90 <USBH_GetNextDesc>
 8008774:	62f8      	str	r0, [r7, #44]	; 0x2c
		  if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008778:	785b      	ldrb	r3, [r3, #1]
 800877a:	2b05      	cmp	r3, #5
 800877c:	d118      	bne.n	80087b0 <USBH_ParseCfgDesc+0x13c>
		  {
			pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800877e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008782:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8008786:	3201      	adds	r2, #1
 8008788:	00d2      	lsls	r2, r2, #3
 800878a:	2132      	movs	r1, #50	; 0x32
 800878c:	fb01 f303 	mul.w	r3, r1, r3
 8008790:	4413      	add	r3, r2
 8008792:	3308      	adds	r3, #8
 8008794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008796:	4413      	add	r3, r2
 8008798:	3304      	adds	r3, #4
 800879a:	61bb      	str	r3, [r7, #24]
			USBH_ParseEPDesc (phost, pep, (uint8_t *)pdesc);
 800879c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800879e:	69b9      	ldr	r1, [r7, #24]
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	f000 f853 	bl	800884c <USBH_ParseEPDesc>
			ep_ix++;
 80087a6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80087aa:	3301      	adds	r3, #1
 80087ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	791b      	ldrb	r3, [r3, #4]
 80087b4:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d204      	bcs.n	80087c6 <USBH_ParseCfgDesc+0x152>
 80087bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087be:	885a      	ldrh	r2, [r3, #2]
 80087c0:	8afb      	ldrh	r3, [r7, #22]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d8d0      	bhi.n	8008768 <USBH_ParseCfgDesc+0xf4>
		  }
		}
		if_ix++;
 80087c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80087ca:	3301      	adds	r3, #1
 80087cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    while ((if_ix < USBH_MAX_NUM_INTERFACES ) && (ptr < cfg_desc->wTotalLength))
 80087d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80087d4:	2b09      	cmp	r3, #9
 80087d6:	d804      	bhi.n	80087e2 <USBH_ParseCfgDesc+0x16e>
 80087d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087da:	885a      	ldrh	r2, [r3, #2]
 80087dc:	8afb      	ldrh	r3, [r7, #22]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d8a3      	bhi.n	800872a <USBH_ParseCfgDesc+0xb6>
//    {
//      return USBH_NOT_SUPPORTED;
//    }
  }

  return status;
 80087e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3730      	adds	r7, #48	; 0x30
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80087ee:	b480      	push	{r7}
 80087f0:	b083      	sub	sp, #12
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
 80087f6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	781a      	ldrb	r2, [r3, #0]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	785a      	ldrb	r2, [r3, #1]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	789a      	ldrb	r2, [r3, #2]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	78da      	ldrb	r2, [r3, #3]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	791a      	ldrb	r2, [r3, #4]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	795a      	ldrb	r2, [r3, #5]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	799a      	ldrb	r2, [r3, #6]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	79da      	ldrb	r2, [r3, #7]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	7a1a      	ldrb	r2, [r3, #8]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	721a      	strb	r2, [r3, #8]
}
 8008840:	bf00      	nop
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800884c:	b480      	push	{r7}
 800884e:	b087      	sub	sp, #28
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008858:	2300      	movs	r3, #0
 800885a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	781a      	ldrb	r2, [r3, #0]
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	785a      	ldrb	r2, [r3, #1]
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	789a      	ldrb	r2, [r3, #2]
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	78da      	ldrb	r2, [r3, #3]
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	3304      	adds	r3, #4
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	b29a      	uxth	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	3305      	adds	r3, #5
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	b29b      	uxth	r3, r3
 800888c:	021b      	lsls	r3, r3, #8
 800888e:	b29b      	uxth	r3, r3
 8008890:	4313      	orrs	r3, r2
 8008892:	b29a      	uxth	r2, r3
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	799a      	ldrb	r2, [r3, #6]
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	889b      	ldrh	r3, [r3, #4]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d009      	beq.n	80088bc <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80088ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088b0:	d804      	bhi.n	80088bc <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80088b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088ba:	d901      	bls.n	80088c0 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 80088bc:	2303      	movs	r3, #3
 80088be:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088c6:	f893 381d 	ldrb.w	r3, [r3, #2077]	; 0x81d
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d136      	bne.n	800893c <USBH_ParseEPDesc+0xf0>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	78db      	ldrb	r3, [r3, #3]
 80088d2:	f003 0303 	and.w	r3, r3, #3
 80088d6:	2b02      	cmp	r3, #2
 80088d8:	d108      	bne.n	80088ec <USBH_ParseEPDesc+0xa0>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	889b      	ldrh	r3, [r3, #4]
 80088de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088e2:	f240 809b 	bls.w	8008a1c <USBH_ParseEPDesc+0x1d0>
      {
        status = USBH_NOT_SUPPORTED;
 80088e6:	2303      	movs	r3, #3
 80088e8:	75fb      	strb	r3, [r7, #23]
 80088ea:	e097      	b.n	8008a1c <USBH_ParseEPDesc+0x1d0>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	78db      	ldrb	r3, [r3, #3]
 80088f0:	f003 0303 	and.w	r3, r3, #3
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d107      	bne.n	8008908 <USBH_ParseEPDesc+0xbc>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	889b      	ldrh	r3, [r3, #4]
 80088fc:	2b40      	cmp	r3, #64	; 0x40
 80088fe:	f240 808d 	bls.w	8008a1c <USBH_ParseEPDesc+0x1d0>
      {
        status = USBH_NOT_SUPPORTED;
 8008902:	2303      	movs	r3, #3
 8008904:	75fb      	strb	r3, [r7, #23]
 8008906:	e089      	b.n	8008a1c <USBH_ParseEPDesc+0x1d0>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	78db      	ldrb	r3, [r3, #3]
 800890c:	f003 0303 	and.w	r3, r3, #3
 8008910:	2b01      	cmp	r3, #1
 8008912:	d005      	beq.n	8008920 <USBH_ParseEPDesc+0xd4>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	78db      	ldrb	r3, [r3, #3]
 8008918:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800891c:	2b03      	cmp	r3, #3
 800891e:	d10a      	bne.n	8008936 <USBH_ParseEPDesc+0xea>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	799b      	ldrb	r3, [r3, #6]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d003      	beq.n	8008930 <USBH_ParseEPDesc+0xe4>
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	799b      	ldrb	r3, [r3, #6]
 800892c:	2b10      	cmp	r3, #16
 800892e:	d974      	bls.n	8008a1a <USBH_ParseEPDesc+0x1ce>
      {
        status = USBH_NOT_SUPPORTED;
 8008930:	2303      	movs	r3, #3
 8008932:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008934:	e071      	b.n	8008a1a <USBH_ParseEPDesc+0x1ce>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008936:	2303      	movs	r3, #3
 8008938:	75fb      	strb	r3, [r7, #23]
 800893a:	e06f      	b.n	8008a1c <USBH_ParseEPDesc+0x1d0>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008942:	f893 381d 	ldrb.w	r3, [r3, #2077]	; 0x81d
 8008946:	2b01      	cmp	r3, #1
 8008948:	d13c      	bne.n	80089c4 <USBH_ParseEPDesc+0x178>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	78db      	ldrb	r3, [r3, #3]
 800894e:	f003 0303 	and.w	r3, r3, #3
 8008952:	2b02      	cmp	r3, #2
 8008954:	d005      	beq.n	8008962 <USBH_ParseEPDesc+0x116>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	78db      	ldrb	r3, [r3, #3]
 800895a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800895e:	2b00      	cmp	r3, #0
 8008960:	d106      	bne.n	8008970 <USBH_ParseEPDesc+0x124>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	889b      	ldrh	r3, [r3, #4]
 8008966:	2b40      	cmp	r3, #64	; 0x40
 8008968:	d958      	bls.n	8008a1c <USBH_ParseEPDesc+0x1d0>
      {
        status = USBH_NOT_SUPPORTED;
 800896a:	2303      	movs	r3, #3
 800896c:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800896e:	e055      	b.n	8008a1c <USBH_ParseEPDesc+0x1d0>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	78db      	ldrb	r3, [r3, #3]
 8008974:	f003 0303 	and.w	r3, r3, #3
 8008978:	2b01      	cmp	r3, #1
 800897a:	d10e      	bne.n	800899a <USBH_ParseEPDesc+0x14e>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	799b      	ldrb	r3, [r3, #6]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d007      	beq.n	8008994 <USBH_ParseEPDesc+0x148>
          (ep_descriptor->bInterval > 0x10U) ||
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008988:	2b10      	cmp	r3, #16
 800898a:	d803      	bhi.n	8008994 <USBH_ParseEPDesc+0x148>
          (ep_descriptor->wMaxPacketSize > 64U))
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008990:	2b40      	cmp	r3, #64	; 0x40
 8008992:	d943      	bls.n	8008a1c <USBH_ParseEPDesc+0x1d0>
      {
        status = USBH_NOT_SUPPORTED;
 8008994:	2303      	movs	r3, #3
 8008996:	75fb      	strb	r3, [r7, #23]
 8008998:	e040      	b.n	8008a1c <USBH_ParseEPDesc+0x1d0>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	78db      	ldrb	r3, [r3, #3]
 800899e:	f003 0303 	and.w	r3, r3, #3
 80089a2:	2b03      	cmp	r3, #3
 80089a4:	d10b      	bne.n	80089be <USBH_ParseEPDesc+0x172>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	799b      	ldrb	r3, [r3, #6]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d004      	beq.n	80089b8 <USBH_ParseEPDesc+0x16c>
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	889b      	ldrh	r3, [r3, #4]
 80089b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089b6:	d331      	bcc.n	8008a1c <USBH_ParseEPDesc+0x1d0>
      {
        status = USBH_NOT_SUPPORTED;
 80089b8:	2303      	movs	r3, #3
 80089ba:	75fb      	strb	r3, [r7, #23]
 80089bc:	e02e      	b.n	8008a1c <USBH_ParseEPDesc+0x1d0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80089be:	2303      	movs	r3, #3
 80089c0:	75fb      	strb	r3, [r7, #23]
 80089c2:	e02b      	b.n	8008a1c <USBH_ParseEPDesc+0x1d0>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089ca:	f893 381d 	ldrb.w	r3, [r3, #2077]	; 0x81d
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d120      	bne.n	8008a14 <USBH_ParseEPDesc+0x1c8>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	78db      	ldrb	r3, [r3, #3]
 80089d6:	f003 0303 	and.w	r3, r3, #3
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d106      	bne.n	80089ec <USBH_ParseEPDesc+0x1a0>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	889b      	ldrh	r3, [r3, #4]
 80089e2:	2b08      	cmp	r3, #8
 80089e4:	d01a      	beq.n	8008a1c <USBH_ParseEPDesc+0x1d0>
      {
        status = USBH_NOT_SUPPORTED;
 80089e6:	2303      	movs	r3, #3
 80089e8:	75fb      	strb	r3, [r7, #23]
 80089ea:	e017      	b.n	8008a1c <USBH_ParseEPDesc+0x1d0>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	78db      	ldrb	r3, [r3, #3]
 80089f0:	f003 0303 	and.w	r3, r3, #3
 80089f4:	2b03      	cmp	r3, #3
 80089f6:	d10a      	bne.n	8008a0e <USBH_ParseEPDesc+0x1c2>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	799b      	ldrb	r3, [r3, #6]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d003      	beq.n	8008a08 <USBH_ParseEPDesc+0x1bc>
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	889b      	ldrh	r3, [r3, #4]
 8008a04:	2b08      	cmp	r3, #8
 8008a06:	d909      	bls.n	8008a1c <USBH_ParseEPDesc+0x1d0>
      {
        status = USBH_NOT_SUPPORTED;
 8008a08:	2303      	movs	r3, #3
 8008a0a:	75fb      	strb	r3, [r7, #23]
 8008a0c:	e006      	b.n	8008a1c <USBH_ParseEPDesc+0x1d0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008a0e:	2303      	movs	r3, #3
 8008a10:	75fb      	strb	r3, [r7, #23]
 8008a12:	e003      	b.n	8008a1c <USBH_ParseEPDesc+0x1d0>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008a14:	2303      	movs	r3, #3
 8008a16:	75fb      	strb	r3, [r7, #23]
 8008a18:	e000      	b.n	8008a1c <USBH_ParseEPDesc+0x1d0>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008a1a:	bf00      	nop
  }

  return status;
 8008a1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	371c      	adds	r7, #28
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr

08008a2a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008a2a:	b480      	push	{r7}
 8008a2c:	b087      	sub	sp, #28
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	60f8      	str	r0, [r7, #12]
 8008a32:	60b9      	str	r1, [r7, #8]
 8008a34:	4613      	mov	r3, r2
 8008a36:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	2b03      	cmp	r3, #3
 8008a40:	d120      	bne.n	8008a84 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	1e9a      	subs	r2, r3, #2
 8008a48:	88fb      	ldrh	r3, [r7, #6]
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	bf28      	it	cs
 8008a4e:	4613      	movcs	r3, r2
 8008a50:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	3302      	adds	r3, #2
 8008a56:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008a58:	2300      	movs	r3, #0
 8008a5a:	82fb      	strh	r3, [r7, #22]
 8008a5c:	e00b      	b.n	8008a76 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008a5e:	8afb      	ldrh	r3, [r7, #22]
 8008a60:	68fa      	ldr	r2, [r7, #12]
 8008a62:	4413      	add	r3, r2
 8008a64:	781a      	ldrb	r2, [r3, #0]
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008a70:	8afb      	ldrh	r3, [r7, #22]
 8008a72:	3302      	adds	r3, #2
 8008a74:	82fb      	strh	r3, [r7, #22]
 8008a76:	8afa      	ldrh	r2, [r7, #22]
 8008a78:	8abb      	ldrh	r3, [r7, #20]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d3ef      	bcc.n	8008a5e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	2200      	movs	r2, #0
 8008a82:	701a      	strb	r2, [r3, #0]
  }
}
 8008a84:	bf00      	nop
 8008a86:	371c      	adds	r7, #28
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b085      	sub	sp, #20
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	881a      	ldrh	r2, [r3, #0]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	4413      	add	r3, r2
 8008aa6:	b29a      	uxth	r2, r3
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3714      	adds	r7, #20
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr

08008ac6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b086      	sub	sp, #24
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	60f8      	str	r0, [r7, #12]
 8008ace:	60b9      	str	r1, [r7, #8]
 8008ad0:	4613      	mov	r3, r2
 8008ad2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	789b      	ldrb	r3, [r3, #2]
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d002      	beq.n	8008ae6 <USBH_CtlReq+0x20>
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	d00f      	beq.n	8008b04 <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 8008ae4:	e027      	b.n	8008b36 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	68ba      	ldr	r2, [r7, #8]
 8008aea:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	88fa      	ldrh	r2, [r7, #6]
 8008af0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2201      	movs	r2, #1
 8008af6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2202      	movs	r2, #2
 8008afc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008afe:	2301      	movs	r3, #1
 8008b00:	75fb      	strb	r3, [r7, #23]
      break;
 8008b02:	e018      	b.n	8008b36 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008b04:	68f8      	ldr	r0, [r7, #12]
 8008b06:	f000 f81b 	bl	8008b40 <USBH_HandleControl>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008b0e:	7dfb      	ldrb	r3, [r7, #23]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d002      	beq.n	8008b1a <USBH_CtlReq+0x54>
 8008b14:	7dfb      	ldrb	r3, [r7, #23]
 8008b16:	2b03      	cmp	r3, #3
 8008b18:	d106      	bne.n	8008b28 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2200      	movs	r2, #0
 8008b24:	761a      	strb	r2, [r3, #24]
      break;
 8008b26:	e005      	b.n	8008b34 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008b28:	7dfb      	ldrb	r3, [r7, #23]
 8008b2a:	2b02      	cmp	r3, #2
 8008b2c:	d102      	bne.n	8008b34 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2201      	movs	r2, #1
 8008b32:	709a      	strb	r2, [r3, #2]
      break;
 8008b34:	bf00      	nop
  }
  return status;
 8008b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3718      	adds	r7, #24
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b086      	sub	sp, #24
 8008b44:	af02      	add	r7, sp, #8
 8008b46:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	7e1b      	ldrb	r3, [r3, #24]
 8008b54:	3b01      	subs	r3, #1
 8008b56:	2b0a      	cmp	r3, #10
 8008b58:	f200 816a 	bhi.w	8008e30 <USBH_HandleControl+0x2f0>
 8008b5c:	a201      	add	r2, pc, #4	; (adr r2, 8008b64 <USBH_HandleControl+0x24>)
 8008b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b62:	bf00      	nop
 8008b64:	08008b91 	.word	0x08008b91
 8008b68:	08008bab 	.word	0x08008bab
 8008b6c:	08008c15 	.word	0x08008c15
 8008b70:	08008c3f 	.word	0x08008c3f
 8008b74:	08008c79 	.word	0x08008c79
 8008b78:	08008ca7 	.word	0x08008ca7
 8008b7c:	08008cf9 	.word	0x08008cf9
 8008b80:	08008d1f 	.word	0x08008d1f
 8008b84:	08008d5b 	.word	0x08008d5b
 8008b88:	08008d85 	.word	0x08008d85
 8008b8c:	08008dc3 	.word	0x08008dc3
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f103 0110 	add.w	r1, r3, #16
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	795b      	ldrb	r3, [r3, #5]
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 f95b 	bl	8008e58 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2202      	movs	r2, #2
 8008ba6:	761a      	strb	r2, [r3, #24]
      break;
 8008ba8:	e14d      	b.n	8008e46 <USBH_HandleControl+0x306>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	795b      	ldrb	r3, [r3, #5]
 8008bae:	4619      	mov	r1, r3
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 fd91 	bl	80096d8 <USBH_LL_GetURBState>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008bba:	7bbb      	ldrb	r3, [r7, #14]
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d11e      	bne.n	8008bfe <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	7c1b      	ldrb	r3, [r3, #16]
 8008bc4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008bc8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	8adb      	ldrh	r3, [r3, #22]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d00a      	beq.n	8008be8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008bd2:	7b7b      	ldrb	r3, [r7, #13]
 8008bd4:	2b80      	cmp	r3, #128	; 0x80
 8008bd6:	d103      	bne.n	8008be0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2203      	movs	r2, #3
 8008bdc:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008bde:	e129      	b.n	8008e34 <USBH_HandleControl+0x2f4>
            phost->Control.state = CTRL_DATA_OUT;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2205      	movs	r2, #5
 8008be4:	761a      	strb	r2, [r3, #24]
      break;
 8008be6:	e125      	b.n	8008e34 <USBH_HandleControl+0x2f4>
          if (direction == USB_D2H)
 8008be8:	7b7b      	ldrb	r3, [r7, #13]
 8008bea:	2b80      	cmp	r3, #128	; 0x80
 8008bec:	d103      	bne.n	8008bf6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2209      	movs	r2, #9
 8008bf2:	761a      	strb	r2, [r3, #24]
      break;
 8008bf4:	e11e      	b.n	8008e34 <USBH_HandleControl+0x2f4>
            phost->Control.state = CTRL_STATUS_IN;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2207      	movs	r2, #7
 8008bfa:	761a      	strb	r2, [r3, #24]
      break;
 8008bfc:	e11a      	b.n	8008e34 <USBH_HandleControl+0x2f4>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008bfe:	7bbb      	ldrb	r3, [r7, #14]
 8008c00:	2b04      	cmp	r3, #4
 8008c02:	d003      	beq.n	8008c0c <USBH_HandleControl+0xcc>
 8008c04:	7bbb      	ldrb	r3, [r7, #14]
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	f040 8114 	bne.w	8008e34 <USBH_HandleControl+0x2f4>
          phost->Control.state = CTRL_ERROR;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	220b      	movs	r2, #11
 8008c10:	761a      	strb	r2, [r3, #24]
      break;
 8008c12:	e10f      	b.n	8008e34 <USBH_HandleControl+0x2f4>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c1a:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 8008c1e:	b29a      	uxth	r2, r3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6899      	ldr	r1, [r3, #8]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	899a      	ldrh	r2, [r3, #12]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	791b      	ldrb	r3, [r3, #4]
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 f952 	bl	8008eda <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2204      	movs	r2, #4
 8008c3a:	761a      	strb	r2, [r3, #24]
      break;
 8008c3c:	e103      	b.n	8008e46 <USBH_HandleControl+0x306>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	791b      	ldrb	r3, [r3, #4]
 8008c42:	4619      	mov	r1, r3
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 fd47 	bl	80096d8 <USBH_LL_GetURBState>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008c4e:	7bbb      	ldrb	r3, [r7, #14]
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d103      	bne.n	8008c5c <USBH_HandleControl+0x11c>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2209      	movs	r2, #9
 8008c58:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008c5a:	e0ed      	b.n	8008e38 <USBH_HandleControl+0x2f8>
      else if (URB_Status == USBH_URB_STALL)
 8008c5c:	7bbb      	ldrb	r3, [r7, #14]
 8008c5e:	2b05      	cmp	r3, #5
 8008c60:	d102      	bne.n	8008c68 <USBH_HandleControl+0x128>
        status = USBH_NOT_SUPPORTED;
 8008c62:	2303      	movs	r3, #3
 8008c64:	73fb      	strb	r3, [r7, #15]
      break;
 8008c66:	e0e7      	b.n	8008e38 <USBH_HandleControl+0x2f8>
        if (URB_Status == USBH_URB_ERROR)
 8008c68:	7bbb      	ldrb	r3, [r7, #14]
 8008c6a:	2b04      	cmp	r3, #4
 8008c6c:	f040 80e4 	bne.w	8008e38 <USBH_HandleControl+0x2f8>
          phost->Control.state = CTRL_ERROR;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	220b      	movs	r2, #11
 8008c74:	761a      	strb	r2, [r3, #24]
      break;
 8008c76:	e0df      	b.n	8008e38 <USBH_HandleControl+0x2f8>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6899      	ldr	r1, [r3, #8]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	899a      	ldrh	r2, [r3, #12]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	795b      	ldrb	r3, [r3, #5]
 8008c84:	2001      	movs	r0, #1
 8008c86:	9000      	str	r0, [sp, #0]
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 f8ff 	bl	8008e8c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c94:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 8008c98:	b29a      	uxth	r2, r3
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2206      	movs	r2, #6
 8008ca2:	761a      	strb	r2, [r3, #24]
      break;
 8008ca4:	e0cf      	b.n	8008e46 <USBH_HandleControl+0x306>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	795b      	ldrb	r3, [r3, #5]
 8008caa:	4619      	mov	r1, r3
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 fd13 	bl	80096d8 <USBH_LL_GetURBState>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008cb6:	7bbb      	ldrb	r3, [r7, #14]
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d103      	bne.n	8008cc4 <USBH_HandleControl+0x184>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2207      	movs	r2, #7
 8008cc0:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008cc2:	e0bb      	b.n	8008e3c <USBH_HandleControl+0x2fc>
      else if (URB_Status == USBH_URB_STALL)
 8008cc4:	7bbb      	ldrb	r3, [r7, #14]
 8008cc6:	2b05      	cmp	r3, #5
 8008cc8:	d105      	bne.n	8008cd6 <USBH_HandleControl+0x196>
        phost->Control.state = CTRL_STALLED;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	220c      	movs	r2, #12
 8008cce:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008cd0:	2303      	movs	r3, #3
 8008cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8008cd4:	e0b2      	b.n	8008e3c <USBH_HandleControl+0x2fc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008cd6:	7bbb      	ldrb	r3, [r7, #14]
 8008cd8:	2b02      	cmp	r3, #2
 8008cda:	d103      	bne.n	8008ce4 <USBH_HandleControl+0x1a4>
        phost->Control.state = CTRL_DATA_OUT;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2205      	movs	r2, #5
 8008ce0:	761a      	strb	r2, [r3, #24]
      break;
 8008ce2:	e0ab      	b.n	8008e3c <USBH_HandleControl+0x2fc>
        if (URB_Status == USBH_URB_ERROR)
 8008ce4:	7bbb      	ldrb	r3, [r7, #14]
 8008ce6:	2b04      	cmp	r3, #4
 8008ce8:	f040 80a8 	bne.w	8008e3c <USBH_HandleControl+0x2fc>
          phost->Control.state = CTRL_ERROR;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	220b      	movs	r2, #11
 8008cf0:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008cf2:	2302      	movs	r3, #2
 8008cf4:	73fb      	strb	r3, [r7, #15]
      break;
 8008cf6:	e0a1      	b.n	8008e3c <USBH_HandleControl+0x2fc>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	791b      	ldrb	r3, [r3, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	2100      	movs	r1, #0
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 f8ea 	bl	8008eda <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d0c:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 8008d10:	b29a      	uxth	r2, r3
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2208      	movs	r2, #8
 8008d1a:	761a      	strb	r2, [r3, #24]

      break;
 8008d1c:	e093      	b.n	8008e46 <USBH_HandleControl+0x306>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	791b      	ldrb	r3, [r3, #4]
 8008d22:	4619      	mov	r1, r3
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 fcd7 	bl	80096d8 <USBH_LL_GetURBState>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008d2e:	7bbb      	ldrb	r3, [r7, #14]
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d105      	bne.n	8008d40 <USBH_HandleControl+0x200>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	220d      	movs	r2, #13
 8008d38:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008d3e:	e07f      	b.n	8008e40 <USBH_HandleControl+0x300>
      else if (URB_Status == USBH_URB_ERROR)
 8008d40:	7bbb      	ldrb	r3, [r7, #14]
 8008d42:	2b04      	cmp	r3, #4
 8008d44:	d103      	bne.n	8008d4e <USBH_HandleControl+0x20e>
        phost->Control.state = CTRL_ERROR;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	220b      	movs	r2, #11
 8008d4a:	761a      	strb	r2, [r3, #24]
      break;
 8008d4c:	e078      	b.n	8008e40 <USBH_HandleControl+0x300>
        if (URB_Status == USBH_URB_STALL)
 8008d4e:	7bbb      	ldrb	r3, [r7, #14]
 8008d50:	2b05      	cmp	r3, #5
 8008d52:	d175      	bne.n	8008e40 <USBH_HandleControl+0x300>
          status = USBH_NOT_SUPPORTED;
 8008d54:	2303      	movs	r3, #3
 8008d56:	73fb      	strb	r3, [r7, #15]
      break;
 8008d58:	e072      	b.n	8008e40 <USBH_HandleControl+0x300>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	795b      	ldrb	r3, [r3, #5]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	9200      	str	r2, [sp, #0]
 8008d62:	2200      	movs	r2, #0
 8008d64:	2100      	movs	r1, #0
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 f890 	bl	8008e8c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d72:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 8008d76:	b29a      	uxth	r2, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	220a      	movs	r2, #10
 8008d80:	761a      	strb	r2, [r3, #24]
      break;
 8008d82:	e060      	b.n	8008e46 <USBH_HandleControl+0x306>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	795b      	ldrb	r3, [r3, #5]
 8008d88:	4619      	mov	r1, r3
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 fca4 	bl	80096d8 <USBH_LL_GetURBState>
 8008d90:	4603      	mov	r3, r0
 8008d92:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008d94:	7bbb      	ldrb	r3, [r7, #14]
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d105      	bne.n	8008da6 <USBH_HandleControl+0x266>
      {
        status = USBH_OK;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	220d      	movs	r2, #13
 8008da2:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008da4:	e04e      	b.n	8008e44 <USBH_HandleControl+0x304>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008da6:	7bbb      	ldrb	r3, [r7, #14]
 8008da8:	2b02      	cmp	r3, #2
 8008daa:	d103      	bne.n	8008db4 <USBH_HandleControl+0x274>
        phost->Control.state = CTRL_STATUS_OUT;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2209      	movs	r2, #9
 8008db0:	761a      	strb	r2, [r3, #24]
      break;
 8008db2:	e047      	b.n	8008e44 <USBH_HandleControl+0x304>
        if (URB_Status == USBH_URB_ERROR)
 8008db4:	7bbb      	ldrb	r3, [r7, #14]
 8008db6:	2b04      	cmp	r3, #4
 8008db8:	d144      	bne.n	8008e44 <USBH_HandleControl+0x304>
          phost->Control.state = CTRL_ERROR;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	220b      	movs	r2, #11
 8008dbe:	761a      	strb	r2, [r3, #24]
      break;
 8008dc0:	e040      	b.n	8008e44 <USBH_HandleControl+0x304>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	7e5b      	ldrb	r3, [r3, #25]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	b2da      	uxtb	r2, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	765a      	strb	r2, [r3, #25]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	7e5b      	ldrb	r3, [r3, #25]
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d806      	bhi.n	8008de4 <USBH_HandleControl+0x2a4>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2201      	movs	r2, #1
 8008de0:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008de2:	e030      	b.n	8008e46 <USBH_HandleControl+0x306>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dea:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008dee:	2106      	movs	r1, #6
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 8008dfa:	4815      	ldr	r0, [pc, #84]	; (8008e50 <USBH_HandleControl+0x310>)
 8008dfc:	f000 fe7a 	bl	8009af4 <iprintf>
 8008e00:	4814      	ldr	r0, [pc, #80]	; (8008e54 <USBH_HandleControl+0x314>)
 8008e02:	f000 fe77 	bl	8009af4 <iprintf>
 8008e06:	200a      	movs	r0, #10
 8008e08:	f000 fe86 	bl	8009b18 <putchar>
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	795b      	ldrb	r3, [r3, #5]
 8008e10:	4619      	mov	r1, r3
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 f8ea 	bl	8008fec <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	791b      	ldrb	r3, [r3, #4]
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 f8e4 	bl	8008fec <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008e2a:	2302      	movs	r3, #2
 8008e2c:	73fb      	strb	r3, [r7, #15]
      break;
 8008e2e:	e00a      	b.n	8008e46 <USBH_HandleControl+0x306>

    default:
      break;
 8008e30:	bf00      	nop
 8008e32:	e008      	b.n	8008e46 <USBH_HandleControl+0x306>
      break;
 8008e34:	bf00      	nop
 8008e36:	e006      	b.n	8008e46 <USBH_HandleControl+0x306>
      break;
 8008e38:	bf00      	nop
 8008e3a:	e004      	b.n	8008e46 <USBH_HandleControl+0x306>
      break;
 8008e3c:	bf00      	nop
 8008e3e:	e002      	b.n	8008e46 <USBH_HandleControl+0x306>
      break;
 8008e40:	bf00      	nop
 8008e42:	e000      	b.n	8008e46 <USBH_HandleControl+0x306>
      break;
 8008e44:	bf00      	nop
  }

  return status;
 8008e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3710      	adds	r7, #16
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	0800ad20 	.word	0x0800ad20
 8008e54:	0800adfc 	.word	0x0800adfc

08008e58 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b088      	sub	sp, #32
 8008e5c:	af04      	add	r7, sp, #16
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	4613      	mov	r3, r2
 8008e64:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008e66:	79f9      	ldrb	r1, [r7, #7]
 8008e68:	2300      	movs	r3, #0
 8008e6a:	9303      	str	r3, [sp, #12]
 8008e6c:	2308      	movs	r3, #8
 8008e6e:	9302      	str	r3, [sp, #8]
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	9301      	str	r3, [sp, #4]
 8008e74:	2300      	movs	r3, #0
 8008e76:	9300      	str	r3, [sp, #0]
 8008e78:	2300      	movs	r3, #0
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f000 fbf8 	bl	8009672 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008e82:	2300      	movs	r3, #0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b088      	sub	sp, #32
 8008e90:	af04      	add	r7, sp, #16
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	4611      	mov	r1, r2
 8008e98:	461a      	mov	r2, r3
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	80fb      	strh	r3, [r7, #6]
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ea8:	f893 381d 	ldrb.w	r3, [r3, #2077]	; 0x81d
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d001      	beq.n	8008eb4 <USBH_CtlSendData+0x28>
  {
    do_ping = 0U;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008eb4:	7979      	ldrb	r1, [r7, #5]
 8008eb6:	7e3b      	ldrb	r3, [r7, #24]
 8008eb8:	9303      	str	r3, [sp, #12]
 8008eba:	88fb      	ldrh	r3, [r7, #6]
 8008ebc:	9302      	str	r3, [sp, #8]
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	9301      	str	r3, [sp, #4]
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	9300      	str	r3, [sp, #0]
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	2200      	movs	r2, #0
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	f000 fbd1 	bl	8009672 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b088      	sub	sp, #32
 8008ede:	af04      	add	r7, sp, #16
 8008ee0:	60f8      	str	r0, [r7, #12]
 8008ee2:	60b9      	str	r1, [r7, #8]
 8008ee4:	4611      	mov	r1, r2
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	460b      	mov	r3, r1
 8008eea:	80fb      	strh	r3, [r7, #6]
 8008eec:	4613      	mov	r3, r2
 8008eee:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ef0:	7979      	ldrb	r1, [r7, #5]
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	9303      	str	r3, [sp, #12]
 8008ef6:	88fb      	ldrh	r3, [r7, #6]
 8008ef8:	9302      	str	r3, [sp, #8]
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	9301      	str	r3, [sp, #4]
 8008efe:	2301      	movs	r3, #1
 8008f00:	9300      	str	r3, [sp, #0]
 8008f02:	2300      	movs	r3, #0
 8008f04:	2201      	movs	r2, #1
 8008f06:	68f8      	ldr	r0, [r7, #12]
 8008f08:	f000 fbb3 	bl	8009672 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008f0c:	2300      	movs	r3, #0

}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3710      	adds	r7, #16
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}

08008f16 <USBH_IsocReceiveData>:
  */
USBH_StatusTypeDef USBH_IsocReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint32_t length,
                                        uint8_t pipe_num)
{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b088      	sub	sp, #32
 8008f1a:	af04      	add	r7, sp, #16
 8008f1c:	60f8      	str	r0, [r7, #12]
 8008f1e:	60b9      	str	r1, [r7, #8]
 8008f20:	607a      	str	r2, [r7, #4]
 8008f22:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	78f9      	ldrb	r1, [r7, #3]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	9203      	str	r2, [sp, #12]
 8008f2e:	9302      	str	r3, [sp, #8]
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	9301      	str	r3, [sp, #4]
 8008f34:	2301      	movs	r3, #1
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	2301      	movs	r3, #1
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	68f8      	ldr	r0, [r7, #12]
 8008f3e:	f000 fb98 	bl	8009672 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);


  return USBH_OK;
 8008f42:	2300      	movs	r3, #0
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3710      	adds	r7, #16
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b086      	sub	sp, #24
 8008f50:	af04      	add	r7, sp, #16
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	4608      	mov	r0, r1
 8008f56:	4611      	mov	r1, r2
 8008f58:	461a      	mov	r2, r3
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	70fb      	strb	r3, [r7, #3]
 8008f5e:	460b      	mov	r3, r1
 8008f60:	70bb      	strb	r3, [r7, #2]
 8008f62:	4613      	mov	r3, r2
 8008f64:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008f66:	7878      	ldrb	r0, [r7, #1]
 8008f68:	78ba      	ldrb	r2, [r7, #2]
 8008f6a:	78f9      	ldrb	r1, [r7, #3]
 8008f6c:	8b3b      	ldrh	r3, [r7, #24]
 8008f6e:	9302      	str	r3, [sp, #8]
 8008f70:	7d3b      	ldrb	r3, [r7, #20]
 8008f72:	9301      	str	r3, [sp, #4]
 8008f74:	7c3b      	ldrb	r3, [r7, #16]
 8008f76:	9300      	str	r3, [sp, #0]
 8008f78:	4603      	mov	r3, r0
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fb27 	bl	80095ce <USBH_LL_OpenPipe>

  return USBH_OK;
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3708      	adds	r7, #8
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b082      	sub	sp, #8
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
 8008f92:	460b      	mov	r3, r1
 8008f94:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008f96:	78fb      	ldrb	r3, [r7, #3]
 8008f98:	4619      	mov	r1, r3
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 fb48 	bl	8009630 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3708      	adds	r7, #8
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b084      	sub	sp, #16
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 f836 	bl	8009028 <USBH_GetFreePipe>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008fc0:	89fb      	ldrh	r3, [r7, #14]
 8008fc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d00a      	beq.n	8008fe0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008fca:	78fb      	ldrb	r3, [r7, #3]
 8008fcc:	89fa      	ldrh	r2, [r7, #14]
 8008fce:	f002 020f 	and.w	r2, r2, #15
 8008fd2:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f202 6296 	addw	r2, r2, #1686	; 0x696
 8008fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)pipe;
 8008fe0:	89fb      	ldrh	r3, [r7, #14]
 8008fe2:	b2db      	uxtb	r3, r3
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3710      	adds	r7, #16
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008ff8:	78fb      	ldrb	r3, [r7, #3]
 8008ffa:	2b0f      	cmp	r3, #15
 8008ffc:	d80d      	bhi.n	800901a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008ffe:	78fa      	ldrb	r2, [r7, #3]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f202 6296 	addw	r2, r2, #1686	; 0x696
 8009006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800900a:	78fa      	ldrb	r2, [r7, #3]
 800900c:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f202 6296 	addw	r2, r2, #1686	; 0x696
 8009016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return USBH_OK;
 800901a:	2300      	movs	r3, #0
}
 800901c:	4618      	mov	r0, r3
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009028:	b480      	push	{r7}
 800902a:	b085      	sub	sp, #20
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009030:	2300      	movs	r3, #0
 8009032:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009034:	2300      	movs	r3, #0
 8009036:	73fb      	strb	r3, [r7, #15]
 8009038:	e00f      	b.n	800905a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800903a:	7bfa      	ldrb	r2, [r7, #15]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f202 6296 	addw	r2, r2, #1686	; 0x696
 8009042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009046:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800904a:	2b00      	cmp	r3, #0
 800904c:	d102      	bne.n	8009054 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800904e:	7bfb      	ldrb	r3, [r7, #15]
 8009050:	b29b      	uxth	r3, r3
 8009052:	e007      	b.n	8009064 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009054:	7bfb      	ldrb	r3, [r7, #15]
 8009056:	3301      	adds	r3, #1
 8009058:	73fb      	strb	r3, [r7, #15]
 800905a:	7bfb      	ldrb	r3, [r7, #15]
 800905c:	2b0f      	cmp	r3, #15
 800905e:	d9ec      	bls.n	800903a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009060:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009064:	4618      	mov	r0, r3
 8009066:	3714      	adds	r7, #20
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <USB_HOST_fast_class_call>:
/*
 * -- Insert your variables declaration here --
 */
/* USER CODE BEGIN 0 */
void USB_HOST_fast_class_call(void)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	af00      	add	r7, sp, #0
  if (hUsbHostHS.gState == HOST_CLASS)
 8009074:	4b04      	ldr	r3, [pc, #16]	; (8009088 <USB_HOST_fast_class_call+0x18>)
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	b2db      	uxtb	r3, r3
 800907a:	2b0b      	cmp	r3, #11
 800907c:	d102      	bne.n	8009084 <USB_HOST_fast_class_call+0x14>
  {
    USBH_VIDEO_Process(&hUsbHostHS);
 800907e:	4802      	ldr	r0, [pc, #8]	; (8009088 <USB_HOST_fast_class_call+0x18>)
 8009080:	f7fd fa98 	bl	80065b4 <USBH_VIDEO_Process>
  }
}
 8009084:	bf00      	nop
 8009086:	bd80      	pop	{r7, pc}
 8009088:	2001c560 	.word	0x2001c560

0800908c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8009090:	2200      	movs	r2, #0
 8009092:	490b      	ldr	r1, [pc, #44]	; (80090c0 <MX_USB_HOST_Init+0x34>)
 8009094:	480b      	ldr	r0, [pc, #44]	; (80090c4 <MX_USB_HOST_Init+0x38>)
 8009096:	f7fe f88b 	bl	80071b0 <USBH_Init>
 800909a:	4603      	mov	r3, r0
 800909c:	2b00      	cmp	r3, #0
 800909e:	d001      	beq.n	80090a4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80090a0:	f7f7 fb98 	bl	80007d4 <Error_Handler>
//  /* USER CODE BEGIN Register_UVC */
//  if (USBH_RegisterClass(&hUsbHostHS, USBH_UVC_CLASS) != USBH_OK)
//  {
//    Error_Handler();
//  }
  USBH_RegisterClass(&hUsbHostHS, USBH_VIDEO_CLASS);
 80090a4:	4908      	ldr	r1, [pc, #32]	; (80090c8 <MX_USB_HOST_Init+0x3c>)
 80090a6:	4807      	ldr	r0, [pc, #28]	; (80090c4 <MX_USB_HOST_Init+0x38>)
 80090a8:	f7fe f95e 	bl	8007368 <USBH_RegisterClass>
  /* USER CODE END Register_UVC */
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 80090ac:	4805      	ldr	r0, [pc, #20]	; (80090c4 <MX_USB_HOST_Init+0x38>)
 80090ae:	f7fe fa1e 	bl	80074ee <USBH_Start>
 80090b2:	4603      	mov	r3, r0
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d001      	beq.n	80090bc <MX_USB_HOST_Init+0x30>
  {
    Error_Handler();
 80090b8:	f7f7 fb8c 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80090bc:	bf00      	nop
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	080090e1 	.word	0x080090e1
 80090c4:	2001c560 	.word	0x2001c560
 80090c8:	2000000c 	.word	0x2000000c

080090cc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 80090d0:	4802      	ldr	r0, [pc, #8]	; (80090dc <MX_USB_HOST_Process+0x10>)
 80090d2:	f7fe fa1d 	bl	8007510 <USBH_Process>
}
 80090d6:	bf00      	nop
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	2001c560 	.word	0x2001c560

080090e0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	460b      	mov	r3, r1
 80090ea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80090ec:	78fb      	ldrb	r3, [r7, #3]
 80090ee:	3b01      	subs	r3, #1
 80090f0:	2b04      	cmp	r3, #4
 80090f2:	d830      	bhi.n	8009156 <USBH_UserProcess+0x76>
 80090f4:	a201      	add	r2, pc, #4	; (adr r2, 80090fc <USBH_UserProcess+0x1c>)
 80090f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090fa:	bf00      	nop
 80090fc:	08009157 	.word	0x08009157
 8009100:	08009147 	.word	0x08009147
 8009104:	08009111 	.word	0x08009111
 8009108:	0800914f 	.word	0x0800914f
 800910c:	0800913f 	.word	0x0800913f
  {
  case HOST_USER_CLASS_SELECTED:
      USBH_StatusTypeDef status;
      status = USBH_VS_SetCur(phost, VS_PROBE_CONTROL << 8);
 8009110:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f7fd fad9 	bl	80066cc <USBH_VS_SetCur>
 800911a:	4603      	mov	r3, r0
 800911c:	73fb      	strb	r3, [r7, #15]
      status = USBH_VS_GetCur(phost, VS_PROBE_CONTROL << 8);
 800911e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f7fd fb24 	bl	8006770 <USBH_VS_GetCur>
 8009128:	4603      	mov	r3, r0
 800912a:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 800912c:	7bfb      	ldrb	r3, [r7, #15]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d113      	bne.n	800915a <USBH_UserProcess+0x7a>
      {
        USBH_VS_SetCur(phost, VS_COMMIT_CONTROL << 8);
 8009132:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f7fd fac8 	bl	80066cc <USBH_VS_SetCur>
        //USBH_VS_GetCur(phost, VS_COMMIT_CONTROL << 8);
      }
    break;
 800913c:	e00d      	b.n	800915a <USBH_UserProcess+0x7a>
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800913e:	4b09      	ldr	r3, [pc, #36]	; (8009164 <USBH_UserProcess+0x84>)
 8009140:	2203      	movs	r2, #3
 8009142:	701a      	strb	r2, [r3, #0]
  break;
 8009144:	e00a      	b.n	800915c <USBH_UserProcess+0x7c>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009146:	4b07      	ldr	r3, [pc, #28]	; (8009164 <USBH_UserProcess+0x84>)
 8009148:	2202      	movs	r2, #2
 800914a:	701a      	strb	r2, [r3, #0]
  break;
 800914c:	e006      	b.n	800915c <USBH_UserProcess+0x7c>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800914e:	4b05      	ldr	r3, [pc, #20]	; (8009164 <USBH_UserProcess+0x84>)
 8009150:	2201      	movs	r2, #1
 8009152:	701a      	strb	r2, [r3, #0]
  break;
 8009154:	e002      	b.n	800915c <USBH_UserProcess+0x7c>

  default:
  break;
 8009156:	bf00      	nop
 8009158:	e000      	b.n	800915c <USBH_UserProcess+0x7c>
    break;
 800915a:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800915c:	bf00      	nop
 800915e:	3710      	adds	r7, #16
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}
 8009164:	2001e00c 	.word	0x2001e00c

08009168 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b08e      	sub	sp, #56	; 0x38
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009174:	2200      	movs	r2, #0
 8009176:	601a      	str	r2, [r3, #0]
 8009178:	605a      	str	r2, [r3, #4]
 800917a:	609a      	str	r2, [r3, #8]
 800917c:	60da      	str	r2, [r3, #12]
 800917e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a71      	ldr	r2, [pc, #452]	; (800934c <HAL_HCD_MspInit+0x1e4>)
 8009186:	4293      	cmp	r3, r2
 8009188:	f040 80dc 	bne.w	8009344 <HAL_HCD_MspInit+0x1dc>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800918c:	2300      	movs	r3, #0
 800918e:	623b      	str	r3, [r7, #32]
 8009190:	4b6f      	ldr	r3, [pc, #444]	; (8009350 <HAL_HCD_MspInit+0x1e8>)
 8009192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009194:	4a6e      	ldr	r2, [pc, #440]	; (8009350 <HAL_HCD_MspInit+0x1e8>)
 8009196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800919a:	6313      	str	r3, [r2, #48]	; 0x30
 800919c:	4b6c      	ldr	r3, [pc, #432]	; (8009350 <HAL_HCD_MspInit+0x1e8>)
 800919e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091a4:	623b      	str	r3, [r7, #32]
 80091a6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80091a8:	2300      	movs	r3, #0
 80091aa:	61fb      	str	r3, [r7, #28]
 80091ac:	4b68      	ldr	r3, [pc, #416]	; (8009350 <HAL_HCD_MspInit+0x1e8>)
 80091ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b0:	4a67      	ldr	r2, [pc, #412]	; (8009350 <HAL_HCD_MspInit+0x1e8>)
 80091b2:	f043 0304 	orr.w	r3, r3, #4
 80091b6:	6313      	str	r3, [r2, #48]	; 0x30
 80091b8:	4b65      	ldr	r3, [pc, #404]	; (8009350 <HAL_HCD_MspInit+0x1e8>)
 80091ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091bc:	f003 0304 	and.w	r3, r3, #4
 80091c0:	61fb      	str	r3, [r7, #28]
 80091c2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80091c4:	2300      	movs	r3, #0
 80091c6:	61bb      	str	r3, [r7, #24]
 80091c8:	4b61      	ldr	r3, [pc, #388]	; (8009350 <HAL_HCD_MspInit+0x1e8>)
 80091ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091cc:	4a60      	ldr	r2, [pc, #384]	; (8009350 <HAL_HCD_MspInit+0x1e8>)
 80091ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091d2:	6313      	str	r3, [r2, #48]	; 0x30
 80091d4:	4b5e      	ldr	r3, [pc, #376]	; (8009350 <HAL_HCD_MspInit+0x1e8>)
 80091d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091dc:	61bb      	str	r3, [r7, #24]
 80091de:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80091e0:	2300      	movs	r3, #0
 80091e2:	617b      	str	r3, [r7, #20]
 80091e4:	4b5a      	ldr	r3, [pc, #360]	; (8009350 <HAL_HCD_MspInit+0x1e8>)
 80091e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e8:	4a59      	ldr	r2, [pc, #356]	; (8009350 <HAL_HCD_MspInit+0x1e8>)
 80091ea:	f043 0301 	orr.w	r3, r3, #1
 80091ee:	6313      	str	r3, [r2, #48]	; 0x30
 80091f0:	4b57      	ldr	r3, [pc, #348]	; (8009350 <HAL_HCD_MspInit+0x1e8>)
 80091f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f4:	f003 0301 	and.w	r3, r3, #1
 80091f8:	617b      	str	r3, [r7, #20]
 80091fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80091fc:	2300      	movs	r3, #0
 80091fe:	613b      	str	r3, [r7, #16]
 8009200:	4b53      	ldr	r3, [pc, #332]	; (8009350 <HAL_HCD_MspInit+0x1e8>)
 8009202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009204:	4a52      	ldr	r2, [pc, #328]	; (8009350 <HAL_HCD_MspInit+0x1e8>)
 8009206:	f043 0302 	orr.w	r3, r3, #2
 800920a:	6313      	str	r3, [r2, #48]	; 0x30
 800920c:	4b50      	ldr	r3, [pc, #320]	; (8009350 <HAL_HCD_MspInit+0x1e8>)
 800920e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009210:	f003 0302 	and.w	r3, r3, #2
 8009214:	613b      	str	r3, [r7, #16]
 8009216:	693b      	ldr	r3, [r7, #16]
    PB11     ------> USB_OTG_HS_ULPI_D4
    PB12     ------> USB_OTG_HS_ULPI_D5
    PB13     ------> USB_OTG_HS_ULPI_D6
    PB5     ------> USB_OTG_HS_ULPI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8009218:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800921c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800921e:	2302      	movs	r3, #2
 8009220:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009222:	2300      	movs	r3, #0
 8009224:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009226:	2303      	movs	r3, #3
 8009228:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800922a:	230a      	movs	r3, #10
 800922c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800922e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009232:	4619      	mov	r1, r3
 8009234:	4847      	ldr	r0, [pc, #284]	; (8009354 <HAL_HCD_MspInit+0x1ec>)
 8009236:	f7f7 fe9b 	bl	8000f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800923a:	2301      	movs	r3, #1
 800923c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800923e:	2302      	movs	r3, #2
 8009240:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009242:	2300      	movs	r3, #0
 8009244:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009246:	2303      	movs	r3, #3
 8009248:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800924a:	230a      	movs	r3, #10
 800924c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800924e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009252:	4619      	mov	r1, r3
 8009254:	4840      	ldr	r0, [pc, #256]	; (8009358 <HAL_HCD_MspInit+0x1f0>)
 8009256:	f7f7 fe8b 	bl	8000f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800925a:	2310      	movs	r3, #16
 800925c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800925e:	2302      	movs	r3, #2
 8009260:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009262:	2300      	movs	r3, #0
 8009264:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009266:	2303      	movs	r3, #3
 8009268:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800926a:	230a      	movs	r3, #10
 800926c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800926e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009272:	4619      	mov	r1, r3
 8009274:	4839      	ldr	r0, [pc, #228]	; (800935c <HAL_HCD_MspInit+0x1f4>)
 8009276:	f7f7 fe7b 	bl	8000f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800927a:	2328      	movs	r3, #40	; 0x28
 800927c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800927e:	2302      	movs	r3, #2
 8009280:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009282:	2300      	movs	r3, #0
 8009284:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009286:	2303      	movs	r3, #3
 8009288:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800928a:	230a      	movs	r3, #10
 800928c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800928e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009292:	4619      	mov	r1, r3
 8009294:	4832      	ldr	r0, [pc, #200]	; (8009360 <HAL_HCD_MspInit+0x1f8>)
 8009296:	f7f7 fe6b 	bl	8000f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800929a:	2310      	movs	r3, #16
 800929c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800929e:	2302      	movs	r3, #2
 80092a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092a2:	2300      	movs	r3, #0
 80092a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092a6:	2303      	movs	r3, #3
 80092a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80092aa:	230c      	movs	r3, #12
 80092ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092b2:	4619      	mov	r1, r3
 80092b4:	482a      	ldr	r0, [pc, #168]	; (8009360 <HAL_HCD_MspInit+0x1f8>)
 80092b6:	f7f7 fe5b 	bl	8000f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80092ba:	f643 4323 	movw	r3, #15395	; 0x3c23
 80092be:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092c0:	2302      	movs	r3, #2
 80092c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092c4:	2300      	movs	r3, #0
 80092c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092c8:	2303      	movs	r3, #3
 80092ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80092cc:	230a      	movs	r3, #10
 80092ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80092d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092d4:	4619      	mov	r1, r3
 80092d6:	4823      	ldr	r0, [pc, #140]	; (8009364 <HAL_HCD_MspInit+0x1fc>)
 80092d8:	f7f7 fe4a 	bl	8000f70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80092dc:	2300      	movs	r3, #0
 80092de:	60fb      	str	r3, [r7, #12]
 80092e0:	4b1b      	ldr	r3, [pc, #108]	; (8009350 <HAL_HCD_MspInit+0x1e8>)
 80092e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092e4:	4a1a      	ldr	r2, [pc, #104]	; (8009350 <HAL_HCD_MspInit+0x1e8>)
 80092e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80092ea:	6313      	str	r3, [r2, #48]	; 0x30
 80092ec:	4b18      	ldr	r3, [pc, #96]	; (8009350 <HAL_HCD_MspInit+0x1e8>)
 80092ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092f4:	60fb      	str	r3, [r7, #12]
 80092f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 80092f8:	2300      	movs	r3, #0
 80092fa:	60bb      	str	r3, [r7, #8]
 80092fc:	4b14      	ldr	r3, [pc, #80]	; (8009350 <HAL_HCD_MspInit+0x1e8>)
 80092fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009300:	4a13      	ldr	r2, [pc, #76]	; (8009350 <HAL_HCD_MspInit+0x1e8>)
 8009302:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009306:	6313      	str	r3, [r2, #48]	; 0x30
 8009308:	4b11      	ldr	r3, [pc, #68]	; (8009350 <HAL_HCD_MspInit+0x1e8>)
 800930a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800930c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009310:	60bb      	str	r3, [r7, #8]
 8009312:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 0, 0);
 8009314:	2200      	movs	r2, #0
 8009316:	2100      	movs	r1, #0
 8009318:	204a      	movs	r0, #74	; 0x4a
 800931a:	f7f7 fd60 	bl	8000dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 800931e:	204a      	movs	r0, #74	; 0x4a
 8009320:	f7f7 fd79 	bl	8000e16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 0, 0);
 8009324:	2200      	movs	r2, #0
 8009326:	2100      	movs	r1, #0
 8009328:	204b      	movs	r0, #75	; 0x4b
 800932a:	f7f7 fd58 	bl	8000dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 800932e:	204b      	movs	r0, #75	; 0x4b
 8009330:	f7f7 fd71 	bl	8000e16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8009334:	2200      	movs	r2, #0
 8009336:	2100      	movs	r1, #0
 8009338:	204d      	movs	r0, #77	; 0x4d
 800933a:	f7f7 fd50 	bl	8000dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800933e:	204d      	movs	r0, #77	; 0x4d
 8009340:	f7f7 fd69 	bl	8000e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8009344:	bf00      	nop
 8009346:	3738      	adds	r7, #56	; 0x38
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}
 800934c:	40040000 	.word	0x40040000
 8009350:	40023800 	.word	0x40023800
 8009354:	40022000 	.word	0x40022000
 8009358:	40020800 	.word	0x40020800
 800935c:	40021c00 	.word	0x40021c00
 8009360:	40020000 	.word	0x40020000
 8009364:	40020400 	.word	0x40020400

08009368 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8009376:	4618      	mov	r0, r3
 8009378:	f7fe fea6 	bl	80080c8 <USBH_LL_IncTimer>
}
 800937c:	bf00      	nop
 800937e:	3708      	adds	r7, #8
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8009392:	4618      	mov	r0, r3
 8009394:	f7fe fef0 	bl	8008178 <USBH_LL_Connect>
}
 8009398:	bf00      	nop
 800939a:	3708      	adds	r7, #8
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7fe feff 	bl	80081b2 <USBH_LL_Disconnect>
}
 80093b4:	bf00      	nop
 80093b6:	3708      	adds	r7, #8
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	460b      	mov	r3, r1
 80093c6:	70fb      	strb	r3, [r7, #3]
 80093c8:	4613      	mov	r3, r2
 80093ca:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80093cc:	bf00      	nop
 80093ce:	370c      	adds	r7, #12
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr

080093d8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7fe fea0 	bl	800812c <USBH_LL_PortEnabled>
}
 80093ec:	bf00      	nop
 80093ee:	3708      	adds	r7, #8
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8009402:	4618      	mov	r0, r3
 8009404:	f7fe fea2 	bl	800814c <USBH_LL_PortDisabled>
}
 8009408:	bf00      	nop
 800940a:	3708      	adds	r7, #8
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800941e:	f893 3aa0 	ldrb.w	r3, [r3, #2720]	; 0xaa0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d135      	bne.n	8009492 <USBH_LL_Init+0x82>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 8009426:	4a1d      	ldr	r2, [pc, #116]	; (800949c <USBH_LL_Init+0x8c>)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_HS;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009434:	461a      	mov	r2, r3
 8009436:	4b19      	ldr	r3, [pc, #100]	; (800949c <USBH_LL_Init+0x8c>)
 8009438:	f8c2 3aa4 	str.w	r3, [r2, #2724]	; 0xaa4

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800943c:	4b17      	ldr	r3, [pc, #92]	; (800949c <USBH_LL_Init+0x8c>)
 800943e:	4a18      	ldr	r2, [pc, #96]	; (80094a0 <USBH_LL_Init+0x90>)
 8009440:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8009442:	4b16      	ldr	r3, [pc, #88]	; (800949c <USBH_LL_Init+0x8c>)
 8009444:	220c      	movs	r2, #12
 8009446:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_HIGH;
 8009448:	4b14      	ldr	r3, [pc, #80]	; (800949c <USBH_LL_Init+0x8c>)
 800944a:	2200      	movs	r2, #0
 800944c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800944e:	4b13      	ldr	r3, [pc, #76]	; (800949c <USBH_LL_Init+0x8c>)
 8009450:	2200      	movs	r2, #0
 8009452:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8009454:	4b11      	ldr	r3, [pc, #68]	; (800949c <USBH_LL_Init+0x8c>)
 8009456:	2201      	movs	r2, #1
 8009458:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = ENABLE;
 800945a:	4b10      	ldr	r3, [pc, #64]	; (800949c <USBH_LL_Init+0x8c>)
 800945c:	2201      	movs	r2, #1
 800945e:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8009460:	4b0e      	ldr	r3, [pc, #56]	; (800949c <USBH_LL_Init+0x8c>)
 8009462:	2200      	movs	r2, #0
 8009464:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8009466:	4b0d      	ldr	r3, [pc, #52]	; (800949c <USBH_LL_Init+0x8c>)
 8009468:	2200      	movs	r2, #0
 800946a:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = ENABLE;
 800946c:	4b0b      	ldr	r3, [pc, #44]	; (800949c <USBH_LL_Init+0x8c>)
 800946e:	2201      	movs	r2, #1
 8009470:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8009472:	480a      	ldr	r0, [pc, #40]	; (800949c <USBH_LL_Init+0x8c>)
 8009474:	f7f7 ff18 	bl	80012a8 <HAL_HCD_Init>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d001      	beq.n	8009482 <USBH_LL_Init+0x72>
  {
    Error_Handler( );
 800947e:	f7f7 f9a9 	bl	80007d4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8009482:	4806      	ldr	r0, [pc, #24]	; (800949c <USBH_LL_Init+0x8c>)
 8009484:	f7f8 fb78 	bl	8001b78 <HAL_HCD_GetCurrentFrame>
 8009488:	4603      	mov	r3, r0
 800948a:	4619      	mov	r1, r3
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f7fe fe09 	bl	80080a4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	3708      	adds	r7, #8
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}
 800949c:	2001e010 	.word	0x2001e010
 80094a0:	40040000 	.word	0x40040000

080094a4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094ac:	2300      	movs	r3, #0
 80094ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80094b0:	2300      	movs	r3, #0
 80094b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ba:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80094be:	4618      	mov	r0, r3
 80094c0:	f7f8 fae2 	bl	8001a88 <HAL_HCD_Start>
 80094c4:	4603      	mov	r3, r0
 80094c6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80094c8:	7bfb      	ldrb	r3, [r7, #15]
 80094ca:	4618      	mov	r0, r3
 80094cc:	f000 f968 	bl	80097a0 <USBH_Get_USB_Status>
 80094d0:	4603      	mov	r3, r0
 80094d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3710      	adds	r7, #16
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b084      	sub	sp, #16
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094e6:	2300      	movs	r3, #0
 80094e8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80094ea:	2300      	movs	r3, #0
 80094ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094f4:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80094f8:	4618      	mov	r0, r3
 80094fa:	f7f8 fae8 	bl	8001ace <HAL_HCD_Stop>
 80094fe:	4603      	mov	r3, r0
 8009500:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009502:	7bfb      	ldrb	r3, [r7, #15]
 8009504:	4618      	mov	r0, r3
 8009506:	f000 f94b 	bl	80097a0 <USBH_Get_USB_Status>
 800950a:	4603      	mov	r3, r0
 800950c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800950e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009510:	4618      	mov	r0, r3
 8009512:	3710      	adds	r7, #16
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009520:	2301      	movs	r3, #1
 8009522:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800952a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800952e:	4618      	mov	r0, r3
 8009530:	f7f8 fb30 	bl	8001b94 <HAL_HCD_GetCurrentSpeed>
 8009534:	4603      	mov	r3, r0
 8009536:	2b02      	cmp	r3, #2
 8009538:	d00c      	beq.n	8009554 <USBH_LL_GetSpeed+0x3c>
 800953a:	2b02      	cmp	r3, #2
 800953c:	d80d      	bhi.n	800955a <USBH_LL_GetSpeed+0x42>
 800953e:	2b00      	cmp	r3, #0
 8009540:	d002      	beq.n	8009548 <USBH_LL_GetSpeed+0x30>
 8009542:	2b01      	cmp	r3, #1
 8009544:	d003      	beq.n	800954e <USBH_LL_GetSpeed+0x36>
 8009546:	e008      	b.n	800955a <USBH_LL_GetSpeed+0x42>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009548:	2300      	movs	r3, #0
 800954a:	73fb      	strb	r3, [r7, #15]
    break;
 800954c:	e008      	b.n	8009560 <USBH_LL_GetSpeed+0x48>

  case 1 :
    speed = USBH_SPEED_FULL;
 800954e:	2301      	movs	r3, #1
 8009550:	73fb      	strb	r3, [r7, #15]
    break;
 8009552:	e005      	b.n	8009560 <USBH_LL_GetSpeed+0x48>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009554:	2302      	movs	r3, #2
 8009556:	73fb      	strb	r3, [r7, #15]
    break;
 8009558:	e002      	b.n	8009560 <USBH_LL_GetSpeed+0x48>

  default:
   speed = USBH_SPEED_FULL;
 800955a:	2301      	movs	r3, #1
 800955c:	73fb      	strb	r3, [r7, #15]
    break;
 800955e:	bf00      	nop
  }
  return  speed;
 8009560:	7bfb      	ldrb	r3, [r7, #15]
}
 8009562:	4618      	mov	r0, r3
 8009564:	3710      	adds	r7, #16
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}

0800956a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800956a:	b580      	push	{r7, lr}
 800956c:	b084      	sub	sp, #16
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009572:	2300      	movs	r3, #0
 8009574:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009576:	2300      	movs	r3, #0
 8009578:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009580:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009584:	4618      	mov	r0, r3
 8009586:	f7f8 fabf 	bl	8001b08 <HAL_HCD_ResetPort>
 800958a:	4603      	mov	r3, r0
 800958c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800958e:	7bfb      	ldrb	r3, [r7, #15]
 8009590:	4618      	mov	r0, r3
 8009592:	f000 f905 	bl	80097a0 <USBH_Get_USB_Status>
 8009596:	4603      	mov	r3, r0
 8009598:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800959a:	7bbb      	ldrb	r3, [r7, #14]
}
 800959c:	4618      	mov	r0, r3
 800959e:	3710      	adds	r7, #16
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	460b      	mov	r3, r1
 80095ae:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095b6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80095ba:	78fa      	ldrb	r2, [r7, #3]
 80095bc:	4611      	mov	r1, r2
 80095be:	4618      	mov	r0, r3
 80095c0:	f7f8 fac5 	bl	8001b4e <HAL_HCD_HC_GetXferCount>
 80095c4:	4603      	mov	r3, r0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3708      	adds	r7, #8
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}

080095ce <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80095ce:	b590      	push	{r4, r7, lr}
 80095d0:	b089      	sub	sp, #36	; 0x24
 80095d2:	af04      	add	r7, sp, #16
 80095d4:	6078      	str	r0, [r7, #4]
 80095d6:	4608      	mov	r0, r1
 80095d8:	4611      	mov	r1, r2
 80095da:	461a      	mov	r2, r3
 80095dc:	4603      	mov	r3, r0
 80095de:	70fb      	strb	r3, [r7, #3]
 80095e0:	460b      	mov	r3, r1
 80095e2:	70bb      	strb	r3, [r7, #2]
 80095e4:	4613      	mov	r3, r2
 80095e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095e8:	2300      	movs	r3, #0
 80095ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80095ec:	2300      	movs	r3, #0
 80095ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095f6:	f8d3 0aa4 	ldr.w	r0, [r3, #2724]	; 0xaa4
 80095fa:	787c      	ldrb	r4, [r7, #1]
 80095fc:	78ba      	ldrb	r2, [r7, #2]
 80095fe:	78f9      	ldrb	r1, [r7, #3]
 8009600:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009602:	9302      	str	r3, [sp, #8]
 8009604:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009608:	9301      	str	r3, [sp, #4]
 800960a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800960e:	9300      	str	r3, [sp, #0]
 8009610:	4623      	mov	r3, r4
 8009612:	f7f7 feb0 	bl	8001376 <HAL_HCD_HC_Init>
 8009616:	4603      	mov	r3, r0
 8009618:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800961a:	7bfb      	ldrb	r3, [r7, #15]
 800961c:	4618      	mov	r0, r3
 800961e:	f000 f8bf 	bl	80097a0 <USBH_Get_USB_Status>
 8009622:	4603      	mov	r3, r0
 8009624:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009626:	7bbb      	ldrb	r3, [r7, #14]
}
 8009628:	4618      	mov	r0, r3
 800962a:	3714      	adds	r7, #20
 800962c:	46bd      	mov	sp, r7
 800962e:	bd90      	pop	{r4, r7, pc}

08009630 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	460b      	mov	r3, r1
 800963a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800963c:	2300      	movs	r3, #0
 800963e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009640:	2300      	movs	r3, #0
 8009642:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800964a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800964e:	78fa      	ldrb	r2, [r7, #3]
 8009650:	4611      	mov	r1, r2
 8009652:	4618      	mov	r0, r3
 8009654:	f7f7 ff47 	bl	80014e6 <HAL_HCD_HC_Halt>
 8009658:	4603      	mov	r3, r0
 800965a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800965c:	7bfb      	ldrb	r3, [r7, #15]
 800965e:	4618      	mov	r0, r3
 8009660:	f000 f89e 	bl	80097a0 <USBH_Get_USB_Status>
 8009664:	4603      	mov	r3, r0
 8009666:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009668:	7bbb      	ldrb	r3, [r7, #14]
}
 800966a:	4618      	mov	r0, r3
 800966c:	3710      	adds	r7, #16
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}

08009672 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009672:	b590      	push	{r4, r7, lr}
 8009674:	b089      	sub	sp, #36	; 0x24
 8009676:	af04      	add	r7, sp, #16
 8009678:	6078      	str	r0, [r7, #4]
 800967a:	4608      	mov	r0, r1
 800967c:	4611      	mov	r1, r2
 800967e:	461a      	mov	r2, r3
 8009680:	4603      	mov	r3, r0
 8009682:	70fb      	strb	r3, [r7, #3]
 8009684:	460b      	mov	r3, r1
 8009686:	70bb      	strb	r3, [r7, #2]
 8009688:	4613      	mov	r3, r2
 800968a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800968c:	2300      	movs	r3, #0
 800968e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009690:	2300      	movs	r3, #0
 8009692:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800969a:	f8d3 0aa4 	ldr.w	r0, [r3, #2724]	; 0xaa4
 800969e:	787c      	ldrb	r4, [r7, #1]
 80096a0:	78ba      	ldrb	r2, [r7, #2]
 80096a2:	78f9      	ldrb	r1, [r7, #3]
 80096a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80096a8:	9303      	str	r3, [sp, #12]
 80096aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80096ac:	9302      	str	r3, [sp, #8]
 80096ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b0:	9301      	str	r3, [sp, #4]
 80096b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80096b6:	9300      	str	r3, [sp, #0]
 80096b8:	4623      	mov	r3, r4
 80096ba:	f7f7 ff37 	bl	800152c <HAL_HCD_HC_SubmitRequest>
 80096be:	4603      	mov	r3, r0
 80096c0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80096c2:	7bfb      	ldrb	r3, [r7, #15]
 80096c4:	4618      	mov	r0, r3
 80096c6:	f000 f86b 	bl	80097a0 <USBH_Get_USB_Status>
 80096ca:	4603      	mov	r3, r0
 80096cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3714      	adds	r7, #20
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd90      	pop	{r4, r7, pc}

080096d8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	460b      	mov	r3, r1
 80096e2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096ea:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80096ee:	78fa      	ldrb	r2, [r7, #3]
 80096f0:	4611      	mov	r1, r2
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7f8 fa16 	bl	8001b24 <HAL_HCD_HC_GetURBState>
 80096f8:	4603      	mov	r3, r0
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3708      	adds	r7, #8
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009702:	b580      	push	{r7, lr}
 8009704:	b082      	sub	sp, #8
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
 800970a:	460b      	mov	r3, r1
 800970c:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_HS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_HS */
    }
  }
  HAL_Delay(200);
 800970e:	20c8      	movs	r0, #200	; 0xc8
 8009710:	f7f7 fa66 	bl	8000be0 <HAL_Delay>
  return USBH_OK;
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3708      	adds	r7, #8
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}

0800971e <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800971e:	b480      	push	{r7}
 8009720:	b085      	sub	sp, #20
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
 8009726:	460b      	mov	r3, r1
 8009728:	70fb      	strb	r3, [r7, #3]
 800972a:	4613      	mov	r3, r2
 800972c:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009734:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009738:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800973a:	78fa      	ldrb	r2, [r7, #3]
 800973c:	68f9      	ldr	r1, [r7, #12]
 800973e:	4613      	mov	r3, r2
 8009740:	011b      	lsls	r3, r3, #4
 8009742:	1a9b      	subs	r3, r3, r2
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	440b      	add	r3, r1
 8009748:	3317      	adds	r3, #23
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d00a      	beq.n	8009766 <USBH_LL_SetToggle+0x48>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009750:	78fa      	ldrb	r2, [r7, #3]
 8009752:	68f9      	ldr	r1, [r7, #12]
 8009754:	4613      	mov	r3, r2
 8009756:	011b      	lsls	r3, r3, #4
 8009758:	1a9b      	subs	r3, r3, r2
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	440b      	add	r3, r1
 800975e:	333c      	adds	r3, #60	; 0x3c
 8009760:	78ba      	ldrb	r2, [r7, #2]
 8009762:	701a      	strb	r2, [r3, #0]
 8009764:	e009      	b.n	800977a <USBH_LL_SetToggle+0x5c>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009766:	78fa      	ldrb	r2, [r7, #3]
 8009768:	68f9      	ldr	r1, [r7, #12]
 800976a:	4613      	mov	r3, r2
 800976c:	011b      	lsls	r3, r3, #4
 800976e:	1a9b      	subs	r3, r3, r2
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	440b      	add	r3, r1
 8009774:	333d      	adds	r3, #61	; 0x3d
 8009776:	78ba      	ldrb	r2, [r7, #2]
 8009778:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3714      	adds	r7, #20
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f7f7 fa25 	bl	8000be0 <HAL_Delay>
}
 8009796:	bf00      	nop
 8009798:	3708      	adds	r7, #8
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
	...

080097a0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b085      	sub	sp, #20
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	4603      	mov	r3, r0
 80097a8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097aa:	2300      	movs	r3, #0
 80097ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80097ae:	79fb      	ldrb	r3, [r7, #7]
 80097b0:	2b03      	cmp	r3, #3
 80097b2:	d817      	bhi.n	80097e4 <USBH_Get_USB_Status+0x44>
 80097b4:	a201      	add	r2, pc, #4	; (adr r2, 80097bc <USBH_Get_USB_Status+0x1c>)
 80097b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ba:	bf00      	nop
 80097bc:	080097cd 	.word	0x080097cd
 80097c0:	080097d3 	.word	0x080097d3
 80097c4:	080097d9 	.word	0x080097d9
 80097c8:	080097df 	.word	0x080097df
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80097cc:	2300      	movs	r3, #0
 80097ce:	73fb      	strb	r3, [r7, #15]
    break;
 80097d0:	e00b      	b.n	80097ea <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80097d2:	2302      	movs	r3, #2
 80097d4:	73fb      	strb	r3, [r7, #15]
    break;
 80097d6:	e008      	b.n	80097ea <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80097d8:	2301      	movs	r3, #1
 80097da:	73fb      	strb	r3, [r7, #15]
    break;
 80097dc:	e005      	b.n	80097ea <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80097de:	2302      	movs	r3, #2
 80097e0:	73fb      	strb	r3, [r7, #15]
    break;
 80097e2:	e002      	b.n	80097ea <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80097e4:	2302      	movs	r3, #2
 80097e6:	73fb      	strb	r3, [r7, #15]
    break;
 80097e8:	bf00      	nop
  }
  return usb_status;
 80097ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3714      	adds	r7, #20
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr

080097f8 <malloc>:
 80097f8:	4b02      	ldr	r3, [pc, #8]	; (8009804 <malloc+0xc>)
 80097fa:	4601      	mov	r1, r0
 80097fc:	6818      	ldr	r0, [r3, #0]
 80097fe:	f000 b82b 	b.w	8009858 <_malloc_r>
 8009802:	bf00      	nop
 8009804:	20000098 	.word	0x20000098

08009808 <free>:
 8009808:	4b02      	ldr	r3, [pc, #8]	; (8009814 <free+0xc>)
 800980a:	4601      	mov	r1, r0
 800980c:	6818      	ldr	r0, [r3, #0]
 800980e:	f000 ba79 	b.w	8009d04 <_free_r>
 8009812:	bf00      	nop
 8009814:	20000098 	.word	0x20000098

08009818 <sbrk_aligned>:
 8009818:	b570      	push	{r4, r5, r6, lr}
 800981a:	4e0e      	ldr	r6, [pc, #56]	; (8009854 <sbrk_aligned+0x3c>)
 800981c:	460c      	mov	r4, r1
 800981e:	6831      	ldr	r1, [r6, #0]
 8009820:	4605      	mov	r5, r0
 8009822:	b911      	cbnz	r1, 800982a <sbrk_aligned+0x12>
 8009824:	f000 fa10 	bl	8009c48 <_sbrk_r>
 8009828:	6030      	str	r0, [r6, #0]
 800982a:	4621      	mov	r1, r4
 800982c:	4628      	mov	r0, r5
 800982e:	f000 fa0b 	bl	8009c48 <_sbrk_r>
 8009832:	1c43      	adds	r3, r0, #1
 8009834:	d00a      	beq.n	800984c <sbrk_aligned+0x34>
 8009836:	1cc4      	adds	r4, r0, #3
 8009838:	f024 0403 	bic.w	r4, r4, #3
 800983c:	42a0      	cmp	r0, r4
 800983e:	d007      	beq.n	8009850 <sbrk_aligned+0x38>
 8009840:	1a21      	subs	r1, r4, r0
 8009842:	4628      	mov	r0, r5
 8009844:	f000 fa00 	bl	8009c48 <_sbrk_r>
 8009848:	3001      	adds	r0, #1
 800984a:	d101      	bne.n	8009850 <sbrk_aligned+0x38>
 800984c:	f04f 34ff 	mov.w	r4, #4294967295
 8009850:	4620      	mov	r0, r4
 8009852:	bd70      	pop	{r4, r5, r6, pc}
 8009854:	2001e3f4 	.word	0x2001e3f4

08009858 <_malloc_r>:
 8009858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800985c:	1ccd      	adds	r5, r1, #3
 800985e:	f025 0503 	bic.w	r5, r5, #3
 8009862:	3508      	adds	r5, #8
 8009864:	2d0c      	cmp	r5, #12
 8009866:	bf38      	it	cc
 8009868:	250c      	movcc	r5, #12
 800986a:	2d00      	cmp	r5, #0
 800986c:	4607      	mov	r7, r0
 800986e:	db01      	blt.n	8009874 <_malloc_r+0x1c>
 8009870:	42a9      	cmp	r1, r5
 8009872:	d905      	bls.n	8009880 <_malloc_r+0x28>
 8009874:	230c      	movs	r3, #12
 8009876:	603b      	str	r3, [r7, #0]
 8009878:	2600      	movs	r6, #0
 800987a:	4630      	mov	r0, r6
 800987c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009880:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009954 <_malloc_r+0xfc>
 8009884:	f000 f868 	bl	8009958 <__malloc_lock>
 8009888:	f8d8 3000 	ldr.w	r3, [r8]
 800988c:	461c      	mov	r4, r3
 800988e:	bb5c      	cbnz	r4, 80098e8 <_malloc_r+0x90>
 8009890:	4629      	mov	r1, r5
 8009892:	4638      	mov	r0, r7
 8009894:	f7ff ffc0 	bl	8009818 <sbrk_aligned>
 8009898:	1c43      	adds	r3, r0, #1
 800989a:	4604      	mov	r4, r0
 800989c:	d155      	bne.n	800994a <_malloc_r+0xf2>
 800989e:	f8d8 4000 	ldr.w	r4, [r8]
 80098a2:	4626      	mov	r6, r4
 80098a4:	2e00      	cmp	r6, #0
 80098a6:	d145      	bne.n	8009934 <_malloc_r+0xdc>
 80098a8:	2c00      	cmp	r4, #0
 80098aa:	d048      	beq.n	800993e <_malloc_r+0xe6>
 80098ac:	6823      	ldr	r3, [r4, #0]
 80098ae:	4631      	mov	r1, r6
 80098b0:	4638      	mov	r0, r7
 80098b2:	eb04 0903 	add.w	r9, r4, r3
 80098b6:	f000 f9c7 	bl	8009c48 <_sbrk_r>
 80098ba:	4581      	cmp	r9, r0
 80098bc:	d13f      	bne.n	800993e <_malloc_r+0xe6>
 80098be:	6821      	ldr	r1, [r4, #0]
 80098c0:	1a6d      	subs	r5, r5, r1
 80098c2:	4629      	mov	r1, r5
 80098c4:	4638      	mov	r0, r7
 80098c6:	f7ff ffa7 	bl	8009818 <sbrk_aligned>
 80098ca:	3001      	adds	r0, #1
 80098cc:	d037      	beq.n	800993e <_malloc_r+0xe6>
 80098ce:	6823      	ldr	r3, [r4, #0]
 80098d0:	442b      	add	r3, r5
 80098d2:	6023      	str	r3, [r4, #0]
 80098d4:	f8d8 3000 	ldr.w	r3, [r8]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d038      	beq.n	800994e <_malloc_r+0xf6>
 80098dc:	685a      	ldr	r2, [r3, #4]
 80098de:	42a2      	cmp	r2, r4
 80098e0:	d12b      	bne.n	800993a <_malloc_r+0xe2>
 80098e2:	2200      	movs	r2, #0
 80098e4:	605a      	str	r2, [r3, #4]
 80098e6:	e00f      	b.n	8009908 <_malloc_r+0xb0>
 80098e8:	6822      	ldr	r2, [r4, #0]
 80098ea:	1b52      	subs	r2, r2, r5
 80098ec:	d41f      	bmi.n	800992e <_malloc_r+0xd6>
 80098ee:	2a0b      	cmp	r2, #11
 80098f0:	d917      	bls.n	8009922 <_malloc_r+0xca>
 80098f2:	1961      	adds	r1, r4, r5
 80098f4:	42a3      	cmp	r3, r4
 80098f6:	6025      	str	r5, [r4, #0]
 80098f8:	bf18      	it	ne
 80098fa:	6059      	strne	r1, [r3, #4]
 80098fc:	6863      	ldr	r3, [r4, #4]
 80098fe:	bf08      	it	eq
 8009900:	f8c8 1000 	streq.w	r1, [r8]
 8009904:	5162      	str	r2, [r4, r5]
 8009906:	604b      	str	r3, [r1, #4]
 8009908:	4638      	mov	r0, r7
 800990a:	f104 060b 	add.w	r6, r4, #11
 800990e:	f000 f829 	bl	8009964 <__malloc_unlock>
 8009912:	f026 0607 	bic.w	r6, r6, #7
 8009916:	1d23      	adds	r3, r4, #4
 8009918:	1af2      	subs	r2, r6, r3
 800991a:	d0ae      	beq.n	800987a <_malloc_r+0x22>
 800991c:	1b9b      	subs	r3, r3, r6
 800991e:	50a3      	str	r3, [r4, r2]
 8009920:	e7ab      	b.n	800987a <_malloc_r+0x22>
 8009922:	42a3      	cmp	r3, r4
 8009924:	6862      	ldr	r2, [r4, #4]
 8009926:	d1dd      	bne.n	80098e4 <_malloc_r+0x8c>
 8009928:	f8c8 2000 	str.w	r2, [r8]
 800992c:	e7ec      	b.n	8009908 <_malloc_r+0xb0>
 800992e:	4623      	mov	r3, r4
 8009930:	6864      	ldr	r4, [r4, #4]
 8009932:	e7ac      	b.n	800988e <_malloc_r+0x36>
 8009934:	4634      	mov	r4, r6
 8009936:	6876      	ldr	r6, [r6, #4]
 8009938:	e7b4      	b.n	80098a4 <_malloc_r+0x4c>
 800993a:	4613      	mov	r3, r2
 800993c:	e7cc      	b.n	80098d8 <_malloc_r+0x80>
 800993e:	230c      	movs	r3, #12
 8009940:	603b      	str	r3, [r7, #0]
 8009942:	4638      	mov	r0, r7
 8009944:	f000 f80e 	bl	8009964 <__malloc_unlock>
 8009948:	e797      	b.n	800987a <_malloc_r+0x22>
 800994a:	6025      	str	r5, [r4, #0]
 800994c:	e7dc      	b.n	8009908 <_malloc_r+0xb0>
 800994e:	605b      	str	r3, [r3, #4]
 8009950:	deff      	udf	#255	; 0xff
 8009952:	bf00      	nop
 8009954:	2001e3f0 	.word	0x2001e3f0

08009958 <__malloc_lock>:
 8009958:	4801      	ldr	r0, [pc, #4]	; (8009960 <__malloc_lock+0x8>)
 800995a:	f000 b9c2 	b.w	8009ce2 <__retarget_lock_acquire_recursive>
 800995e:	bf00      	nop
 8009960:	2001e538 	.word	0x2001e538

08009964 <__malloc_unlock>:
 8009964:	4801      	ldr	r0, [pc, #4]	; (800996c <__malloc_unlock+0x8>)
 8009966:	f000 b9bd 	b.w	8009ce4 <__retarget_lock_release_recursive>
 800996a:	bf00      	nop
 800996c:	2001e538 	.word	0x2001e538

08009970 <std>:
 8009970:	2300      	movs	r3, #0
 8009972:	b510      	push	{r4, lr}
 8009974:	4604      	mov	r4, r0
 8009976:	e9c0 3300 	strd	r3, r3, [r0]
 800997a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800997e:	6083      	str	r3, [r0, #8]
 8009980:	8181      	strh	r1, [r0, #12]
 8009982:	6643      	str	r3, [r0, #100]	; 0x64
 8009984:	81c2      	strh	r2, [r0, #14]
 8009986:	6183      	str	r3, [r0, #24]
 8009988:	4619      	mov	r1, r3
 800998a:	2208      	movs	r2, #8
 800998c:	305c      	adds	r0, #92	; 0x5c
 800998e:	f000 f91e 	bl	8009bce <memset>
 8009992:	4b0d      	ldr	r3, [pc, #52]	; (80099c8 <std+0x58>)
 8009994:	6263      	str	r3, [r4, #36]	; 0x24
 8009996:	4b0d      	ldr	r3, [pc, #52]	; (80099cc <std+0x5c>)
 8009998:	62a3      	str	r3, [r4, #40]	; 0x28
 800999a:	4b0d      	ldr	r3, [pc, #52]	; (80099d0 <std+0x60>)
 800999c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800999e:	4b0d      	ldr	r3, [pc, #52]	; (80099d4 <std+0x64>)
 80099a0:	6323      	str	r3, [r4, #48]	; 0x30
 80099a2:	4b0d      	ldr	r3, [pc, #52]	; (80099d8 <std+0x68>)
 80099a4:	6224      	str	r4, [r4, #32]
 80099a6:	429c      	cmp	r4, r3
 80099a8:	d006      	beq.n	80099b8 <std+0x48>
 80099aa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80099ae:	4294      	cmp	r4, r2
 80099b0:	d002      	beq.n	80099b8 <std+0x48>
 80099b2:	33d0      	adds	r3, #208	; 0xd0
 80099b4:	429c      	cmp	r4, r3
 80099b6:	d105      	bne.n	80099c4 <std+0x54>
 80099b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80099bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099c0:	f000 b98e 	b.w	8009ce0 <__retarget_lock_init_recursive>
 80099c4:	bd10      	pop	{r4, pc}
 80099c6:	bf00      	nop
 80099c8:	08009b29 	.word	0x08009b29
 80099cc:	08009b4b 	.word	0x08009b4b
 80099d0:	08009b83 	.word	0x08009b83
 80099d4:	08009ba7 	.word	0x08009ba7
 80099d8:	2001e3f8 	.word	0x2001e3f8

080099dc <stdio_exit_handler>:
 80099dc:	4a02      	ldr	r2, [pc, #8]	; (80099e8 <stdio_exit_handler+0xc>)
 80099de:	4903      	ldr	r1, [pc, #12]	; (80099ec <stdio_exit_handler+0x10>)
 80099e0:	4803      	ldr	r0, [pc, #12]	; (80099f0 <stdio_exit_handler+0x14>)
 80099e2:	f000 b869 	b.w	8009ab8 <_fwalk_sglue>
 80099e6:	bf00      	nop
 80099e8:	20000040 	.word	0x20000040
 80099ec:	0800a451 	.word	0x0800a451
 80099f0:	2000004c 	.word	0x2000004c

080099f4 <cleanup_stdio>:
 80099f4:	6841      	ldr	r1, [r0, #4]
 80099f6:	4b0c      	ldr	r3, [pc, #48]	; (8009a28 <cleanup_stdio+0x34>)
 80099f8:	4299      	cmp	r1, r3
 80099fa:	b510      	push	{r4, lr}
 80099fc:	4604      	mov	r4, r0
 80099fe:	d001      	beq.n	8009a04 <cleanup_stdio+0x10>
 8009a00:	f000 fd26 	bl	800a450 <_fflush_r>
 8009a04:	68a1      	ldr	r1, [r4, #8]
 8009a06:	4b09      	ldr	r3, [pc, #36]	; (8009a2c <cleanup_stdio+0x38>)
 8009a08:	4299      	cmp	r1, r3
 8009a0a:	d002      	beq.n	8009a12 <cleanup_stdio+0x1e>
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	f000 fd1f 	bl	800a450 <_fflush_r>
 8009a12:	68e1      	ldr	r1, [r4, #12]
 8009a14:	4b06      	ldr	r3, [pc, #24]	; (8009a30 <cleanup_stdio+0x3c>)
 8009a16:	4299      	cmp	r1, r3
 8009a18:	d004      	beq.n	8009a24 <cleanup_stdio+0x30>
 8009a1a:	4620      	mov	r0, r4
 8009a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a20:	f000 bd16 	b.w	800a450 <_fflush_r>
 8009a24:	bd10      	pop	{r4, pc}
 8009a26:	bf00      	nop
 8009a28:	2001e3f8 	.word	0x2001e3f8
 8009a2c:	2001e460 	.word	0x2001e460
 8009a30:	2001e4c8 	.word	0x2001e4c8

08009a34 <global_stdio_init.part.0>:
 8009a34:	b510      	push	{r4, lr}
 8009a36:	4b0b      	ldr	r3, [pc, #44]	; (8009a64 <global_stdio_init.part.0+0x30>)
 8009a38:	4c0b      	ldr	r4, [pc, #44]	; (8009a68 <global_stdio_init.part.0+0x34>)
 8009a3a:	4a0c      	ldr	r2, [pc, #48]	; (8009a6c <global_stdio_init.part.0+0x38>)
 8009a3c:	601a      	str	r2, [r3, #0]
 8009a3e:	4620      	mov	r0, r4
 8009a40:	2200      	movs	r2, #0
 8009a42:	2104      	movs	r1, #4
 8009a44:	f7ff ff94 	bl	8009970 <std>
 8009a48:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	2109      	movs	r1, #9
 8009a50:	f7ff ff8e 	bl	8009970 <std>
 8009a54:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009a58:	2202      	movs	r2, #2
 8009a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a5e:	2112      	movs	r1, #18
 8009a60:	f7ff bf86 	b.w	8009970 <std>
 8009a64:	2001e530 	.word	0x2001e530
 8009a68:	2001e3f8 	.word	0x2001e3f8
 8009a6c:	080099dd 	.word	0x080099dd

08009a70 <__sfp_lock_acquire>:
 8009a70:	4801      	ldr	r0, [pc, #4]	; (8009a78 <__sfp_lock_acquire+0x8>)
 8009a72:	f000 b936 	b.w	8009ce2 <__retarget_lock_acquire_recursive>
 8009a76:	bf00      	nop
 8009a78:	2001e539 	.word	0x2001e539

08009a7c <__sfp_lock_release>:
 8009a7c:	4801      	ldr	r0, [pc, #4]	; (8009a84 <__sfp_lock_release+0x8>)
 8009a7e:	f000 b931 	b.w	8009ce4 <__retarget_lock_release_recursive>
 8009a82:	bf00      	nop
 8009a84:	2001e539 	.word	0x2001e539

08009a88 <__sinit>:
 8009a88:	b510      	push	{r4, lr}
 8009a8a:	4604      	mov	r4, r0
 8009a8c:	f7ff fff0 	bl	8009a70 <__sfp_lock_acquire>
 8009a90:	6a23      	ldr	r3, [r4, #32]
 8009a92:	b11b      	cbz	r3, 8009a9c <__sinit+0x14>
 8009a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a98:	f7ff bff0 	b.w	8009a7c <__sfp_lock_release>
 8009a9c:	4b04      	ldr	r3, [pc, #16]	; (8009ab0 <__sinit+0x28>)
 8009a9e:	6223      	str	r3, [r4, #32]
 8009aa0:	4b04      	ldr	r3, [pc, #16]	; (8009ab4 <__sinit+0x2c>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d1f5      	bne.n	8009a94 <__sinit+0xc>
 8009aa8:	f7ff ffc4 	bl	8009a34 <global_stdio_init.part.0>
 8009aac:	e7f2      	b.n	8009a94 <__sinit+0xc>
 8009aae:	bf00      	nop
 8009ab0:	080099f5 	.word	0x080099f5
 8009ab4:	2001e530 	.word	0x2001e530

08009ab8 <_fwalk_sglue>:
 8009ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009abc:	4607      	mov	r7, r0
 8009abe:	4688      	mov	r8, r1
 8009ac0:	4614      	mov	r4, r2
 8009ac2:	2600      	movs	r6, #0
 8009ac4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ac8:	f1b9 0901 	subs.w	r9, r9, #1
 8009acc:	d505      	bpl.n	8009ada <_fwalk_sglue+0x22>
 8009ace:	6824      	ldr	r4, [r4, #0]
 8009ad0:	2c00      	cmp	r4, #0
 8009ad2:	d1f7      	bne.n	8009ac4 <_fwalk_sglue+0xc>
 8009ad4:	4630      	mov	r0, r6
 8009ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ada:	89ab      	ldrh	r3, [r5, #12]
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d907      	bls.n	8009af0 <_fwalk_sglue+0x38>
 8009ae0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	d003      	beq.n	8009af0 <_fwalk_sglue+0x38>
 8009ae8:	4629      	mov	r1, r5
 8009aea:	4638      	mov	r0, r7
 8009aec:	47c0      	blx	r8
 8009aee:	4306      	orrs	r6, r0
 8009af0:	3568      	adds	r5, #104	; 0x68
 8009af2:	e7e9      	b.n	8009ac8 <_fwalk_sglue+0x10>

08009af4 <iprintf>:
 8009af4:	b40f      	push	{r0, r1, r2, r3}
 8009af6:	b507      	push	{r0, r1, r2, lr}
 8009af8:	4906      	ldr	r1, [pc, #24]	; (8009b14 <iprintf+0x20>)
 8009afa:	ab04      	add	r3, sp, #16
 8009afc:	6808      	ldr	r0, [r1, #0]
 8009afe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b02:	6881      	ldr	r1, [r0, #8]
 8009b04:	9301      	str	r3, [sp, #4]
 8009b06:	f000 f973 	bl	8009df0 <_vfiprintf_r>
 8009b0a:	b003      	add	sp, #12
 8009b0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b10:	b004      	add	sp, #16
 8009b12:	4770      	bx	lr
 8009b14:	20000098 	.word	0x20000098

08009b18 <putchar>:
 8009b18:	4b02      	ldr	r3, [pc, #8]	; (8009b24 <putchar+0xc>)
 8009b1a:	4601      	mov	r1, r0
 8009b1c:	6818      	ldr	r0, [r3, #0]
 8009b1e:	6882      	ldr	r2, [r0, #8]
 8009b20:	f000 bcbe 	b.w	800a4a0 <_putc_r>
 8009b24:	20000098 	.word	0x20000098

08009b28 <__sread>:
 8009b28:	b510      	push	{r4, lr}
 8009b2a:	460c      	mov	r4, r1
 8009b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b30:	f000 f878 	bl	8009c24 <_read_r>
 8009b34:	2800      	cmp	r0, #0
 8009b36:	bfab      	itete	ge
 8009b38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b3a:	89a3      	ldrhlt	r3, [r4, #12]
 8009b3c:	181b      	addge	r3, r3, r0
 8009b3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b42:	bfac      	ite	ge
 8009b44:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b46:	81a3      	strhlt	r3, [r4, #12]
 8009b48:	bd10      	pop	{r4, pc}

08009b4a <__swrite>:
 8009b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b4e:	461f      	mov	r7, r3
 8009b50:	898b      	ldrh	r3, [r1, #12]
 8009b52:	05db      	lsls	r3, r3, #23
 8009b54:	4605      	mov	r5, r0
 8009b56:	460c      	mov	r4, r1
 8009b58:	4616      	mov	r6, r2
 8009b5a:	d505      	bpl.n	8009b68 <__swrite+0x1e>
 8009b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b60:	2302      	movs	r3, #2
 8009b62:	2200      	movs	r2, #0
 8009b64:	f000 f84c 	bl	8009c00 <_lseek_r>
 8009b68:	89a3      	ldrh	r3, [r4, #12]
 8009b6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b72:	81a3      	strh	r3, [r4, #12]
 8009b74:	4632      	mov	r2, r6
 8009b76:	463b      	mov	r3, r7
 8009b78:	4628      	mov	r0, r5
 8009b7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b7e:	f000 b873 	b.w	8009c68 <_write_r>

08009b82 <__sseek>:
 8009b82:	b510      	push	{r4, lr}
 8009b84:	460c      	mov	r4, r1
 8009b86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b8a:	f000 f839 	bl	8009c00 <_lseek_r>
 8009b8e:	1c43      	adds	r3, r0, #1
 8009b90:	89a3      	ldrh	r3, [r4, #12]
 8009b92:	bf15      	itete	ne
 8009b94:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b9e:	81a3      	strheq	r3, [r4, #12]
 8009ba0:	bf18      	it	ne
 8009ba2:	81a3      	strhne	r3, [r4, #12]
 8009ba4:	bd10      	pop	{r4, pc}

08009ba6 <__sclose>:
 8009ba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009baa:	f000 b819 	b.w	8009be0 <_close_r>

08009bae <memcmp>:
 8009bae:	b510      	push	{r4, lr}
 8009bb0:	3901      	subs	r1, #1
 8009bb2:	4402      	add	r2, r0
 8009bb4:	4290      	cmp	r0, r2
 8009bb6:	d101      	bne.n	8009bbc <memcmp+0xe>
 8009bb8:	2000      	movs	r0, #0
 8009bba:	e005      	b.n	8009bc8 <memcmp+0x1a>
 8009bbc:	7803      	ldrb	r3, [r0, #0]
 8009bbe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009bc2:	42a3      	cmp	r3, r4
 8009bc4:	d001      	beq.n	8009bca <memcmp+0x1c>
 8009bc6:	1b18      	subs	r0, r3, r4
 8009bc8:	bd10      	pop	{r4, pc}
 8009bca:	3001      	adds	r0, #1
 8009bcc:	e7f2      	b.n	8009bb4 <memcmp+0x6>

08009bce <memset>:
 8009bce:	4402      	add	r2, r0
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d100      	bne.n	8009bd8 <memset+0xa>
 8009bd6:	4770      	bx	lr
 8009bd8:	f803 1b01 	strb.w	r1, [r3], #1
 8009bdc:	e7f9      	b.n	8009bd2 <memset+0x4>
	...

08009be0 <_close_r>:
 8009be0:	b538      	push	{r3, r4, r5, lr}
 8009be2:	4d06      	ldr	r5, [pc, #24]	; (8009bfc <_close_r+0x1c>)
 8009be4:	2300      	movs	r3, #0
 8009be6:	4604      	mov	r4, r0
 8009be8:	4608      	mov	r0, r1
 8009bea:	602b      	str	r3, [r5, #0]
 8009bec:	f7f6 fedf 	bl	80009ae <_close>
 8009bf0:	1c43      	adds	r3, r0, #1
 8009bf2:	d102      	bne.n	8009bfa <_close_r+0x1a>
 8009bf4:	682b      	ldr	r3, [r5, #0]
 8009bf6:	b103      	cbz	r3, 8009bfa <_close_r+0x1a>
 8009bf8:	6023      	str	r3, [r4, #0]
 8009bfa:	bd38      	pop	{r3, r4, r5, pc}
 8009bfc:	2001e534 	.word	0x2001e534

08009c00 <_lseek_r>:
 8009c00:	b538      	push	{r3, r4, r5, lr}
 8009c02:	4d07      	ldr	r5, [pc, #28]	; (8009c20 <_lseek_r+0x20>)
 8009c04:	4604      	mov	r4, r0
 8009c06:	4608      	mov	r0, r1
 8009c08:	4611      	mov	r1, r2
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	602a      	str	r2, [r5, #0]
 8009c0e:	461a      	mov	r2, r3
 8009c10:	f7f6 fef4 	bl	80009fc <_lseek>
 8009c14:	1c43      	adds	r3, r0, #1
 8009c16:	d102      	bne.n	8009c1e <_lseek_r+0x1e>
 8009c18:	682b      	ldr	r3, [r5, #0]
 8009c1a:	b103      	cbz	r3, 8009c1e <_lseek_r+0x1e>
 8009c1c:	6023      	str	r3, [r4, #0]
 8009c1e:	bd38      	pop	{r3, r4, r5, pc}
 8009c20:	2001e534 	.word	0x2001e534

08009c24 <_read_r>:
 8009c24:	b538      	push	{r3, r4, r5, lr}
 8009c26:	4d07      	ldr	r5, [pc, #28]	; (8009c44 <_read_r+0x20>)
 8009c28:	4604      	mov	r4, r0
 8009c2a:	4608      	mov	r0, r1
 8009c2c:	4611      	mov	r1, r2
 8009c2e:	2200      	movs	r2, #0
 8009c30:	602a      	str	r2, [r5, #0]
 8009c32:	461a      	mov	r2, r3
 8009c34:	f7f6 fe9e 	bl	8000974 <_read>
 8009c38:	1c43      	adds	r3, r0, #1
 8009c3a:	d102      	bne.n	8009c42 <_read_r+0x1e>
 8009c3c:	682b      	ldr	r3, [r5, #0]
 8009c3e:	b103      	cbz	r3, 8009c42 <_read_r+0x1e>
 8009c40:	6023      	str	r3, [r4, #0]
 8009c42:	bd38      	pop	{r3, r4, r5, pc}
 8009c44:	2001e534 	.word	0x2001e534

08009c48 <_sbrk_r>:
 8009c48:	b538      	push	{r3, r4, r5, lr}
 8009c4a:	4d06      	ldr	r5, [pc, #24]	; (8009c64 <_sbrk_r+0x1c>)
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	4604      	mov	r4, r0
 8009c50:	4608      	mov	r0, r1
 8009c52:	602b      	str	r3, [r5, #0]
 8009c54:	f7f6 fee0 	bl	8000a18 <_sbrk>
 8009c58:	1c43      	adds	r3, r0, #1
 8009c5a:	d102      	bne.n	8009c62 <_sbrk_r+0x1a>
 8009c5c:	682b      	ldr	r3, [r5, #0]
 8009c5e:	b103      	cbz	r3, 8009c62 <_sbrk_r+0x1a>
 8009c60:	6023      	str	r3, [r4, #0]
 8009c62:	bd38      	pop	{r3, r4, r5, pc}
 8009c64:	2001e534 	.word	0x2001e534

08009c68 <_write_r>:
 8009c68:	b538      	push	{r3, r4, r5, lr}
 8009c6a:	4d07      	ldr	r5, [pc, #28]	; (8009c88 <_write_r+0x20>)
 8009c6c:	4604      	mov	r4, r0
 8009c6e:	4608      	mov	r0, r1
 8009c70:	4611      	mov	r1, r2
 8009c72:	2200      	movs	r2, #0
 8009c74:	602a      	str	r2, [r5, #0]
 8009c76:	461a      	mov	r2, r3
 8009c78:	f7f6 fc78 	bl	800056c <_write>
 8009c7c:	1c43      	adds	r3, r0, #1
 8009c7e:	d102      	bne.n	8009c86 <_write_r+0x1e>
 8009c80:	682b      	ldr	r3, [r5, #0]
 8009c82:	b103      	cbz	r3, 8009c86 <_write_r+0x1e>
 8009c84:	6023      	str	r3, [r4, #0]
 8009c86:	bd38      	pop	{r3, r4, r5, pc}
 8009c88:	2001e534 	.word	0x2001e534

08009c8c <__errno>:
 8009c8c:	4b01      	ldr	r3, [pc, #4]	; (8009c94 <__errno+0x8>)
 8009c8e:	6818      	ldr	r0, [r3, #0]
 8009c90:	4770      	bx	lr
 8009c92:	bf00      	nop
 8009c94:	20000098 	.word	0x20000098

08009c98 <__libc_init_array>:
 8009c98:	b570      	push	{r4, r5, r6, lr}
 8009c9a:	4d0d      	ldr	r5, [pc, #52]	; (8009cd0 <__libc_init_array+0x38>)
 8009c9c:	4c0d      	ldr	r4, [pc, #52]	; (8009cd4 <__libc_init_array+0x3c>)
 8009c9e:	1b64      	subs	r4, r4, r5
 8009ca0:	10a4      	asrs	r4, r4, #2
 8009ca2:	2600      	movs	r6, #0
 8009ca4:	42a6      	cmp	r6, r4
 8009ca6:	d109      	bne.n	8009cbc <__libc_init_array+0x24>
 8009ca8:	4d0b      	ldr	r5, [pc, #44]	; (8009cd8 <__libc_init_array+0x40>)
 8009caa:	4c0c      	ldr	r4, [pc, #48]	; (8009cdc <__libc_init_array+0x44>)
 8009cac:	f000 fd46 	bl	800a73c <_init>
 8009cb0:	1b64      	subs	r4, r4, r5
 8009cb2:	10a4      	asrs	r4, r4, #2
 8009cb4:	2600      	movs	r6, #0
 8009cb6:	42a6      	cmp	r6, r4
 8009cb8:	d105      	bne.n	8009cc6 <__libc_init_array+0x2e>
 8009cba:	bd70      	pop	{r4, r5, r6, pc}
 8009cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cc0:	4798      	blx	r3
 8009cc2:	3601      	adds	r6, #1
 8009cc4:	e7ee      	b.n	8009ca4 <__libc_init_array+0xc>
 8009cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cca:	4798      	blx	r3
 8009ccc:	3601      	adds	r6, #1
 8009cce:	e7f2      	b.n	8009cb6 <__libc_init_array+0x1e>
 8009cd0:	0800ae78 	.word	0x0800ae78
 8009cd4:	0800ae78 	.word	0x0800ae78
 8009cd8:	0800ae78 	.word	0x0800ae78
 8009cdc:	0800ae7c 	.word	0x0800ae7c

08009ce0 <__retarget_lock_init_recursive>:
 8009ce0:	4770      	bx	lr

08009ce2 <__retarget_lock_acquire_recursive>:
 8009ce2:	4770      	bx	lr

08009ce4 <__retarget_lock_release_recursive>:
 8009ce4:	4770      	bx	lr

08009ce6 <memcpy>:
 8009ce6:	440a      	add	r2, r1
 8009ce8:	4291      	cmp	r1, r2
 8009cea:	f100 33ff 	add.w	r3, r0, #4294967295
 8009cee:	d100      	bne.n	8009cf2 <memcpy+0xc>
 8009cf0:	4770      	bx	lr
 8009cf2:	b510      	push	{r4, lr}
 8009cf4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cfc:	4291      	cmp	r1, r2
 8009cfe:	d1f9      	bne.n	8009cf4 <memcpy+0xe>
 8009d00:	bd10      	pop	{r4, pc}
	...

08009d04 <_free_r>:
 8009d04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d06:	2900      	cmp	r1, #0
 8009d08:	d044      	beq.n	8009d94 <_free_r+0x90>
 8009d0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d0e:	9001      	str	r0, [sp, #4]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	f1a1 0404 	sub.w	r4, r1, #4
 8009d16:	bfb8      	it	lt
 8009d18:	18e4      	addlt	r4, r4, r3
 8009d1a:	f7ff fe1d 	bl	8009958 <__malloc_lock>
 8009d1e:	4a1e      	ldr	r2, [pc, #120]	; (8009d98 <_free_r+0x94>)
 8009d20:	9801      	ldr	r0, [sp, #4]
 8009d22:	6813      	ldr	r3, [r2, #0]
 8009d24:	b933      	cbnz	r3, 8009d34 <_free_r+0x30>
 8009d26:	6063      	str	r3, [r4, #4]
 8009d28:	6014      	str	r4, [r2, #0]
 8009d2a:	b003      	add	sp, #12
 8009d2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d30:	f7ff be18 	b.w	8009964 <__malloc_unlock>
 8009d34:	42a3      	cmp	r3, r4
 8009d36:	d908      	bls.n	8009d4a <_free_r+0x46>
 8009d38:	6825      	ldr	r5, [r4, #0]
 8009d3a:	1961      	adds	r1, r4, r5
 8009d3c:	428b      	cmp	r3, r1
 8009d3e:	bf01      	itttt	eq
 8009d40:	6819      	ldreq	r1, [r3, #0]
 8009d42:	685b      	ldreq	r3, [r3, #4]
 8009d44:	1949      	addeq	r1, r1, r5
 8009d46:	6021      	streq	r1, [r4, #0]
 8009d48:	e7ed      	b.n	8009d26 <_free_r+0x22>
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	b10b      	cbz	r3, 8009d54 <_free_r+0x50>
 8009d50:	42a3      	cmp	r3, r4
 8009d52:	d9fa      	bls.n	8009d4a <_free_r+0x46>
 8009d54:	6811      	ldr	r1, [r2, #0]
 8009d56:	1855      	adds	r5, r2, r1
 8009d58:	42a5      	cmp	r5, r4
 8009d5a:	d10b      	bne.n	8009d74 <_free_r+0x70>
 8009d5c:	6824      	ldr	r4, [r4, #0]
 8009d5e:	4421      	add	r1, r4
 8009d60:	1854      	adds	r4, r2, r1
 8009d62:	42a3      	cmp	r3, r4
 8009d64:	6011      	str	r1, [r2, #0]
 8009d66:	d1e0      	bne.n	8009d2a <_free_r+0x26>
 8009d68:	681c      	ldr	r4, [r3, #0]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	6053      	str	r3, [r2, #4]
 8009d6e:	440c      	add	r4, r1
 8009d70:	6014      	str	r4, [r2, #0]
 8009d72:	e7da      	b.n	8009d2a <_free_r+0x26>
 8009d74:	d902      	bls.n	8009d7c <_free_r+0x78>
 8009d76:	230c      	movs	r3, #12
 8009d78:	6003      	str	r3, [r0, #0]
 8009d7a:	e7d6      	b.n	8009d2a <_free_r+0x26>
 8009d7c:	6825      	ldr	r5, [r4, #0]
 8009d7e:	1961      	adds	r1, r4, r5
 8009d80:	428b      	cmp	r3, r1
 8009d82:	bf04      	itt	eq
 8009d84:	6819      	ldreq	r1, [r3, #0]
 8009d86:	685b      	ldreq	r3, [r3, #4]
 8009d88:	6063      	str	r3, [r4, #4]
 8009d8a:	bf04      	itt	eq
 8009d8c:	1949      	addeq	r1, r1, r5
 8009d8e:	6021      	streq	r1, [r4, #0]
 8009d90:	6054      	str	r4, [r2, #4]
 8009d92:	e7ca      	b.n	8009d2a <_free_r+0x26>
 8009d94:	b003      	add	sp, #12
 8009d96:	bd30      	pop	{r4, r5, pc}
 8009d98:	2001e3f0 	.word	0x2001e3f0

08009d9c <__sfputc_r>:
 8009d9c:	6893      	ldr	r3, [r2, #8]
 8009d9e:	3b01      	subs	r3, #1
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	b410      	push	{r4}
 8009da4:	6093      	str	r3, [r2, #8]
 8009da6:	da08      	bge.n	8009dba <__sfputc_r+0x1e>
 8009da8:	6994      	ldr	r4, [r2, #24]
 8009daa:	42a3      	cmp	r3, r4
 8009dac:	db01      	blt.n	8009db2 <__sfputc_r+0x16>
 8009dae:	290a      	cmp	r1, #10
 8009db0:	d103      	bne.n	8009dba <__sfputc_r+0x1e>
 8009db2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009db6:	f000 bba7 	b.w	800a508 <__swbuf_r>
 8009dba:	6813      	ldr	r3, [r2, #0]
 8009dbc:	1c58      	adds	r0, r3, #1
 8009dbe:	6010      	str	r0, [r2, #0]
 8009dc0:	7019      	strb	r1, [r3, #0]
 8009dc2:	4608      	mov	r0, r1
 8009dc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009dc8:	4770      	bx	lr

08009dca <__sfputs_r>:
 8009dca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dcc:	4606      	mov	r6, r0
 8009dce:	460f      	mov	r7, r1
 8009dd0:	4614      	mov	r4, r2
 8009dd2:	18d5      	adds	r5, r2, r3
 8009dd4:	42ac      	cmp	r4, r5
 8009dd6:	d101      	bne.n	8009ddc <__sfputs_r+0x12>
 8009dd8:	2000      	movs	r0, #0
 8009dda:	e007      	b.n	8009dec <__sfputs_r+0x22>
 8009ddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009de0:	463a      	mov	r2, r7
 8009de2:	4630      	mov	r0, r6
 8009de4:	f7ff ffda 	bl	8009d9c <__sfputc_r>
 8009de8:	1c43      	adds	r3, r0, #1
 8009dea:	d1f3      	bne.n	8009dd4 <__sfputs_r+0xa>
 8009dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009df0 <_vfiprintf_r>:
 8009df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009df4:	460d      	mov	r5, r1
 8009df6:	b09d      	sub	sp, #116	; 0x74
 8009df8:	4614      	mov	r4, r2
 8009dfa:	4698      	mov	r8, r3
 8009dfc:	4606      	mov	r6, r0
 8009dfe:	b118      	cbz	r0, 8009e08 <_vfiprintf_r+0x18>
 8009e00:	6a03      	ldr	r3, [r0, #32]
 8009e02:	b90b      	cbnz	r3, 8009e08 <_vfiprintf_r+0x18>
 8009e04:	f7ff fe40 	bl	8009a88 <__sinit>
 8009e08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e0a:	07d9      	lsls	r1, r3, #31
 8009e0c:	d405      	bmi.n	8009e1a <_vfiprintf_r+0x2a>
 8009e0e:	89ab      	ldrh	r3, [r5, #12]
 8009e10:	059a      	lsls	r2, r3, #22
 8009e12:	d402      	bmi.n	8009e1a <_vfiprintf_r+0x2a>
 8009e14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e16:	f7ff ff64 	bl	8009ce2 <__retarget_lock_acquire_recursive>
 8009e1a:	89ab      	ldrh	r3, [r5, #12]
 8009e1c:	071b      	lsls	r3, r3, #28
 8009e1e:	d501      	bpl.n	8009e24 <_vfiprintf_r+0x34>
 8009e20:	692b      	ldr	r3, [r5, #16]
 8009e22:	b99b      	cbnz	r3, 8009e4c <_vfiprintf_r+0x5c>
 8009e24:	4629      	mov	r1, r5
 8009e26:	4630      	mov	r0, r6
 8009e28:	f000 fbac 	bl	800a584 <__swsetup_r>
 8009e2c:	b170      	cbz	r0, 8009e4c <_vfiprintf_r+0x5c>
 8009e2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e30:	07dc      	lsls	r4, r3, #31
 8009e32:	d504      	bpl.n	8009e3e <_vfiprintf_r+0x4e>
 8009e34:	f04f 30ff 	mov.w	r0, #4294967295
 8009e38:	b01d      	add	sp, #116	; 0x74
 8009e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e3e:	89ab      	ldrh	r3, [r5, #12]
 8009e40:	0598      	lsls	r0, r3, #22
 8009e42:	d4f7      	bmi.n	8009e34 <_vfiprintf_r+0x44>
 8009e44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e46:	f7ff ff4d 	bl	8009ce4 <__retarget_lock_release_recursive>
 8009e4a:	e7f3      	b.n	8009e34 <_vfiprintf_r+0x44>
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e50:	2320      	movs	r3, #32
 8009e52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e56:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e5a:	2330      	movs	r3, #48	; 0x30
 8009e5c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a010 <_vfiprintf_r+0x220>
 8009e60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e64:	f04f 0901 	mov.w	r9, #1
 8009e68:	4623      	mov	r3, r4
 8009e6a:	469a      	mov	sl, r3
 8009e6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e70:	b10a      	cbz	r2, 8009e76 <_vfiprintf_r+0x86>
 8009e72:	2a25      	cmp	r2, #37	; 0x25
 8009e74:	d1f9      	bne.n	8009e6a <_vfiprintf_r+0x7a>
 8009e76:	ebba 0b04 	subs.w	fp, sl, r4
 8009e7a:	d00b      	beq.n	8009e94 <_vfiprintf_r+0xa4>
 8009e7c:	465b      	mov	r3, fp
 8009e7e:	4622      	mov	r2, r4
 8009e80:	4629      	mov	r1, r5
 8009e82:	4630      	mov	r0, r6
 8009e84:	f7ff ffa1 	bl	8009dca <__sfputs_r>
 8009e88:	3001      	adds	r0, #1
 8009e8a:	f000 80a9 	beq.w	8009fe0 <_vfiprintf_r+0x1f0>
 8009e8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e90:	445a      	add	r2, fp
 8009e92:	9209      	str	r2, [sp, #36]	; 0x24
 8009e94:	f89a 3000 	ldrb.w	r3, [sl]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	f000 80a1 	beq.w	8009fe0 <_vfiprintf_r+0x1f0>
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ea4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ea8:	f10a 0a01 	add.w	sl, sl, #1
 8009eac:	9304      	str	r3, [sp, #16]
 8009eae:	9307      	str	r3, [sp, #28]
 8009eb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009eb4:	931a      	str	r3, [sp, #104]	; 0x68
 8009eb6:	4654      	mov	r4, sl
 8009eb8:	2205      	movs	r2, #5
 8009eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ebe:	4854      	ldr	r0, [pc, #336]	; (800a010 <_vfiprintf_r+0x220>)
 8009ec0:	f7f6 f986 	bl	80001d0 <memchr>
 8009ec4:	9a04      	ldr	r2, [sp, #16]
 8009ec6:	b9d8      	cbnz	r0, 8009f00 <_vfiprintf_r+0x110>
 8009ec8:	06d1      	lsls	r1, r2, #27
 8009eca:	bf44      	itt	mi
 8009ecc:	2320      	movmi	r3, #32
 8009ece:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ed2:	0713      	lsls	r3, r2, #28
 8009ed4:	bf44      	itt	mi
 8009ed6:	232b      	movmi	r3, #43	; 0x2b
 8009ed8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009edc:	f89a 3000 	ldrb.w	r3, [sl]
 8009ee0:	2b2a      	cmp	r3, #42	; 0x2a
 8009ee2:	d015      	beq.n	8009f10 <_vfiprintf_r+0x120>
 8009ee4:	9a07      	ldr	r2, [sp, #28]
 8009ee6:	4654      	mov	r4, sl
 8009ee8:	2000      	movs	r0, #0
 8009eea:	f04f 0c0a 	mov.w	ip, #10
 8009eee:	4621      	mov	r1, r4
 8009ef0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ef4:	3b30      	subs	r3, #48	; 0x30
 8009ef6:	2b09      	cmp	r3, #9
 8009ef8:	d94d      	bls.n	8009f96 <_vfiprintf_r+0x1a6>
 8009efa:	b1b0      	cbz	r0, 8009f2a <_vfiprintf_r+0x13a>
 8009efc:	9207      	str	r2, [sp, #28]
 8009efe:	e014      	b.n	8009f2a <_vfiprintf_r+0x13a>
 8009f00:	eba0 0308 	sub.w	r3, r0, r8
 8009f04:	fa09 f303 	lsl.w	r3, r9, r3
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	9304      	str	r3, [sp, #16]
 8009f0c:	46a2      	mov	sl, r4
 8009f0e:	e7d2      	b.n	8009eb6 <_vfiprintf_r+0xc6>
 8009f10:	9b03      	ldr	r3, [sp, #12]
 8009f12:	1d19      	adds	r1, r3, #4
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	9103      	str	r1, [sp, #12]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	bfbb      	ittet	lt
 8009f1c:	425b      	neglt	r3, r3
 8009f1e:	f042 0202 	orrlt.w	r2, r2, #2
 8009f22:	9307      	strge	r3, [sp, #28]
 8009f24:	9307      	strlt	r3, [sp, #28]
 8009f26:	bfb8      	it	lt
 8009f28:	9204      	strlt	r2, [sp, #16]
 8009f2a:	7823      	ldrb	r3, [r4, #0]
 8009f2c:	2b2e      	cmp	r3, #46	; 0x2e
 8009f2e:	d10c      	bne.n	8009f4a <_vfiprintf_r+0x15a>
 8009f30:	7863      	ldrb	r3, [r4, #1]
 8009f32:	2b2a      	cmp	r3, #42	; 0x2a
 8009f34:	d134      	bne.n	8009fa0 <_vfiprintf_r+0x1b0>
 8009f36:	9b03      	ldr	r3, [sp, #12]
 8009f38:	1d1a      	adds	r2, r3, #4
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	9203      	str	r2, [sp, #12]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	bfb8      	it	lt
 8009f42:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f46:	3402      	adds	r4, #2
 8009f48:	9305      	str	r3, [sp, #20]
 8009f4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a020 <_vfiprintf_r+0x230>
 8009f4e:	7821      	ldrb	r1, [r4, #0]
 8009f50:	2203      	movs	r2, #3
 8009f52:	4650      	mov	r0, sl
 8009f54:	f7f6 f93c 	bl	80001d0 <memchr>
 8009f58:	b138      	cbz	r0, 8009f6a <_vfiprintf_r+0x17a>
 8009f5a:	9b04      	ldr	r3, [sp, #16]
 8009f5c:	eba0 000a 	sub.w	r0, r0, sl
 8009f60:	2240      	movs	r2, #64	; 0x40
 8009f62:	4082      	lsls	r2, r0
 8009f64:	4313      	orrs	r3, r2
 8009f66:	3401      	adds	r4, #1
 8009f68:	9304      	str	r3, [sp, #16]
 8009f6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f6e:	4829      	ldr	r0, [pc, #164]	; (800a014 <_vfiprintf_r+0x224>)
 8009f70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f74:	2206      	movs	r2, #6
 8009f76:	f7f6 f92b 	bl	80001d0 <memchr>
 8009f7a:	2800      	cmp	r0, #0
 8009f7c:	d03f      	beq.n	8009ffe <_vfiprintf_r+0x20e>
 8009f7e:	4b26      	ldr	r3, [pc, #152]	; (800a018 <_vfiprintf_r+0x228>)
 8009f80:	bb1b      	cbnz	r3, 8009fca <_vfiprintf_r+0x1da>
 8009f82:	9b03      	ldr	r3, [sp, #12]
 8009f84:	3307      	adds	r3, #7
 8009f86:	f023 0307 	bic.w	r3, r3, #7
 8009f8a:	3308      	adds	r3, #8
 8009f8c:	9303      	str	r3, [sp, #12]
 8009f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f90:	443b      	add	r3, r7
 8009f92:	9309      	str	r3, [sp, #36]	; 0x24
 8009f94:	e768      	b.n	8009e68 <_vfiprintf_r+0x78>
 8009f96:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f9a:	460c      	mov	r4, r1
 8009f9c:	2001      	movs	r0, #1
 8009f9e:	e7a6      	b.n	8009eee <_vfiprintf_r+0xfe>
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	3401      	adds	r4, #1
 8009fa4:	9305      	str	r3, [sp, #20]
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	f04f 0c0a 	mov.w	ip, #10
 8009fac:	4620      	mov	r0, r4
 8009fae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fb2:	3a30      	subs	r2, #48	; 0x30
 8009fb4:	2a09      	cmp	r2, #9
 8009fb6:	d903      	bls.n	8009fc0 <_vfiprintf_r+0x1d0>
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d0c6      	beq.n	8009f4a <_vfiprintf_r+0x15a>
 8009fbc:	9105      	str	r1, [sp, #20]
 8009fbe:	e7c4      	b.n	8009f4a <_vfiprintf_r+0x15a>
 8009fc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fc4:	4604      	mov	r4, r0
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	e7f0      	b.n	8009fac <_vfiprintf_r+0x1bc>
 8009fca:	ab03      	add	r3, sp, #12
 8009fcc:	9300      	str	r3, [sp, #0]
 8009fce:	462a      	mov	r2, r5
 8009fd0:	4b12      	ldr	r3, [pc, #72]	; (800a01c <_vfiprintf_r+0x22c>)
 8009fd2:	a904      	add	r1, sp, #16
 8009fd4:	4630      	mov	r0, r6
 8009fd6:	f3af 8000 	nop.w
 8009fda:	4607      	mov	r7, r0
 8009fdc:	1c78      	adds	r0, r7, #1
 8009fde:	d1d6      	bne.n	8009f8e <_vfiprintf_r+0x19e>
 8009fe0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fe2:	07d9      	lsls	r1, r3, #31
 8009fe4:	d405      	bmi.n	8009ff2 <_vfiprintf_r+0x202>
 8009fe6:	89ab      	ldrh	r3, [r5, #12]
 8009fe8:	059a      	lsls	r2, r3, #22
 8009fea:	d402      	bmi.n	8009ff2 <_vfiprintf_r+0x202>
 8009fec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fee:	f7ff fe79 	bl	8009ce4 <__retarget_lock_release_recursive>
 8009ff2:	89ab      	ldrh	r3, [r5, #12]
 8009ff4:	065b      	lsls	r3, r3, #25
 8009ff6:	f53f af1d 	bmi.w	8009e34 <_vfiprintf_r+0x44>
 8009ffa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ffc:	e71c      	b.n	8009e38 <_vfiprintf_r+0x48>
 8009ffe:	ab03      	add	r3, sp, #12
 800a000:	9300      	str	r3, [sp, #0]
 800a002:	462a      	mov	r2, r5
 800a004:	4b05      	ldr	r3, [pc, #20]	; (800a01c <_vfiprintf_r+0x22c>)
 800a006:	a904      	add	r1, sp, #16
 800a008:	4630      	mov	r0, r6
 800a00a:	f000 f879 	bl	800a100 <_printf_i>
 800a00e:	e7e4      	b.n	8009fda <_vfiprintf_r+0x1ea>
 800a010:	0800ae3c 	.word	0x0800ae3c
 800a014:	0800ae46 	.word	0x0800ae46
 800a018:	00000000 	.word	0x00000000
 800a01c:	08009dcb 	.word	0x08009dcb
 800a020:	0800ae42 	.word	0x0800ae42

0800a024 <_printf_common>:
 800a024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a028:	4616      	mov	r6, r2
 800a02a:	4699      	mov	r9, r3
 800a02c:	688a      	ldr	r2, [r1, #8]
 800a02e:	690b      	ldr	r3, [r1, #16]
 800a030:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a034:	4293      	cmp	r3, r2
 800a036:	bfb8      	it	lt
 800a038:	4613      	movlt	r3, r2
 800a03a:	6033      	str	r3, [r6, #0]
 800a03c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a040:	4607      	mov	r7, r0
 800a042:	460c      	mov	r4, r1
 800a044:	b10a      	cbz	r2, 800a04a <_printf_common+0x26>
 800a046:	3301      	adds	r3, #1
 800a048:	6033      	str	r3, [r6, #0]
 800a04a:	6823      	ldr	r3, [r4, #0]
 800a04c:	0699      	lsls	r1, r3, #26
 800a04e:	bf42      	ittt	mi
 800a050:	6833      	ldrmi	r3, [r6, #0]
 800a052:	3302      	addmi	r3, #2
 800a054:	6033      	strmi	r3, [r6, #0]
 800a056:	6825      	ldr	r5, [r4, #0]
 800a058:	f015 0506 	ands.w	r5, r5, #6
 800a05c:	d106      	bne.n	800a06c <_printf_common+0x48>
 800a05e:	f104 0a19 	add.w	sl, r4, #25
 800a062:	68e3      	ldr	r3, [r4, #12]
 800a064:	6832      	ldr	r2, [r6, #0]
 800a066:	1a9b      	subs	r3, r3, r2
 800a068:	42ab      	cmp	r3, r5
 800a06a:	dc26      	bgt.n	800a0ba <_printf_common+0x96>
 800a06c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a070:	1e13      	subs	r3, r2, #0
 800a072:	6822      	ldr	r2, [r4, #0]
 800a074:	bf18      	it	ne
 800a076:	2301      	movne	r3, #1
 800a078:	0692      	lsls	r2, r2, #26
 800a07a:	d42b      	bmi.n	800a0d4 <_printf_common+0xb0>
 800a07c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a080:	4649      	mov	r1, r9
 800a082:	4638      	mov	r0, r7
 800a084:	47c0      	blx	r8
 800a086:	3001      	adds	r0, #1
 800a088:	d01e      	beq.n	800a0c8 <_printf_common+0xa4>
 800a08a:	6823      	ldr	r3, [r4, #0]
 800a08c:	6922      	ldr	r2, [r4, #16]
 800a08e:	f003 0306 	and.w	r3, r3, #6
 800a092:	2b04      	cmp	r3, #4
 800a094:	bf02      	ittt	eq
 800a096:	68e5      	ldreq	r5, [r4, #12]
 800a098:	6833      	ldreq	r3, [r6, #0]
 800a09a:	1aed      	subeq	r5, r5, r3
 800a09c:	68a3      	ldr	r3, [r4, #8]
 800a09e:	bf0c      	ite	eq
 800a0a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a0a4:	2500      	movne	r5, #0
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	bfc4      	itt	gt
 800a0aa:	1a9b      	subgt	r3, r3, r2
 800a0ac:	18ed      	addgt	r5, r5, r3
 800a0ae:	2600      	movs	r6, #0
 800a0b0:	341a      	adds	r4, #26
 800a0b2:	42b5      	cmp	r5, r6
 800a0b4:	d11a      	bne.n	800a0ec <_printf_common+0xc8>
 800a0b6:	2000      	movs	r0, #0
 800a0b8:	e008      	b.n	800a0cc <_printf_common+0xa8>
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	4652      	mov	r2, sl
 800a0be:	4649      	mov	r1, r9
 800a0c0:	4638      	mov	r0, r7
 800a0c2:	47c0      	blx	r8
 800a0c4:	3001      	adds	r0, #1
 800a0c6:	d103      	bne.n	800a0d0 <_printf_common+0xac>
 800a0c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0d0:	3501      	adds	r5, #1
 800a0d2:	e7c6      	b.n	800a062 <_printf_common+0x3e>
 800a0d4:	18e1      	adds	r1, r4, r3
 800a0d6:	1c5a      	adds	r2, r3, #1
 800a0d8:	2030      	movs	r0, #48	; 0x30
 800a0da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a0de:	4422      	add	r2, r4
 800a0e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a0e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a0e8:	3302      	adds	r3, #2
 800a0ea:	e7c7      	b.n	800a07c <_printf_common+0x58>
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	4622      	mov	r2, r4
 800a0f0:	4649      	mov	r1, r9
 800a0f2:	4638      	mov	r0, r7
 800a0f4:	47c0      	blx	r8
 800a0f6:	3001      	adds	r0, #1
 800a0f8:	d0e6      	beq.n	800a0c8 <_printf_common+0xa4>
 800a0fa:	3601      	adds	r6, #1
 800a0fc:	e7d9      	b.n	800a0b2 <_printf_common+0x8e>
	...

0800a100 <_printf_i>:
 800a100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a104:	7e0f      	ldrb	r7, [r1, #24]
 800a106:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a108:	2f78      	cmp	r7, #120	; 0x78
 800a10a:	4691      	mov	r9, r2
 800a10c:	4680      	mov	r8, r0
 800a10e:	460c      	mov	r4, r1
 800a110:	469a      	mov	sl, r3
 800a112:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a116:	d807      	bhi.n	800a128 <_printf_i+0x28>
 800a118:	2f62      	cmp	r7, #98	; 0x62
 800a11a:	d80a      	bhi.n	800a132 <_printf_i+0x32>
 800a11c:	2f00      	cmp	r7, #0
 800a11e:	f000 80d4 	beq.w	800a2ca <_printf_i+0x1ca>
 800a122:	2f58      	cmp	r7, #88	; 0x58
 800a124:	f000 80c0 	beq.w	800a2a8 <_printf_i+0x1a8>
 800a128:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a12c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a130:	e03a      	b.n	800a1a8 <_printf_i+0xa8>
 800a132:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a136:	2b15      	cmp	r3, #21
 800a138:	d8f6      	bhi.n	800a128 <_printf_i+0x28>
 800a13a:	a101      	add	r1, pc, #4	; (adr r1, 800a140 <_printf_i+0x40>)
 800a13c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a140:	0800a199 	.word	0x0800a199
 800a144:	0800a1ad 	.word	0x0800a1ad
 800a148:	0800a129 	.word	0x0800a129
 800a14c:	0800a129 	.word	0x0800a129
 800a150:	0800a129 	.word	0x0800a129
 800a154:	0800a129 	.word	0x0800a129
 800a158:	0800a1ad 	.word	0x0800a1ad
 800a15c:	0800a129 	.word	0x0800a129
 800a160:	0800a129 	.word	0x0800a129
 800a164:	0800a129 	.word	0x0800a129
 800a168:	0800a129 	.word	0x0800a129
 800a16c:	0800a2b1 	.word	0x0800a2b1
 800a170:	0800a1d9 	.word	0x0800a1d9
 800a174:	0800a26b 	.word	0x0800a26b
 800a178:	0800a129 	.word	0x0800a129
 800a17c:	0800a129 	.word	0x0800a129
 800a180:	0800a2d3 	.word	0x0800a2d3
 800a184:	0800a129 	.word	0x0800a129
 800a188:	0800a1d9 	.word	0x0800a1d9
 800a18c:	0800a129 	.word	0x0800a129
 800a190:	0800a129 	.word	0x0800a129
 800a194:	0800a273 	.word	0x0800a273
 800a198:	682b      	ldr	r3, [r5, #0]
 800a19a:	1d1a      	adds	r2, r3, #4
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	602a      	str	r2, [r5, #0]
 800a1a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e09f      	b.n	800a2ec <_printf_i+0x1ec>
 800a1ac:	6820      	ldr	r0, [r4, #0]
 800a1ae:	682b      	ldr	r3, [r5, #0]
 800a1b0:	0607      	lsls	r7, r0, #24
 800a1b2:	f103 0104 	add.w	r1, r3, #4
 800a1b6:	6029      	str	r1, [r5, #0]
 800a1b8:	d501      	bpl.n	800a1be <_printf_i+0xbe>
 800a1ba:	681e      	ldr	r6, [r3, #0]
 800a1bc:	e003      	b.n	800a1c6 <_printf_i+0xc6>
 800a1be:	0646      	lsls	r6, r0, #25
 800a1c0:	d5fb      	bpl.n	800a1ba <_printf_i+0xba>
 800a1c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a1c6:	2e00      	cmp	r6, #0
 800a1c8:	da03      	bge.n	800a1d2 <_printf_i+0xd2>
 800a1ca:	232d      	movs	r3, #45	; 0x2d
 800a1cc:	4276      	negs	r6, r6
 800a1ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1d2:	485a      	ldr	r0, [pc, #360]	; (800a33c <_printf_i+0x23c>)
 800a1d4:	230a      	movs	r3, #10
 800a1d6:	e012      	b.n	800a1fe <_printf_i+0xfe>
 800a1d8:	682b      	ldr	r3, [r5, #0]
 800a1da:	6820      	ldr	r0, [r4, #0]
 800a1dc:	1d19      	adds	r1, r3, #4
 800a1de:	6029      	str	r1, [r5, #0]
 800a1e0:	0605      	lsls	r5, r0, #24
 800a1e2:	d501      	bpl.n	800a1e8 <_printf_i+0xe8>
 800a1e4:	681e      	ldr	r6, [r3, #0]
 800a1e6:	e002      	b.n	800a1ee <_printf_i+0xee>
 800a1e8:	0641      	lsls	r1, r0, #25
 800a1ea:	d5fb      	bpl.n	800a1e4 <_printf_i+0xe4>
 800a1ec:	881e      	ldrh	r6, [r3, #0]
 800a1ee:	4853      	ldr	r0, [pc, #332]	; (800a33c <_printf_i+0x23c>)
 800a1f0:	2f6f      	cmp	r7, #111	; 0x6f
 800a1f2:	bf0c      	ite	eq
 800a1f4:	2308      	moveq	r3, #8
 800a1f6:	230a      	movne	r3, #10
 800a1f8:	2100      	movs	r1, #0
 800a1fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a1fe:	6865      	ldr	r5, [r4, #4]
 800a200:	60a5      	str	r5, [r4, #8]
 800a202:	2d00      	cmp	r5, #0
 800a204:	bfa2      	ittt	ge
 800a206:	6821      	ldrge	r1, [r4, #0]
 800a208:	f021 0104 	bicge.w	r1, r1, #4
 800a20c:	6021      	strge	r1, [r4, #0]
 800a20e:	b90e      	cbnz	r6, 800a214 <_printf_i+0x114>
 800a210:	2d00      	cmp	r5, #0
 800a212:	d04b      	beq.n	800a2ac <_printf_i+0x1ac>
 800a214:	4615      	mov	r5, r2
 800a216:	fbb6 f1f3 	udiv	r1, r6, r3
 800a21a:	fb03 6711 	mls	r7, r3, r1, r6
 800a21e:	5dc7      	ldrb	r7, [r0, r7]
 800a220:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a224:	4637      	mov	r7, r6
 800a226:	42bb      	cmp	r3, r7
 800a228:	460e      	mov	r6, r1
 800a22a:	d9f4      	bls.n	800a216 <_printf_i+0x116>
 800a22c:	2b08      	cmp	r3, #8
 800a22e:	d10b      	bne.n	800a248 <_printf_i+0x148>
 800a230:	6823      	ldr	r3, [r4, #0]
 800a232:	07de      	lsls	r6, r3, #31
 800a234:	d508      	bpl.n	800a248 <_printf_i+0x148>
 800a236:	6923      	ldr	r3, [r4, #16]
 800a238:	6861      	ldr	r1, [r4, #4]
 800a23a:	4299      	cmp	r1, r3
 800a23c:	bfde      	ittt	le
 800a23e:	2330      	movle	r3, #48	; 0x30
 800a240:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a244:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a248:	1b52      	subs	r2, r2, r5
 800a24a:	6122      	str	r2, [r4, #16]
 800a24c:	f8cd a000 	str.w	sl, [sp]
 800a250:	464b      	mov	r3, r9
 800a252:	aa03      	add	r2, sp, #12
 800a254:	4621      	mov	r1, r4
 800a256:	4640      	mov	r0, r8
 800a258:	f7ff fee4 	bl	800a024 <_printf_common>
 800a25c:	3001      	adds	r0, #1
 800a25e:	d14a      	bne.n	800a2f6 <_printf_i+0x1f6>
 800a260:	f04f 30ff 	mov.w	r0, #4294967295
 800a264:	b004      	add	sp, #16
 800a266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a26a:	6823      	ldr	r3, [r4, #0]
 800a26c:	f043 0320 	orr.w	r3, r3, #32
 800a270:	6023      	str	r3, [r4, #0]
 800a272:	4833      	ldr	r0, [pc, #204]	; (800a340 <_printf_i+0x240>)
 800a274:	2778      	movs	r7, #120	; 0x78
 800a276:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a27a:	6823      	ldr	r3, [r4, #0]
 800a27c:	6829      	ldr	r1, [r5, #0]
 800a27e:	061f      	lsls	r7, r3, #24
 800a280:	f851 6b04 	ldr.w	r6, [r1], #4
 800a284:	d402      	bmi.n	800a28c <_printf_i+0x18c>
 800a286:	065f      	lsls	r7, r3, #25
 800a288:	bf48      	it	mi
 800a28a:	b2b6      	uxthmi	r6, r6
 800a28c:	07df      	lsls	r7, r3, #31
 800a28e:	bf48      	it	mi
 800a290:	f043 0320 	orrmi.w	r3, r3, #32
 800a294:	6029      	str	r1, [r5, #0]
 800a296:	bf48      	it	mi
 800a298:	6023      	strmi	r3, [r4, #0]
 800a29a:	b91e      	cbnz	r6, 800a2a4 <_printf_i+0x1a4>
 800a29c:	6823      	ldr	r3, [r4, #0]
 800a29e:	f023 0320 	bic.w	r3, r3, #32
 800a2a2:	6023      	str	r3, [r4, #0]
 800a2a4:	2310      	movs	r3, #16
 800a2a6:	e7a7      	b.n	800a1f8 <_printf_i+0xf8>
 800a2a8:	4824      	ldr	r0, [pc, #144]	; (800a33c <_printf_i+0x23c>)
 800a2aa:	e7e4      	b.n	800a276 <_printf_i+0x176>
 800a2ac:	4615      	mov	r5, r2
 800a2ae:	e7bd      	b.n	800a22c <_printf_i+0x12c>
 800a2b0:	682b      	ldr	r3, [r5, #0]
 800a2b2:	6826      	ldr	r6, [r4, #0]
 800a2b4:	6961      	ldr	r1, [r4, #20]
 800a2b6:	1d18      	adds	r0, r3, #4
 800a2b8:	6028      	str	r0, [r5, #0]
 800a2ba:	0635      	lsls	r5, r6, #24
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	d501      	bpl.n	800a2c4 <_printf_i+0x1c4>
 800a2c0:	6019      	str	r1, [r3, #0]
 800a2c2:	e002      	b.n	800a2ca <_printf_i+0x1ca>
 800a2c4:	0670      	lsls	r0, r6, #25
 800a2c6:	d5fb      	bpl.n	800a2c0 <_printf_i+0x1c0>
 800a2c8:	8019      	strh	r1, [r3, #0]
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	6123      	str	r3, [r4, #16]
 800a2ce:	4615      	mov	r5, r2
 800a2d0:	e7bc      	b.n	800a24c <_printf_i+0x14c>
 800a2d2:	682b      	ldr	r3, [r5, #0]
 800a2d4:	1d1a      	adds	r2, r3, #4
 800a2d6:	602a      	str	r2, [r5, #0]
 800a2d8:	681d      	ldr	r5, [r3, #0]
 800a2da:	6862      	ldr	r2, [r4, #4]
 800a2dc:	2100      	movs	r1, #0
 800a2de:	4628      	mov	r0, r5
 800a2e0:	f7f5 ff76 	bl	80001d0 <memchr>
 800a2e4:	b108      	cbz	r0, 800a2ea <_printf_i+0x1ea>
 800a2e6:	1b40      	subs	r0, r0, r5
 800a2e8:	6060      	str	r0, [r4, #4]
 800a2ea:	6863      	ldr	r3, [r4, #4]
 800a2ec:	6123      	str	r3, [r4, #16]
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2f4:	e7aa      	b.n	800a24c <_printf_i+0x14c>
 800a2f6:	6923      	ldr	r3, [r4, #16]
 800a2f8:	462a      	mov	r2, r5
 800a2fa:	4649      	mov	r1, r9
 800a2fc:	4640      	mov	r0, r8
 800a2fe:	47d0      	blx	sl
 800a300:	3001      	adds	r0, #1
 800a302:	d0ad      	beq.n	800a260 <_printf_i+0x160>
 800a304:	6823      	ldr	r3, [r4, #0]
 800a306:	079b      	lsls	r3, r3, #30
 800a308:	d413      	bmi.n	800a332 <_printf_i+0x232>
 800a30a:	68e0      	ldr	r0, [r4, #12]
 800a30c:	9b03      	ldr	r3, [sp, #12]
 800a30e:	4298      	cmp	r0, r3
 800a310:	bfb8      	it	lt
 800a312:	4618      	movlt	r0, r3
 800a314:	e7a6      	b.n	800a264 <_printf_i+0x164>
 800a316:	2301      	movs	r3, #1
 800a318:	4632      	mov	r2, r6
 800a31a:	4649      	mov	r1, r9
 800a31c:	4640      	mov	r0, r8
 800a31e:	47d0      	blx	sl
 800a320:	3001      	adds	r0, #1
 800a322:	d09d      	beq.n	800a260 <_printf_i+0x160>
 800a324:	3501      	adds	r5, #1
 800a326:	68e3      	ldr	r3, [r4, #12]
 800a328:	9903      	ldr	r1, [sp, #12]
 800a32a:	1a5b      	subs	r3, r3, r1
 800a32c:	42ab      	cmp	r3, r5
 800a32e:	dcf2      	bgt.n	800a316 <_printf_i+0x216>
 800a330:	e7eb      	b.n	800a30a <_printf_i+0x20a>
 800a332:	2500      	movs	r5, #0
 800a334:	f104 0619 	add.w	r6, r4, #25
 800a338:	e7f5      	b.n	800a326 <_printf_i+0x226>
 800a33a:	bf00      	nop
 800a33c:	0800ae4d 	.word	0x0800ae4d
 800a340:	0800ae5e 	.word	0x0800ae5e

0800a344 <__sflush_r>:
 800a344:	898a      	ldrh	r2, [r1, #12]
 800a346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a34a:	4605      	mov	r5, r0
 800a34c:	0710      	lsls	r0, r2, #28
 800a34e:	460c      	mov	r4, r1
 800a350:	d458      	bmi.n	800a404 <__sflush_r+0xc0>
 800a352:	684b      	ldr	r3, [r1, #4]
 800a354:	2b00      	cmp	r3, #0
 800a356:	dc05      	bgt.n	800a364 <__sflush_r+0x20>
 800a358:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	dc02      	bgt.n	800a364 <__sflush_r+0x20>
 800a35e:	2000      	movs	r0, #0
 800a360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a364:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a366:	2e00      	cmp	r6, #0
 800a368:	d0f9      	beq.n	800a35e <__sflush_r+0x1a>
 800a36a:	2300      	movs	r3, #0
 800a36c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a370:	682f      	ldr	r7, [r5, #0]
 800a372:	6a21      	ldr	r1, [r4, #32]
 800a374:	602b      	str	r3, [r5, #0]
 800a376:	d032      	beq.n	800a3de <__sflush_r+0x9a>
 800a378:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a37a:	89a3      	ldrh	r3, [r4, #12]
 800a37c:	075a      	lsls	r2, r3, #29
 800a37e:	d505      	bpl.n	800a38c <__sflush_r+0x48>
 800a380:	6863      	ldr	r3, [r4, #4]
 800a382:	1ac0      	subs	r0, r0, r3
 800a384:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a386:	b10b      	cbz	r3, 800a38c <__sflush_r+0x48>
 800a388:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a38a:	1ac0      	subs	r0, r0, r3
 800a38c:	2300      	movs	r3, #0
 800a38e:	4602      	mov	r2, r0
 800a390:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a392:	6a21      	ldr	r1, [r4, #32]
 800a394:	4628      	mov	r0, r5
 800a396:	47b0      	blx	r6
 800a398:	1c43      	adds	r3, r0, #1
 800a39a:	89a3      	ldrh	r3, [r4, #12]
 800a39c:	d106      	bne.n	800a3ac <__sflush_r+0x68>
 800a39e:	6829      	ldr	r1, [r5, #0]
 800a3a0:	291d      	cmp	r1, #29
 800a3a2:	d82b      	bhi.n	800a3fc <__sflush_r+0xb8>
 800a3a4:	4a29      	ldr	r2, [pc, #164]	; (800a44c <__sflush_r+0x108>)
 800a3a6:	410a      	asrs	r2, r1
 800a3a8:	07d6      	lsls	r6, r2, #31
 800a3aa:	d427      	bmi.n	800a3fc <__sflush_r+0xb8>
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	6062      	str	r2, [r4, #4]
 800a3b0:	04d9      	lsls	r1, r3, #19
 800a3b2:	6922      	ldr	r2, [r4, #16]
 800a3b4:	6022      	str	r2, [r4, #0]
 800a3b6:	d504      	bpl.n	800a3c2 <__sflush_r+0x7e>
 800a3b8:	1c42      	adds	r2, r0, #1
 800a3ba:	d101      	bne.n	800a3c0 <__sflush_r+0x7c>
 800a3bc:	682b      	ldr	r3, [r5, #0]
 800a3be:	b903      	cbnz	r3, 800a3c2 <__sflush_r+0x7e>
 800a3c0:	6560      	str	r0, [r4, #84]	; 0x54
 800a3c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3c4:	602f      	str	r7, [r5, #0]
 800a3c6:	2900      	cmp	r1, #0
 800a3c8:	d0c9      	beq.n	800a35e <__sflush_r+0x1a>
 800a3ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3ce:	4299      	cmp	r1, r3
 800a3d0:	d002      	beq.n	800a3d8 <__sflush_r+0x94>
 800a3d2:	4628      	mov	r0, r5
 800a3d4:	f7ff fc96 	bl	8009d04 <_free_r>
 800a3d8:	2000      	movs	r0, #0
 800a3da:	6360      	str	r0, [r4, #52]	; 0x34
 800a3dc:	e7c0      	b.n	800a360 <__sflush_r+0x1c>
 800a3de:	2301      	movs	r3, #1
 800a3e0:	4628      	mov	r0, r5
 800a3e2:	47b0      	blx	r6
 800a3e4:	1c41      	adds	r1, r0, #1
 800a3e6:	d1c8      	bne.n	800a37a <__sflush_r+0x36>
 800a3e8:	682b      	ldr	r3, [r5, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d0c5      	beq.n	800a37a <__sflush_r+0x36>
 800a3ee:	2b1d      	cmp	r3, #29
 800a3f0:	d001      	beq.n	800a3f6 <__sflush_r+0xb2>
 800a3f2:	2b16      	cmp	r3, #22
 800a3f4:	d101      	bne.n	800a3fa <__sflush_r+0xb6>
 800a3f6:	602f      	str	r7, [r5, #0]
 800a3f8:	e7b1      	b.n	800a35e <__sflush_r+0x1a>
 800a3fa:	89a3      	ldrh	r3, [r4, #12]
 800a3fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a400:	81a3      	strh	r3, [r4, #12]
 800a402:	e7ad      	b.n	800a360 <__sflush_r+0x1c>
 800a404:	690f      	ldr	r7, [r1, #16]
 800a406:	2f00      	cmp	r7, #0
 800a408:	d0a9      	beq.n	800a35e <__sflush_r+0x1a>
 800a40a:	0793      	lsls	r3, r2, #30
 800a40c:	680e      	ldr	r6, [r1, #0]
 800a40e:	bf08      	it	eq
 800a410:	694b      	ldreq	r3, [r1, #20]
 800a412:	600f      	str	r7, [r1, #0]
 800a414:	bf18      	it	ne
 800a416:	2300      	movne	r3, #0
 800a418:	eba6 0807 	sub.w	r8, r6, r7
 800a41c:	608b      	str	r3, [r1, #8]
 800a41e:	f1b8 0f00 	cmp.w	r8, #0
 800a422:	dd9c      	ble.n	800a35e <__sflush_r+0x1a>
 800a424:	6a21      	ldr	r1, [r4, #32]
 800a426:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a428:	4643      	mov	r3, r8
 800a42a:	463a      	mov	r2, r7
 800a42c:	4628      	mov	r0, r5
 800a42e:	47b0      	blx	r6
 800a430:	2800      	cmp	r0, #0
 800a432:	dc06      	bgt.n	800a442 <__sflush_r+0xfe>
 800a434:	89a3      	ldrh	r3, [r4, #12]
 800a436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a43a:	81a3      	strh	r3, [r4, #12]
 800a43c:	f04f 30ff 	mov.w	r0, #4294967295
 800a440:	e78e      	b.n	800a360 <__sflush_r+0x1c>
 800a442:	4407      	add	r7, r0
 800a444:	eba8 0800 	sub.w	r8, r8, r0
 800a448:	e7e9      	b.n	800a41e <__sflush_r+0xda>
 800a44a:	bf00      	nop
 800a44c:	dfbffffe 	.word	0xdfbffffe

0800a450 <_fflush_r>:
 800a450:	b538      	push	{r3, r4, r5, lr}
 800a452:	690b      	ldr	r3, [r1, #16]
 800a454:	4605      	mov	r5, r0
 800a456:	460c      	mov	r4, r1
 800a458:	b913      	cbnz	r3, 800a460 <_fflush_r+0x10>
 800a45a:	2500      	movs	r5, #0
 800a45c:	4628      	mov	r0, r5
 800a45e:	bd38      	pop	{r3, r4, r5, pc}
 800a460:	b118      	cbz	r0, 800a46a <_fflush_r+0x1a>
 800a462:	6a03      	ldr	r3, [r0, #32]
 800a464:	b90b      	cbnz	r3, 800a46a <_fflush_r+0x1a>
 800a466:	f7ff fb0f 	bl	8009a88 <__sinit>
 800a46a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d0f3      	beq.n	800a45a <_fflush_r+0xa>
 800a472:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a474:	07d0      	lsls	r0, r2, #31
 800a476:	d404      	bmi.n	800a482 <_fflush_r+0x32>
 800a478:	0599      	lsls	r1, r3, #22
 800a47a:	d402      	bmi.n	800a482 <_fflush_r+0x32>
 800a47c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a47e:	f7ff fc30 	bl	8009ce2 <__retarget_lock_acquire_recursive>
 800a482:	4628      	mov	r0, r5
 800a484:	4621      	mov	r1, r4
 800a486:	f7ff ff5d 	bl	800a344 <__sflush_r>
 800a48a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a48c:	07da      	lsls	r2, r3, #31
 800a48e:	4605      	mov	r5, r0
 800a490:	d4e4      	bmi.n	800a45c <_fflush_r+0xc>
 800a492:	89a3      	ldrh	r3, [r4, #12]
 800a494:	059b      	lsls	r3, r3, #22
 800a496:	d4e1      	bmi.n	800a45c <_fflush_r+0xc>
 800a498:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a49a:	f7ff fc23 	bl	8009ce4 <__retarget_lock_release_recursive>
 800a49e:	e7dd      	b.n	800a45c <_fflush_r+0xc>

0800a4a0 <_putc_r>:
 800a4a0:	b570      	push	{r4, r5, r6, lr}
 800a4a2:	460d      	mov	r5, r1
 800a4a4:	4614      	mov	r4, r2
 800a4a6:	4606      	mov	r6, r0
 800a4a8:	b118      	cbz	r0, 800a4b2 <_putc_r+0x12>
 800a4aa:	6a03      	ldr	r3, [r0, #32]
 800a4ac:	b90b      	cbnz	r3, 800a4b2 <_putc_r+0x12>
 800a4ae:	f7ff faeb 	bl	8009a88 <__sinit>
 800a4b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4b4:	07d8      	lsls	r0, r3, #31
 800a4b6:	d405      	bmi.n	800a4c4 <_putc_r+0x24>
 800a4b8:	89a3      	ldrh	r3, [r4, #12]
 800a4ba:	0599      	lsls	r1, r3, #22
 800a4bc:	d402      	bmi.n	800a4c4 <_putc_r+0x24>
 800a4be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4c0:	f7ff fc0f 	bl	8009ce2 <__retarget_lock_acquire_recursive>
 800a4c4:	68a3      	ldr	r3, [r4, #8]
 800a4c6:	3b01      	subs	r3, #1
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	60a3      	str	r3, [r4, #8]
 800a4cc:	da05      	bge.n	800a4da <_putc_r+0x3a>
 800a4ce:	69a2      	ldr	r2, [r4, #24]
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	db12      	blt.n	800a4fa <_putc_r+0x5a>
 800a4d4:	b2eb      	uxtb	r3, r5
 800a4d6:	2b0a      	cmp	r3, #10
 800a4d8:	d00f      	beq.n	800a4fa <_putc_r+0x5a>
 800a4da:	6823      	ldr	r3, [r4, #0]
 800a4dc:	1c5a      	adds	r2, r3, #1
 800a4de:	6022      	str	r2, [r4, #0]
 800a4e0:	701d      	strb	r5, [r3, #0]
 800a4e2:	b2ed      	uxtb	r5, r5
 800a4e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4e6:	07da      	lsls	r2, r3, #31
 800a4e8:	d405      	bmi.n	800a4f6 <_putc_r+0x56>
 800a4ea:	89a3      	ldrh	r3, [r4, #12]
 800a4ec:	059b      	lsls	r3, r3, #22
 800a4ee:	d402      	bmi.n	800a4f6 <_putc_r+0x56>
 800a4f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4f2:	f7ff fbf7 	bl	8009ce4 <__retarget_lock_release_recursive>
 800a4f6:	4628      	mov	r0, r5
 800a4f8:	bd70      	pop	{r4, r5, r6, pc}
 800a4fa:	4629      	mov	r1, r5
 800a4fc:	4622      	mov	r2, r4
 800a4fe:	4630      	mov	r0, r6
 800a500:	f000 f802 	bl	800a508 <__swbuf_r>
 800a504:	4605      	mov	r5, r0
 800a506:	e7ed      	b.n	800a4e4 <_putc_r+0x44>

0800a508 <__swbuf_r>:
 800a508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a50a:	460e      	mov	r6, r1
 800a50c:	4614      	mov	r4, r2
 800a50e:	4605      	mov	r5, r0
 800a510:	b118      	cbz	r0, 800a51a <__swbuf_r+0x12>
 800a512:	6a03      	ldr	r3, [r0, #32]
 800a514:	b90b      	cbnz	r3, 800a51a <__swbuf_r+0x12>
 800a516:	f7ff fab7 	bl	8009a88 <__sinit>
 800a51a:	69a3      	ldr	r3, [r4, #24]
 800a51c:	60a3      	str	r3, [r4, #8]
 800a51e:	89a3      	ldrh	r3, [r4, #12]
 800a520:	071a      	lsls	r2, r3, #28
 800a522:	d525      	bpl.n	800a570 <__swbuf_r+0x68>
 800a524:	6923      	ldr	r3, [r4, #16]
 800a526:	b31b      	cbz	r3, 800a570 <__swbuf_r+0x68>
 800a528:	6823      	ldr	r3, [r4, #0]
 800a52a:	6922      	ldr	r2, [r4, #16]
 800a52c:	1a98      	subs	r0, r3, r2
 800a52e:	6963      	ldr	r3, [r4, #20]
 800a530:	b2f6      	uxtb	r6, r6
 800a532:	4283      	cmp	r3, r0
 800a534:	4637      	mov	r7, r6
 800a536:	dc04      	bgt.n	800a542 <__swbuf_r+0x3a>
 800a538:	4621      	mov	r1, r4
 800a53a:	4628      	mov	r0, r5
 800a53c:	f7ff ff88 	bl	800a450 <_fflush_r>
 800a540:	b9e0      	cbnz	r0, 800a57c <__swbuf_r+0x74>
 800a542:	68a3      	ldr	r3, [r4, #8]
 800a544:	3b01      	subs	r3, #1
 800a546:	60a3      	str	r3, [r4, #8]
 800a548:	6823      	ldr	r3, [r4, #0]
 800a54a:	1c5a      	adds	r2, r3, #1
 800a54c:	6022      	str	r2, [r4, #0]
 800a54e:	701e      	strb	r6, [r3, #0]
 800a550:	6962      	ldr	r2, [r4, #20]
 800a552:	1c43      	adds	r3, r0, #1
 800a554:	429a      	cmp	r2, r3
 800a556:	d004      	beq.n	800a562 <__swbuf_r+0x5a>
 800a558:	89a3      	ldrh	r3, [r4, #12]
 800a55a:	07db      	lsls	r3, r3, #31
 800a55c:	d506      	bpl.n	800a56c <__swbuf_r+0x64>
 800a55e:	2e0a      	cmp	r6, #10
 800a560:	d104      	bne.n	800a56c <__swbuf_r+0x64>
 800a562:	4621      	mov	r1, r4
 800a564:	4628      	mov	r0, r5
 800a566:	f7ff ff73 	bl	800a450 <_fflush_r>
 800a56a:	b938      	cbnz	r0, 800a57c <__swbuf_r+0x74>
 800a56c:	4638      	mov	r0, r7
 800a56e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a570:	4621      	mov	r1, r4
 800a572:	4628      	mov	r0, r5
 800a574:	f000 f806 	bl	800a584 <__swsetup_r>
 800a578:	2800      	cmp	r0, #0
 800a57a:	d0d5      	beq.n	800a528 <__swbuf_r+0x20>
 800a57c:	f04f 37ff 	mov.w	r7, #4294967295
 800a580:	e7f4      	b.n	800a56c <__swbuf_r+0x64>
	...

0800a584 <__swsetup_r>:
 800a584:	b538      	push	{r3, r4, r5, lr}
 800a586:	4b2a      	ldr	r3, [pc, #168]	; (800a630 <__swsetup_r+0xac>)
 800a588:	4605      	mov	r5, r0
 800a58a:	6818      	ldr	r0, [r3, #0]
 800a58c:	460c      	mov	r4, r1
 800a58e:	b118      	cbz	r0, 800a598 <__swsetup_r+0x14>
 800a590:	6a03      	ldr	r3, [r0, #32]
 800a592:	b90b      	cbnz	r3, 800a598 <__swsetup_r+0x14>
 800a594:	f7ff fa78 	bl	8009a88 <__sinit>
 800a598:	89a3      	ldrh	r3, [r4, #12]
 800a59a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a59e:	0718      	lsls	r0, r3, #28
 800a5a0:	d422      	bmi.n	800a5e8 <__swsetup_r+0x64>
 800a5a2:	06d9      	lsls	r1, r3, #27
 800a5a4:	d407      	bmi.n	800a5b6 <__swsetup_r+0x32>
 800a5a6:	2309      	movs	r3, #9
 800a5a8:	602b      	str	r3, [r5, #0]
 800a5aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a5ae:	81a3      	strh	r3, [r4, #12]
 800a5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b4:	e034      	b.n	800a620 <__swsetup_r+0x9c>
 800a5b6:	0758      	lsls	r0, r3, #29
 800a5b8:	d512      	bpl.n	800a5e0 <__swsetup_r+0x5c>
 800a5ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5bc:	b141      	cbz	r1, 800a5d0 <__swsetup_r+0x4c>
 800a5be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5c2:	4299      	cmp	r1, r3
 800a5c4:	d002      	beq.n	800a5cc <__swsetup_r+0x48>
 800a5c6:	4628      	mov	r0, r5
 800a5c8:	f7ff fb9c 	bl	8009d04 <_free_r>
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	6363      	str	r3, [r4, #52]	; 0x34
 800a5d0:	89a3      	ldrh	r3, [r4, #12]
 800a5d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a5d6:	81a3      	strh	r3, [r4, #12]
 800a5d8:	2300      	movs	r3, #0
 800a5da:	6063      	str	r3, [r4, #4]
 800a5dc:	6923      	ldr	r3, [r4, #16]
 800a5de:	6023      	str	r3, [r4, #0]
 800a5e0:	89a3      	ldrh	r3, [r4, #12]
 800a5e2:	f043 0308 	orr.w	r3, r3, #8
 800a5e6:	81a3      	strh	r3, [r4, #12]
 800a5e8:	6923      	ldr	r3, [r4, #16]
 800a5ea:	b94b      	cbnz	r3, 800a600 <__swsetup_r+0x7c>
 800a5ec:	89a3      	ldrh	r3, [r4, #12]
 800a5ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a5f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5f6:	d003      	beq.n	800a600 <__swsetup_r+0x7c>
 800a5f8:	4621      	mov	r1, r4
 800a5fa:	4628      	mov	r0, r5
 800a5fc:	f000 f840 	bl	800a680 <__smakebuf_r>
 800a600:	89a0      	ldrh	r0, [r4, #12]
 800a602:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a606:	f010 0301 	ands.w	r3, r0, #1
 800a60a:	d00a      	beq.n	800a622 <__swsetup_r+0x9e>
 800a60c:	2300      	movs	r3, #0
 800a60e:	60a3      	str	r3, [r4, #8]
 800a610:	6963      	ldr	r3, [r4, #20]
 800a612:	425b      	negs	r3, r3
 800a614:	61a3      	str	r3, [r4, #24]
 800a616:	6923      	ldr	r3, [r4, #16]
 800a618:	b943      	cbnz	r3, 800a62c <__swsetup_r+0xa8>
 800a61a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a61e:	d1c4      	bne.n	800a5aa <__swsetup_r+0x26>
 800a620:	bd38      	pop	{r3, r4, r5, pc}
 800a622:	0781      	lsls	r1, r0, #30
 800a624:	bf58      	it	pl
 800a626:	6963      	ldrpl	r3, [r4, #20]
 800a628:	60a3      	str	r3, [r4, #8]
 800a62a:	e7f4      	b.n	800a616 <__swsetup_r+0x92>
 800a62c:	2000      	movs	r0, #0
 800a62e:	e7f7      	b.n	800a620 <__swsetup_r+0x9c>
 800a630:	20000098 	.word	0x20000098

0800a634 <__swhatbuf_r>:
 800a634:	b570      	push	{r4, r5, r6, lr}
 800a636:	460c      	mov	r4, r1
 800a638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a63c:	2900      	cmp	r1, #0
 800a63e:	b096      	sub	sp, #88	; 0x58
 800a640:	4615      	mov	r5, r2
 800a642:	461e      	mov	r6, r3
 800a644:	da0d      	bge.n	800a662 <__swhatbuf_r+0x2e>
 800a646:	89a3      	ldrh	r3, [r4, #12]
 800a648:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a64c:	f04f 0100 	mov.w	r1, #0
 800a650:	bf0c      	ite	eq
 800a652:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a656:	2340      	movne	r3, #64	; 0x40
 800a658:	2000      	movs	r0, #0
 800a65a:	6031      	str	r1, [r6, #0]
 800a65c:	602b      	str	r3, [r5, #0]
 800a65e:	b016      	add	sp, #88	; 0x58
 800a660:	bd70      	pop	{r4, r5, r6, pc}
 800a662:	466a      	mov	r2, sp
 800a664:	f000 f848 	bl	800a6f8 <_fstat_r>
 800a668:	2800      	cmp	r0, #0
 800a66a:	dbec      	blt.n	800a646 <__swhatbuf_r+0x12>
 800a66c:	9901      	ldr	r1, [sp, #4]
 800a66e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a672:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a676:	4259      	negs	r1, r3
 800a678:	4159      	adcs	r1, r3
 800a67a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a67e:	e7eb      	b.n	800a658 <__swhatbuf_r+0x24>

0800a680 <__smakebuf_r>:
 800a680:	898b      	ldrh	r3, [r1, #12]
 800a682:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a684:	079d      	lsls	r5, r3, #30
 800a686:	4606      	mov	r6, r0
 800a688:	460c      	mov	r4, r1
 800a68a:	d507      	bpl.n	800a69c <__smakebuf_r+0x1c>
 800a68c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a690:	6023      	str	r3, [r4, #0]
 800a692:	6123      	str	r3, [r4, #16]
 800a694:	2301      	movs	r3, #1
 800a696:	6163      	str	r3, [r4, #20]
 800a698:	b002      	add	sp, #8
 800a69a:	bd70      	pop	{r4, r5, r6, pc}
 800a69c:	ab01      	add	r3, sp, #4
 800a69e:	466a      	mov	r2, sp
 800a6a0:	f7ff ffc8 	bl	800a634 <__swhatbuf_r>
 800a6a4:	9900      	ldr	r1, [sp, #0]
 800a6a6:	4605      	mov	r5, r0
 800a6a8:	4630      	mov	r0, r6
 800a6aa:	f7ff f8d5 	bl	8009858 <_malloc_r>
 800a6ae:	b948      	cbnz	r0, 800a6c4 <__smakebuf_r+0x44>
 800a6b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6b4:	059a      	lsls	r2, r3, #22
 800a6b6:	d4ef      	bmi.n	800a698 <__smakebuf_r+0x18>
 800a6b8:	f023 0303 	bic.w	r3, r3, #3
 800a6bc:	f043 0302 	orr.w	r3, r3, #2
 800a6c0:	81a3      	strh	r3, [r4, #12]
 800a6c2:	e7e3      	b.n	800a68c <__smakebuf_r+0xc>
 800a6c4:	89a3      	ldrh	r3, [r4, #12]
 800a6c6:	6020      	str	r0, [r4, #0]
 800a6c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6cc:	81a3      	strh	r3, [r4, #12]
 800a6ce:	9b00      	ldr	r3, [sp, #0]
 800a6d0:	6163      	str	r3, [r4, #20]
 800a6d2:	9b01      	ldr	r3, [sp, #4]
 800a6d4:	6120      	str	r0, [r4, #16]
 800a6d6:	b15b      	cbz	r3, 800a6f0 <__smakebuf_r+0x70>
 800a6d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6dc:	4630      	mov	r0, r6
 800a6de:	f000 f81d 	bl	800a71c <_isatty_r>
 800a6e2:	b128      	cbz	r0, 800a6f0 <__smakebuf_r+0x70>
 800a6e4:	89a3      	ldrh	r3, [r4, #12]
 800a6e6:	f023 0303 	bic.w	r3, r3, #3
 800a6ea:	f043 0301 	orr.w	r3, r3, #1
 800a6ee:	81a3      	strh	r3, [r4, #12]
 800a6f0:	89a3      	ldrh	r3, [r4, #12]
 800a6f2:	431d      	orrs	r5, r3
 800a6f4:	81a5      	strh	r5, [r4, #12]
 800a6f6:	e7cf      	b.n	800a698 <__smakebuf_r+0x18>

0800a6f8 <_fstat_r>:
 800a6f8:	b538      	push	{r3, r4, r5, lr}
 800a6fa:	4d07      	ldr	r5, [pc, #28]	; (800a718 <_fstat_r+0x20>)
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	4604      	mov	r4, r0
 800a700:	4608      	mov	r0, r1
 800a702:	4611      	mov	r1, r2
 800a704:	602b      	str	r3, [r5, #0]
 800a706:	f7f6 f95e 	bl	80009c6 <_fstat>
 800a70a:	1c43      	adds	r3, r0, #1
 800a70c:	d102      	bne.n	800a714 <_fstat_r+0x1c>
 800a70e:	682b      	ldr	r3, [r5, #0]
 800a710:	b103      	cbz	r3, 800a714 <_fstat_r+0x1c>
 800a712:	6023      	str	r3, [r4, #0]
 800a714:	bd38      	pop	{r3, r4, r5, pc}
 800a716:	bf00      	nop
 800a718:	2001e534 	.word	0x2001e534

0800a71c <_isatty_r>:
 800a71c:	b538      	push	{r3, r4, r5, lr}
 800a71e:	4d06      	ldr	r5, [pc, #24]	; (800a738 <_isatty_r+0x1c>)
 800a720:	2300      	movs	r3, #0
 800a722:	4604      	mov	r4, r0
 800a724:	4608      	mov	r0, r1
 800a726:	602b      	str	r3, [r5, #0]
 800a728:	f7f6 f95d 	bl	80009e6 <_isatty>
 800a72c:	1c43      	adds	r3, r0, #1
 800a72e:	d102      	bne.n	800a736 <_isatty_r+0x1a>
 800a730:	682b      	ldr	r3, [r5, #0]
 800a732:	b103      	cbz	r3, 800a736 <_isatty_r+0x1a>
 800a734:	6023      	str	r3, [r4, #0]
 800a736:	bd38      	pop	{r3, r4, r5, pc}
 800a738:	2001e534 	.word	0x2001e534

0800a73c <_init>:
 800a73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a73e:	bf00      	nop
 800a740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a742:	bc08      	pop	{r3}
 800a744:	469e      	mov	lr, r3
 800a746:	4770      	bx	lr

0800a748 <_fini>:
 800a748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a74a:	bf00      	nop
 800a74c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a74e:	bc08      	pop	{r3}
 800a750:	469e      	mov	lr, r3
 800a752:	4770      	bx	lr
